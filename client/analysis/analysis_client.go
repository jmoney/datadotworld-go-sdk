// Code generated by go-swagger; DO NOT EDIT.

package analysis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new analysis API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for analysis API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCatalogAnalysis(params *CreateCatalogAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCatalogAnalysisOK, error)

	DeleteCatalogAnalysis(params *DeleteCatalogAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCatalogAnalysisOK, error)

	GetCatalogAnalysesByOwner(params *GetCatalogAnalysesByOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogAnalysesByOwnerOK, error)

	GetCatalogAnalysis(params *GetCatalogAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogAnalysisOK, error)

	PatchCatalogAnalysis(params *PatchCatalogAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchCatalogAnalysisOK, error)

	ReplaceCatalogAnalysis(params *ReplaceCatalogAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceCatalogAnalysisOK, error)

	SuggestCatalogAnalysis(params *SuggestCatalogAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SuggestCatalogAnalysisOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCatalogAnalysis creates a new analysis metadata
*/
func (a *Client) CreateCatalogAnalysis(params *CreateCatalogAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCatalogAnalysisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCatalogAnalysisParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCatalogAnalysis",
		Method:             "POST",
		PathPattern:        "/metadata/analysis/{owner}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCatalogAnalysisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCatalogAnalysisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCatalogAnalysis: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCatalogAnalysis deletes an analysis
*/
func (a *Client) DeleteCatalogAnalysis(params *DeleteCatalogAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCatalogAnalysisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogAnalysisParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCatalogAnalysis",
		Method:             "DELETE",
		PathPattern:        "/metadata/analysis/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCatalogAnalysisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCatalogAnalysisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCatalogAnalysis: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCatalogAnalysesByOwner gets metadata analysis by owner
*/
func (a *Client) GetCatalogAnalysesByOwner(params *GetCatalogAnalysesByOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogAnalysesByOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogAnalysesByOwnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCatalogAnalysesByOwner",
		Method:             "GET",
		PathPattern:        "/metadata/analysis/{owner}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCatalogAnalysesByOwnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogAnalysesByOwnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogAnalysesByOwner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCatalogAnalysis gets an individual metadata analysis
*/
func (a *Client) GetCatalogAnalysis(params *GetCatalogAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogAnalysisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogAnalysisParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCatalogAnalysis",
		Method:             "GET",
		PathPattern:        "/metadata/analysis/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCatalogAnalysisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogAnalysisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogAnalysis: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCatalogAnalysis updates an existing analysis
*/
func (a *Client) PatchCatalogAnalysis(params *PatchCatalogAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchCatalogAnalysisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCatalogAnalysisParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchCatalogAnalysis",
		Method:             "PATCH",
		PathPattern:        "/metadata/analysis/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCatalogAnalysisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCatalogAnalysisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCatalogAnalysis: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCatalogAnalysis replaces an existing analysis
*/
func (a *Client) ReplaceCatalogAnalysis(params *ReplaceCatalogAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceCatalogAnalysisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCatalogAnalysisParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceCatalogAnalysis",
		Method:             "PUT",
		PathPattern:        "/metadata/analysis/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceCatalogAnalysisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceCatalogAnalysisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceCatalogAnalysis: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SuggestCatalogAnalysis suggests for an existing analysis
*/
func (a *Client) SuggestCatalogAnalysis(params *SuggestCatalogAnalysisParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SuggestCatalogAnalysisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuggestCatalogAnalysisParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "suggestCatalogAnalysis",
		Method:             "PATCH",
		PathPattern:        "/metadata/analysis/suggest/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SuggestCatalogAnalysisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuggestCatalogAnalysisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for suggestCatalogAnalysis: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package serviceaccount

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// ResetServiceAccountReader is a Reader for the ResetServiceAccount structure.
type ResetServiceAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ResetServiceAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewResetServiceAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewResetServiceAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewResetServiceAccountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewResetServiceAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewResetServiceAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewResetServiceAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewResetServiceAccountOK creates a ResetServiceAccountOK with default headers values
func NewResetServiceAccountOK() *ResetServiceAccountOK {
	return &ResetServiceAccountOK{}
}

/* ResetServiceAccountOK describes a response with status code 200, with default header values.

Successfully refresh service account token
*/
type ResetServiceAccountOK struct {
	Payload *models.ServiceAccountCreateResponseDto
}

func (o *ResetServiceAccountOK) Error() string {
	return fmt.Sprintf("[POST /serviceaccount/{owner}/{serviceAccount}/refresh][%d] resetServiceAccountOK  %+v", 200, o.Payload)
}
func (o *ResetServiceAccountOK) GetPayload() *models.ServiceAccountCreateResponseDto {
	return o.Payload
}

func (o *ResetServiceAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ServiceAccountCreateResponseDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetServiceAccountBadRequest creates a ResetServiceAccountBadRequest with default headers values
func NewResetServiceAccountBadRequest() *ResetServiceAccountBadRequest {
	return &ResetServiceAccountBadRequest{}
}

/* ResetServiceAccountBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ResetServiceAccountBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *ResetServiceAccountBadRequest) Error() string {
	return fmt.Sprintf("[POST /serviceaccount/{owner}/{serviceAccount}/refresh][%d] resetServiceAccountBadRequest  %+v", 400, o.Payload)
}
func (o *ResetServiceAccountBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *ResetServiceAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetServiceAccountUnauthorized creates a ResetServiceAccountUnauthorized with default headers values
func NewResetServiceAccountUnauthorized() *ResetServiceAccountUnauthorized {
	return &ResetServiceAccountUnauthorized{}
}

/* ResetServiceAccountUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ResetServiceAccountUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *ResetServiceAccountUnauthorized) Error() string {
	return fmt.Sprintf("[POST /serviceaccount/{owner}/{serviceAccount}/refresh][%d] resetServiceAccountUnauthorized  %+v", 401, o.Payload)
}
func (o *ResetServiceAccountUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *ResetServiceAccountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetServiceAccountForbidden creates a ResetServiceAccountForbidden with default headers values
func NewResetServiceAccountForbidden() *ResetServiceAccountForbidden {
	return &ResetServiceAccountForbidden{}
}

/* ResetServiceAccountForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ResetServiceAccountForbidden struct {
	Payload *models.ErrorMessage
}

func (o *ResetServiceAccountForbidden) Error() string {
	return fmt.Sprintf("[POST /serviceaccount/{owner}/{serviceAccount}/refresh][%d] resetServiceAccountForbidden  %+v", 403, o.Payload)
}
func (o *ResetServiceAccountForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *ResetServiceAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetServiceAccountNotFound creates a ResetServiceAccountNotFound with default headers values
func NewResetServiceAccountNotFound() *ResetServiceAccountNotFound {
	return &ResetServiceAccountNotFound{}
}

/* ResetServiceAccountNotFound describes a response with status code 404, with default header values.

Not found
*/
type ResetServiceAccountNotFound struct {
	Payload *models.ErrorMessage
}

func (o *ResetServiceAccountNotFound) Error() string {
	return fmt.Sprintf("[POST /serviceaccount/{owner}/{serviceAccount}/refresh][%d] resetServiceAccountNotFound  %+v", 404, o.Payload)
}
func (o *ResetServiceAccountNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *ResetServiceAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewResetServiceAccountInternalServerError creates a ResetServiceAccountInternalServerError with default headers values
func NewResetServiceAccountInternalServerError() *ResetServiceAccountInternalServerError {
	return &ResetServiceAccountInternalServerError{}
}

/* ResetServiceAccountInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type ResetServiceAccountInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *ResetServiceAccountInternalServerError) Error() string {
	return fmt.Sprintf("[POST /serviceaccount/{owner}/{serviceAccount}/refresh][%d] resetServiceAccountInternalServerError  %+v", 500, o.Payload)
}
func (o *ResetServiceAccountInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *ResetServiceAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package partners

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new partners API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for partners API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	StitchAuthorized(params *StitchAuthorizedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error

	StitchCreateDataset(params *StitchCreateDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StitchCreateDatasetOK, error)

	StitchUploadManifest(params *StitchUploadManifestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StitchUploadManifestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  StitchAuthorized checks whether user credentials allow write access to the specified data world account
*/
func (a *Client) StitchAuthorized(params *StitchAuthorizedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStitchAuthorizedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stitchAuthorized",
		Method:             "HEAD",
		PathPattern:        "/partners/stitchdata/uploads/{account}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StitchAuthorizedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
  StitchCreateDataset creates a target dataset if it doesn t exist already
*/
func (a *Client) StitchCreateDataset(params *StitchCreateDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StitchCreateDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStitchCreateDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stitchCreateDataset",
		Method:             "POST",
		PathPattern:        "/partners/stitchdata/uploads/{account}/{integrationName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StitchCreateDatasetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StitchCreateDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stitchCreateDataset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  StitchUploadManifest notifies data world that new files have been uploaded to s3
*/
func (a *Client) StitchUploadManifest(params *StitchUploadManifestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*StitchUploadManifestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStitchUploadManifestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "stitchUploadManifest",
		Method:             "POST",
		PathPattern:        "/partners/stitchdata/uploads/{account}/{integrationName}/manifest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &StitchUploadManifestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*StitchUploadManifestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for stitchUploadManifest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package d_o_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// AddVersionDoiReader is a Reader for the AddVersionDoi structure.
type AddVersionDoiReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddVersionDoiReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddVersionDoiOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddVersionDoiBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddVersionDoiUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddVersionDoiForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddVersionDoiNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddVersionDoiInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddVersionDoiOK creates a AddVersionDoiOK with default headers values
func NewAddVersionDoiOK() *AddVersionDoiOK {
	return &AddVersionDoiOK{}
}

/* AddVersionDoiOK describes a response with status code 200, with default header values.

DOI successfully added to dataset version.
*/
type AddVersionDoiOK struct {
	Payload *models.SuccessMessage
}

func (o *AddVersionDoiOK) Error() string {
	return fmt.Sprintf("[PUT /datasets/{owner}/{id}/v/{versionId}/dois/{doi}][%d] addVersionDoiOK  %+v", 200, o.Payload)
}
func (o *AddVersionDoiOK) GetPayload() *models.SuccessMessage {
	return o.Payload
}

func (o *AddVersionDoiOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVersionDoiBadRequest creates a AddVersionDoiBadRequest with default headers values
func NewAddVersionDoiBadRequest() *AddVersionDoiBadRequest {
	return &AddVersionDoiBadRequest{}
}

/* AddVersionDoiBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AddVersionDoiBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *AddVersionDoiBadRequest) Error() string {
	return fmt.Sprintf("[PUT /datasets/{owner}/{id}/v/{versionId}/dois/{doi}][%d] addVersionDoiBadRequest  %+v", 400, o.Payload)
}
func (o *AddVersionDoiBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *AddVersionDoiBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVersionDoiUnauthorized creates a AddVersionDoiUnauthorized with default headers values
func NewAddVersionDoiUnauthorized() *AddVersionDoiUnauthorized {
	return &AddVersionDoiUnauthorized{}
}

/* AddVersionDoiUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AddVersionDoiUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *AddVersionDoiUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /datasets/{owner}/{id}/v/{versionId}/dois/{doi}][%d] addVersionDoiUnauthorized  %+v", 401, o.Payload)
}
func (o *AddVersionDoiUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *AddVersionDoiUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVersionDoiForbidden creates a AddVersionDoiForbidden with default headers values
func NewAddVersionDoiForbidden() *AddVersionDoiForbidden {
	return &AddVersionDoiForbidden{}
}

/* AddVersionDoiForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddVersionDoiForbidden struct {
	Payload *models.ErrorMessage
}

func (o *AddVersionDoiForbidden) Error() string {
	return fmt.Sprintf("[PUT /datasets/{owner}/{id}/v/{versionId}/dois/{doi}][%d] addVersionDoiForbidden  %+v", 403, o.Payload)
}
func (o *AddVersionDoiForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *AddVersionDoiForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVersionDoiNotFound creates a AddVersionDoiNotFound with default headers values
func NewAddVersionDoiNotFound() *AddVersionDoiNotFound {
	return &AddVersionDoiNotFound{}
}

/* AddVersionDoiNotFound describes a response with status code 404, with default header values.

Not found
*/
type AddVersionDoiNotFound struct {
	Payload *models.ErrorMessage
}

func (o *AddVersionDoiNotFound) Error() string {
	return fmt.Sprintf("[PUT /datasets/{owner}/{id}/v/{versionId}/dois/{doi}][%d] addVersionDoiNotFound  %+v", 404, o.Payload)
}
func (o *AddVersionDoiNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *AddVersionDoiNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddVersionDoiInternalServerError creates a AddVersionDoiInternalServerError with default headers values
func NewAddVersionDoiInternalServerError() *AddVersionDoiInternalServerError {
	return &AddVersionDoiInternalServerError{}
}

/* AddVersionDoiInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type AddVersionDoiInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *AddVersionDoiInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /datasets/{owner}/{id}/v/{versionId}/dois/{doi}][%d] addVersionDoiInternalServerError  %+v", 500, o.Payload)
}
func (o *AddVersionDoiInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *AddVersionDoiInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package d_o_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new d o is API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for d o is API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddDoi(params *AddDoiParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddDoiOK, error)

	AddVersionDoi(params *AddVersionDoiParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVersionDoiOK, error)

	DeleteDoi(params *DeleteDoiParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDoiOK, error)

	DeleteVersionDoi(params *DeleteVersionDoiParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVersionDoiOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddDoi creates dataset d o i
*/
func (a *Client) AddDoi(params *AddDoiParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddDoiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDoiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addDoi",
		Method:             "PUT",
		PathPattern:        "/datasets/{owner}/{id}/dois/{doi}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddDoiReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddDoiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addDoi: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddVersionDoi creates dataset version d o i
*/
func (a *Client) AddVersionDoi(params *AddVersionDoiParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddVersionDoiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddVersionDoiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addVersionDoi",
		Method:             "PUT",
		PathPattern:        "/datasets/{owner}/{id}/v/{versionId}/dois/{doi}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddVersionDoiReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddVersionDoiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addVersionDoi: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDoi deletes dataset d o i
*/
func (a *Client) DeleteDoi(params *DeleteDoiParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDoiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDoiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDoi",
		Method:             "DELETE",
		PathPattern:        "/datasets/{owner}/{id}/dois/{doi}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDoiReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDoiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDoi: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteVersionDoi deletes dataset version d o i
*/
func (a *Client) DeleteVersionDoi(params *DeleteVersionDoiParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteVersionDoiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVersionDoiParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteVersionDoi",
		Method:             "DELETE",
		PathPattern:        "/datasets/{owner}/{id}/v/{versionId}/dois/{doi}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteVersionDoiReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteVersionDoiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteVersionDoi: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

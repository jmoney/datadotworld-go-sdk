// Code generated by go-swagger; DO NOT EDIT.

package uploads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewUploadFilesParams creates a new UploadFilesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUploadFilesParams() *UploadFilesParams {
	return &UploadFilesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUploadFilesParamsWithTimeout creates a new UploadFilesParams object
// with the ability to set a timeout on a request.
func NewUploadFilesParamsWithTimeout(timeout time.Duration) *UploadFilesParams {
	return &UploadFilesParams{
		timeout: timeout,
	}
}

// NewUploadFilesParamsWithContext creates a new UploadFilesParams object
// with the ability to set a context for a request.
func NewUploadFilesParamsWithContext(ctx context.Context) *UploadFilesParams {
	return &UploadFilesParams{
		Context: ctx,
	}
}

// NewUploadFilesParamsWithHTTPClient creates a new UploadFilesParams object
// with the ability to set a custom HTTPClient for a request.
func NewUploadFilesParamsWithHTTPClient(client *http.Client) *UploadFilesParams {
	return &UploadFilesParams{
		HTTPClient: client,
	}
}

/* UploadFilesParams contains all the parameters to send to the API endpoint
   for the upload files operation.

   Typically these are written to a http.Request.
*/
type UploadFilesParams struct {

	// ExpandArchives.
	ExpandArchives *bool

	/* File.

	   Multipart-encoded file contents
	*/
	File runtime.NamedReadCloser

	// ID.
	ID string

	// Owner.
	Owner string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the upload files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadFilesParams) WithDefaults() *UploadFilesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the upload files params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UploadFilesParams) SetDefaults() {
	var (
		expandArchivesDefault = bool(false)
	)

	val := UploadFilesParams{
		ExpandArchives: &expandArchivesDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the upload files params
func (o *UploadFilesParams) WithTimeout(timeout time.Duration) *UploadFilesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload files params
func (o *UploadFilesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload files params
func (o *UploadFilesParams) WithContext(ctx context.Context) *UploadFilesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload files params
func (o *UploadFilesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload files params
func (o *UploadFilesParams) WithHTTPClient(client *http.Client) *UploadFilesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload files params
func (o *UploadFilesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithExpandArchives adds the expandArchives to the upload files params
func (o *UploadFilesParams) WithExpandArchives(expandArchives *bool) *UploadFilesParams {
	o.SetExpandArchives(expandArchives)
	return o
}

// SetExpandArchives adds the expandArchives to the upload files params
func (o *UploadFilesParams) SetExpandArchives(expandArchives *bool) {
	o.ExpandArchives = expandArchives
}

// WithFile adds the file to the upload files params
func (o *UploadFilesParams) WithFile(file runtime.NamedReadCloser) *UploadFilesParams {
	o.SetFile(file)
	return o
}

// SetFile adds the file to the upload files params
func (o *UploadFilesParams) SetFile(file runtime.NamedReadCloser) {
	o.File = file
}

// WithID adds the id to the upload files params
func (o *UploadFilesParams) WithID(id string) *UploadFilesParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the upload files params
func (o *UploadFilesParams) SetID(id string) {
	o.ID = id
}

// WithOwner adds the owner to the upload files params
func (o *UploadFilesParams) WithOwner(owner string) *UploadFilesParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the upload files params
func (o *UploadFilesParams) SetOwner(owner string) {
	o.Owner = owner
}

// WriteToRequest writes these params to a swagger request
func (o *UploadFilesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ExpandArchives != nil {

		// query param expandArchives
		var qrExpandArchives bool

		if o.ExpandArchives != nil {
			qrExpandArchives = *o.ExpandArchives
		}
		qExpandArchives := swag.FormatBool(qrExpandArchives)
		if qExpandArchives != "" {

			if err := r.SetQueryParam("expandArchives", qExpandArchives); err != nil {
				return err
			}
		}
	}
	// form file param file
	if err := r.SetFileParam("file", o.File); err != nil {
		return err
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package datasets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// DeleteFileAndSyncSourceReader is a Reader for the DeleteFileAndSyncSource structure.
type DeleteFileAndSyncSourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteFileAndSyncSourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteFileAndSyncSourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteFileAndSyncSourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteFileAndSyncSourceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteFileAndSyncSourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteFileAndSyncSourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteFileAndSyncSourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteFileAndSyncSourceOK creates a DeleteFileAndSyncSourceOK with default headers values
func NewDeleteFileAndSyncSourceOK() *DeleteFileAndSyncSourceOK {
	return &DeleteFileAndSyncSourceOK{}
}

/* DeleteFileAndSyncSourceOK describes a response with status code 200, with default header values.

Dataset file(s) have been successfully deleted.
*/
type DeleteFileAndSyncSourceOK struct {
	Payload *models.SuccessMessage
}

func (o *DeleteFileAndSyncSourceOK) Error() string {
	return fmt.Sprintf("[DELETE /datasets/{owner}/{id}/files/{file}][%d] deleteFileAndSyncSourceOK  %+v", 200, o.Payload)
}
func (o *DeleteFileAndSyncSourceOK) GetPayload() *models.SuccessMessage {
	return o.Payload
}

func (o *DeleteFileAndSyncSourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileAndSyncSourceBadRequest creates a DeleteFileAndSyncSourceBadRequest with default headers values
func NewDeleteFileAndSyncSourceBadRequest() *DeleteFileAndSyncSourceBadRequest {
	return &DeleteFileAndSyncSourceBadRequest{}
}

/* DeleteFileAndSyncSourceBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteFileAndSyncSourceBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *DeleteFileAndSyncSourceBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /datasets/{owner}/{id}/files/{file}][%d] deleteFileAndSyncSourceBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteFileAndSyncSourceBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteFileAndSyncSourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileAndSyncSourceUnauthorized creates a DeleteFileAndSyncSourceUnauthorized with default headers values
func NewDeleteFileAndSyncSourceUnauthorized() *DeleteFileAndSyncSourceUnauthorized {
	return &DeleteFileAndSyncSourceUnauthorized{}
}

/* DeleteFileAndSyncSourceUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteFileAndSyncSourceUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *DeleteFileAndSyncSourceUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /datasets/{owner}/{id}/files/{file}][%d] deleteFileAndSyncSourceUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteFileAndSyncSourceUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteFileAndSyncSourceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileAndSyncSourceForbidden creates a DeleteFileAndSyncSourceForbidden with default headers values
func NewDeleteFileAndSyncSourceForbidden() *DeleteFileAndSyncSourceForbidden {
	return &DeleteFileAndSyncSourceForbidden{}
}

/* DeleteFileAndSyncSourceForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteFileAndSyncSourceForbidden struct {
	Payload *models.ErrorMessage
}

func (o *DeleteFileAndSyncSourceForbidden) Error() string {
	return fmt.Sprintf("[DELETE /datasets/{owner}/{id}/files/{file}][%d] deleteFileAndSyncSourceForbidden  %+v", 403, o.Payload)
}
func (o *DeleteFileAndSyncSourceForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteFileAndSyncSourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileAndSyncSourceNotFound creates a DeleteFileAndSyncSourceNotFound with default headers values
func NewDeleteFileAndSyncSourceNotFound() *DeleteFileAndSyncSourceNotFound {
	return &DeleteFileAndSyncSourceNotFound{}
}

/* DeleteFileAndSyncSourceNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteFileAndSyncSourceNotFound struct {
	Payload *models.ErrorMessage
}

func (o *DeleteFileAndSyncSourceNotFound) Error() string {
	return fmt.Sprintf("[DELETE /datasets/{owner}/{id}/files/{file}][%d] deleteFileAndSyncSourceNotFound  %+v", 404, o.Payload)
}
func (o *DeleteFileAndSyncSourceNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteFileAndSyncSourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteFileAndSyncSourceInternalServerError creates a DeleteFileAndSyncSourceInternalServerError with default headers values
func NewDeleteFileAndSyncSourceInternalServerError() *DeleteFileAndSyncSourceInternalServerError {
	return &DeleteFileAndSyncSourceInternalServerError{}
}

/* DeleteFileAndSyncSourceInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type DeleteFileAndSyncSourceInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *DeleteFileAndSyncSourceInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /datasets/{owner}/{id}/files/{file}][%d] deleteFileAndSyncSourceInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteFileAndSyncSourceInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteFileAndSyncSourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package datasets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// AddTablesReader is a Reader for the AddTables structure.
type AddTablesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddTablesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddTablesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddTablesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAddTablesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddTablesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddTablesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAddTablesUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddTablesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddTablesOK creates a AddTablesOK with default headers values
func NewAddTablesOK() *AddTablesOK {
	return &AddTablesOK{}
}

/* AddTablesOK describes a response with status code 200, with default header values.

Dataset successfully updated with new sources. Sync in progress.
*/
type AddTablesOK struct {
	Payload *models.SuccessMessage
}

func (o *AddTablesOK) Error() string {
	return fmt.Sprintf("[POST /datasets/{owner}/{id}/tables][%d] addTablesOK  %+v", 200, o.Payload)
}
func (o *AddTablesOK) GetPayload() *models.SuccessMessage {
	return o.Payload
}

func (o *AddTablesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTablesBadRequest creates a AddTablesBadRequest with default headers values
func NewAddTablesBadRequest() *AddTablesBadRequest {
	return &AddTablesBadRequest{}
}

/* AddTablesBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type AddTablesBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *AddTablesBadRequest) Error() string {
	return fmt.Sprintf("[POST /datasets/{owner}/{id}/tables][%d] addTablesBadRequest  %+v", 400, o.Payload)
}
func (o *AddTablesBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *AddTablesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTablesUnauthorized creates a AddTablesUnauthorized with default headers values
func NewAddTablesUnauthorized() *AddTablesUnauthorized {
	return &AddTablesUnauthorized{}
}

/* AddTablesUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AddTablesUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *AddTablesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /datasets/{owner}/{id}/tables][%d] addTablesUnauthorized  %+v", 401, o.Payload)
}
func (o *AddTablesUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *AddTablesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTablesForbidden creates a AddTablesForbidden with default headers values
func NewAddTablesForbidden() *AddTablesForbidden {
	return &AddTablesForbidden{}
}

/* AddTablesForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type AddTablesForbidden struct {
	Payload *models.ErrorMessage
}

func (o *AddTablesForbidden) Error() string {
	return fmt.Sprintf("[POST /datasets/{owner}/{id}/tables][%d] addTablesForbidden  %+v", 403, o.Payload)
}
func (o *AddTablesForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *AddTablesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTablesNotFound creates a AddTablesNotFound with default headers values
func NewAddTablesNotFound() *AddTablesNotFound {
	return &AddTablesNotFound{}
}

/* AddTablesNotFound describes a response with status code 404, with default header values.

Not found
*/
type AddTablesNotFound struct {
	Payload *models.ErrorMessage
}

func (o *AddTablesNotFound) Error() string {
	return fmt.Sprintf("[POST /datasets/{owner}/{id}/tables][%d] addTablesNotFound  %+v", 404, o.Payload)
}
func (o *AddTablesNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *AddTablesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTablesUnprocessableEntity creates a AddTablesUnprocessableEntity with default headers values
func NewAddTablesUnprocessableEntity() *AddTablesUnprocessableEntity {
	return &AddTablesUnprocessableEntity{}
}

/* AddTablesUnprocessableEntity describes a response with status code 422, with default header values.

Bad request
*/
type AddTablesUnprocessableEntity struct {
	Payload *models.ErrorMessage
}

func (o *AddTablesUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /datasets/{owner}/{id}/tables][%d] addTablesUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *AddTablesUnprocessableEntity) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *AddTablesUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddTablesInternalServerError creates a AddTablesInternalServerError with default headers values
func NewAddTablesInternalServerError() *AddTablesInternalServerError {
	return &AddTablesInternalServerError{}
}

/* AddTablesInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type AddTablesInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *AddTablesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /datasets/{owner}/{id}/tables][%d] addTablesInternalServerError  %+v", 500, o.Payload)
}
func (o *AddTablesInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *AddTablesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

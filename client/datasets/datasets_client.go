// Code generated by go-swagger; DO NOT EDIT.

package datasets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new datasets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for datasets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddFilesBySource(params *AddFilesBySourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddFilesBySourceOK, error)

	AddTables(params *AddTablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddTablesOK, error)

	CreateDataset(params *CreateDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDatasetOK, error)

	CreateDatasetSavedQuery(params *CreateDatasetSavedQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDatasetSavedQueryOK, error)

	DeleteDataset(params *DeleteDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDatasetOK, error)

	DeleteDatasetSavedQuery(params *DeleteDatasetSavedQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDatasetSavedQueryOK, error)

	DeleteFileAndSyncSource(params *DeleteFileAndSyncSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFileAndSyncSourceOK, error)

	DeleteFilesAndSyncSources(params *DeleteFilesAndSyncSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFilesAndSyncSourcesOK, error)

	GetDataset(params *GetDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatasetOK, error)

	GetDatasetByVersion(params *GetDatasetByVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatasetByVersionOK, error)

	GetDatasetQueries(params *GetDatasetQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatasetQueriesOK, error)

	GetDatasetsByOwner(params *GetDatasetsByOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatasetsByOwnerOK, error)

	GetFileMetadata(params *GetFileMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileMetadataOK, error)

	PatchDataset(params *PatchDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchDatasetOK, error)

	PatchFileMetadata(params *PatchFileMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchFileMetadataOK, error)

	PutFileMetadata(params *PutFileMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutFileMetadataOK, error)

	ReplaceDataset(params *ReplaceDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceDatasetOK, error)

	Search(params *SearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchOK, error)

	Sync(params *SyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncOK, error)

	SyncViaGet(params *SyncViaGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncViaGetOK, error)

	UpdateDatasetSavedQuery(params *UpdateDatasetSavedQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDatasetSavedQueryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddFilesBySource adds or update files for a dataset
*/
func (a *Client) AddFilesBySource(params *AddFilesBySourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddFilesBySourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddFilesBySourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addFilesBySource",
		Method:             "POST",
		PathPattern:        "/datasets/{owner}/{id}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddFilesBySourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddFilesBySourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addFilesBySource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  AddTables adds or update tables for a dataset
*/
func (a *Client) AddTables(params *AddTablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddTablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddTablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addTables",
		Method:             "POST",
		PathPattern:        "/datasets/{owner}/{id}/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddTablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddTablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addTables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDataset creates a new dataset
*/
func (a *Client) CreateDataset(params *CreateDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDataset",
		Method:             "POST",
		PathPattern:        "/datasets/{owner}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDatasetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDataset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateDatasetSavedQuery creates a saved query for a dataset
*/
func (a *Client) CreateDatasetSavedQuery(params *CreateDatasetSavedQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateDatasetSavedQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDatasetSavedQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createDatasetSavedQuery",
		Method:             "POST",
		PathPattern:        "/datasets/{owner}/{id}/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDatasetSavedQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateDatasetSavedQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createDatasetSavedQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDataset deletes a dataset
*/
func (a *Client) DeleteDataset(params *DeleteDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDataset",
		Method:             "DELETE",
		PathPattern:        "/datasets/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDatasetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDataset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteDatasetSavedQuery deletes a saved query for a dataset
*/
func (a *Client) DeleteDatasetSavedQuery(params *DeleteDatasetSavedQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteDatasetSavedQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatasetSavedQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteDatasetSavedQuery",
		Method:             "DELETE",
		PathPattern:        "/datasets/{owner}/{id}/queries/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteDatasetSavedQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteDatasetSavedQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteDatasetSavedQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFileAndSyncSource deletes a single file for a dataset
*/
func (a *Client) DeleteFileAndSyncSource(params *DeleteFileAndSyncSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFileAndSyncSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFileAndSyncSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFileAndSyncSource",
		Method:             "DELETE",
		PathPattern:        "/datasets/{owner}/{id}/files/{file}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFileAndSyncSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFileAndSyncSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteFileAndSyncSource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteFilesAndSyncSources deletes files for a dataset
*/
func (a *Client) DeleteFilesAndSyncSources(params *DeleteFilesAndSyncSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteFilesAndSyncSourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFilesAndSyncSourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteFilesAndSyncSources",
		Method:             "DELETE",
		PathPattern:        "/datasets/{owner}/{id}/files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFilesAndSyncSourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteFilesAndSyncSourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteFilesAndSyncSources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDataset retrieves a dataset
*/
func (a *Client) GetDataset(params *GetDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDataset",
		Method:             "GET",
		PathPattern:        "/datasets/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatasetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDataset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDatasetByVersion retrieves a dataset by version
*/
func (a *Client) GetDatasetByVersion(params *GetDatasetByVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatasetByVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatasetByVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatasetByVersion",
		Method:             "GET",
		PathPattern:        "/datasets/{owner}/{id}/v/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatasetByVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatasetByVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatasetByVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDatasetQueries retrieves queries saved in a dataset
*/
func (a *Client) GetDatasetQueries(params *GetDatasetQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatasetQueriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatasetQueriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatasetQueries",
		Method:             "GET",
		PathPattern:        "/datasets/{owner}/{id}/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatasetQueriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatasetQueriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatasetQueries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDatasetsByOwner gets datasets by owner
*/
func (a *Client) GetDatasetsByOwner(params *GetDatasetsByOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatasetsByOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatasetsByOwnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatasetsByOwner",
		Method:             "GET",
		PathPattern:        "/datasets/{owner}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatasetsByOwnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatasetsByOwnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatasetsByOwner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetFileMetadata gets file description and labels

  Get file description and labels
*/
func (a *Client) GetFileMetadata(params *GetFileMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetFileMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFileMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getFileMetadata",
		Method:             "GET",
		PathPattern:        "/datasets/{owner}/{id}/files/{file}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFileMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetFileMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getFileMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchDataset updates an existing dataset
*/
func (a *Client) PatchDataset(params *PatchDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchDataset",
		Method:             "PATCH",
		PathPattern:        "/datasets/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchDatasetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchDataset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchFileMetadata updates file description and labels

  Update file description and labels
*/
func (a *Client) PatchFileMetadata(params *PatchFileMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchFileMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchFileMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchFileMetadata",
		Method:             "PATCH",
		PathPattern:        "/datasets/{owner}/{id}/files/{file}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchFileMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchFileMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchFileMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PutFileMetadata replaces file description and labels

  Replace file description and labels
*/
func (a *Client) PutFileMetadata(params *PutFileMetadataParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutFileMetadataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutFileMetadataParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putFileMetadata",
		Method:             "PUT",
		PathPattern:        "/datasets/{owner}/{id}/files/{file}/metadata",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutFileMetadataReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutFileMetadataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putFileMetadata: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceDataset replaces an existing dataset or create a new dataset
*/
func (a *Client) ReplaceDataset(params *ReplaceDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceDataset",
		Method:             "PUT",
		PathPattern:        "/datasets/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceDatasetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceDataset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Search searches for datasets
*/
func (a *Client) Search(params *SearchParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "search",
		Method:             "GET",
		PathPattern:        "/datasets/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for search: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Sync fetches latest files from source and update dataset
*/
func (a *Client) Sync(params *SyncParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sync",
		Method:             "POST",
		PathPattern:        "/datasets/{owner}/{id}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SyncViaGet fetches latest files from source and update dataset via g e t for convenience
*/
func (a *Client) SyncViaGet(params *SyncViaGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SyncViaGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncViaGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "syncViaGet",
		Method:             "GET",
		PathPattern:        "/datasets/{owner}/{id}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SyncViaGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SyncViaGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for syncViaGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateDatasetSavedQuery updates a saved query for a dataset
*/
func (a *Client) UpdateDatasetSavedQuery(params *UpdateDatasetSavedQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateDatasetSavedQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDatasetSavedQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateDatasetSavedQuery",
		Method:             "PUT",
		PathPattern:        "/datasets/{owner}/{id}/queries/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateDatasetSavedQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateDatasetSavedQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateDatasetSavedQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

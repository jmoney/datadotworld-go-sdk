// Code generated by go-swagger; DO NOT EDIT.

package datasets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// UpdateDatasetSavedQueryReader is a Reader for the UpdateDatasetSavedQuery structure.
type UpdateDatasetSavedQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateDatasetSavedQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateDatasetSavedQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateDatasetSavedQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateDatasetSavedQueryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateDatasetSavedQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateDatasetSavedQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateDatasetSavedQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateDatasetSavedQueryOK creates a UpdateDatasetSavedQueryOK with default headers values
func NewUpdateDatasetSavedQueryOK() *UpdateDatasetSavedQueryOK {
	return &UpdateDatasetSavedQueryOK{}
}

/* UpdateDatasetSavedQueryOK describes a response with status code 200, with default header values.

Successfully updated saved query.
*/
type UpdateDatasetSavedQueryOK struct {
	Payload *models.QuerySummaryResponse
}

func (o *UpdateDatasetSavedQueryOK) Error() string {
	return fmt.Sprintf("[PUT /datasets/{owner}/{id}/queries/{queryId}][%d] updateDatasetSavedQueryOK  %+v", 200, o.Payload)
}
func (o *UpdateDatasetSavedQueryOK) GetPayload() *models.QuerySummaryResponse {
	return o.Payload
}

func (o *UpdateDatasetSavedQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.QuerySummaryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDatasetSavedQueryBadRequest creates a UpdateDatasetSavedQueryBadRequest with default headers values
func NewUpdateDatasetSavedQueryBadRequest() *UpdateDatasetSavedQueryBadRequest {
	return &UpdateDatasetSavedQueryBadRequest{}
}

/* UpdateDatasetSavedQueryBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateDatasetSavedQueryBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *UpdateDatasetSavedQueryBadRequest) Error() string {
	return fmt.Sprintf("[PUT /datasets/{owner}/{id}/queries/{queryId}][%d] updateDatasetSavedQueryBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateDatasetSavedQueryBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UpdateDatasetSavedQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDatasetSavedQueryUnauthorized creates a UpdateDatasetSavedQueryUnauthorized with default headers values
func NewUpdateDatasetSavedQueryUnauthorized() *UpdateDatasetSavedQueryUnauthorized {
	return &UpdateDatasetSavedQueryUnauthorized{}
}

/* UpdateDatasetSavedQueryUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateDatasetSavedQueryUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *UpdateDatasetSavedQueryUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /datasets/{owner}/{id}/queries/{queryId}][%d] updateDatasetSavedQueryUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateDatasetSavedQueryUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UpdateDatasetSavedQueryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDatasetSavedQueryForbidden creates a UpdateDatasetSavedQueryForbidden with default headers values
func NewUpdateDatasetSavedQueryForbidden() *UpdateDatasetSavedQueryForbidden {
	return &UpdateDatasetSavedQueryForbidden{}
}

/* UpdateDatasetSavedQueryForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateDatasetSavedQueryForbidden struct {
	Payload *models.ErrorMessage
}

func (o *UpdateDatasetSavedQueryForbidden) Error() string {
	return fmt.Sprintf("[PUT /datasets/{owner}/{id}/queries/{queryId}][%d] updateDatasetSavedQueryForbidden  %+v", 403, o.Payload)
}
func (o *UpdateDatasetSavedQueryForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UpdateDatasetSavedQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDatasetSavedQueryNotFound creates a UpdateDatasetSavedQueryNotFound with default headers values
func NewUpdateDatasetSavedQueryNotFound() *UpdateDatasetSavedQueryNotFound {
	return &UpdateDatasetSavedQueryNotFound{}
}

/* UpdateDatasetSavedQueryNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateDatasetSavedQueryNotFound struct {
	Payload *models.ErrorMessage
}

func (o *UpdateDatasetSavedQueryNotFound) Error() string {
	return fmt.Sprintf("[PUT /datasets/{owner}/{id}/queries/{queryId}][%d] updateDatasetSavedQueryNotFound  %+v", 404, o.Payload)
}
func (o *UpdateDatasetSavedQueryNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UpdateDatasetSavedQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateDatasetSavedQueryInternalServerError creates a UpdateDatasetSavedQueryInternalServerError with default headers values
func NewUpdateDatasetSavedQueryInternalServerError() *UpdateDatasetSavedQueryInternalServerError {
	return &UpdateDatasetSavedQueryInternalServerError{}
}

/* UpdateDatasetSavedQueryInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateDatasetSavedQueryInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *UpdateDatasetSavedQueryInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /datasets/{owner}/{id}/queries/{queryId}][%d] updateDatasetSavedQueryInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateDatasetSavedQueryInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UpdateDatasetSavedQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

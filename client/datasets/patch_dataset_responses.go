// Code generated by go-swagger; DO NOT EDIT.

package datasets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// PatchDatasetReader is a Reader for the PatchDataset structure.
type PatchDatasetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchDatasetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchDatasetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchDatasetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchDatasetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchDatasetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchDatasetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPatchDatasetUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchDatasetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchDatasetOK creates a PatchDatasetOK with default headers values
func NewPatchDatasetOK() *PatchDatasetOK {
	return &PatchDatasetOK{}
}

/* PatchDatasetOK describes a response with status code 200, with default header values.

Dataset updated successfully.
*/
type PatchDatasetOK struct {
	Payload *models.SuccessMessage
}

func (o *PatchDatasetOK) Error() string {
	return fmt.Sprintf("[PATCH /datasets/{owner}/{id}][%d] patchDatasetOK  %+v", 200, o.Payload)
}
func (o *PatchDatasetOK) GetPayload() *models.SuccessMessage {
	return o.Payload
}

func (o *PatchDatasetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDatasetBadRequest creates a PatchDatasetBadRequest with default headers values
func NewPatchDatasetBadRequest() *PatchDatasetBadRequest {
	return &PatchDatasetBadRequest{}
}

/* PatchDatasetBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PatchDatasetBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *PatchDatasetBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /datasets/{owner}/{id}][%d] patchDatasetBadRequest  %+v", 400, o.Payload)
}
func (o *PatchDatasetBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchDatasetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDatasetUnauthorized creates a PatchDatasetUnauthorized with default headers values
func NewPatchDatasetUnauthorized() *PatchDatasetUnauthorized {
	return &PatchDatasetUnauthorized{}
}

/* PatchDatasetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PatchDatasetUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *PatchDatasetUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /datasets/{owner}/{id}][%d] patchDatasetUnauthorized  %+v", 401, o.Payload)
}
func (o *PatchDatasetUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchDatasetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDatasetForbidden creates a PatchDatasetForbidden with default headers values
func NewPatchDatasetForbidden() *PatchDatasetForbidden {
	return &PatchDatasetForbidden{}
}

/* PatchDatasetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchDatasetForbidden struct {
	Payload *models.ErrorMessage
}

func (o *PatchDatasetForbidden) Error() string {
	return fmt.Sprintf("[PATCH /datasets/{owner}/{id}][%d] patchDatasetForbidden  %+v", 403, o.Payload)
}
func (o *PatchDatasetForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchDatasetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDatasetNotFound creates a PatchDatasetNotFound with default headers values
func NewPatchDatasetNotFound() *PatchDatasetNotFound {
	return &PatchDatasetNotFound{}
}

/* PatchDatasetNotFound describes a response with status code 404, with default header values.

Not found
*/
type PatchDatasetNotFound struct {
	Payload *models.ErrorMessage
}

func (o *PatchDatasetNotFound) Error() string {
	return fmt.Sprintf("[PATCH /datasets/{owner}/{id}][%d] patchDatasetNotFound  %+v", 404, o.Payload)
}
func (o *PatchDatasetNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchDatasetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDatasetUnprocessableEntity creates a PatchDatasetUnprocessableEntity with default headers values
func NewPatchDatasetUnprocessableEntity() *PatchDatasetUnprocessableEntity {
	return &PatchDatasetUnprocessableEntity{}
}

/* PatchDatasetUnprocessableEntity describes a response with status code 422, with default header values.

Bad request
*/
type PatchDatasetUnprocessableEntity struct {
	Payload *models.ErrorMessage
}

func (o *PatchDatasetUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /datasets/{owner}/{id}][%d] patchDatasetUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *PatchDatasetUnprocessableEntity) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchDatasetUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchDatasetInternalServerError creates a PatchDatasetInternalServerError with default headers values
func NewPatchDatasetInternalServerError() *PatchDatasetInternalServerError {
	return &PatchDatasetInternalServerError{}
}

/* PatchDatasetInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type PatchDatasetInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *PatchDatasetInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /datasets/{owner}/{id}][%d] patchDatasetInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchDatasetInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchDatasetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

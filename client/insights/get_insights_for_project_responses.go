// Code generated by go-swagger; DO NOT EDIT.

package insights

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// GetInsightsForProjectReader is a Reader for the GetInsightsForProject structure.
type GetInsightsForProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInsightsForProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInsightsForProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInsightsForProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInsightsForProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInsightsForProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInsightsForProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInsightsForProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInsightsForProjectOK creates a GetInsightsForProjectOK with default headers values
func NewGetInsightsForProjectOK() *GetInsightsForProjectOK {
	return &GetInsightsForProjectOK{}
}

/* GetInsightsForProjectOK describes a response with status code 200, with default header values.

Successfully retrieved project insights
*/
type GetInsightsForProjectOK struct {
	Payload *models.PaginatedInsightResults
}

func (o *GetInsightsForProjectOK) Error() string {
	return fmt.Sprintf("[GET /insights/{projectOwner}/{projectId}][%d] getInsightsForProjectOK  %+v", 200, o.Payload)
}
func (o *GetInsightsForProjectOK) GetPayload() *models.PaginatedInsightResults {
	return o.Payload
}

func (o *GetInsightsForProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedInsightResults)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInsightsForProjectBadRequest creates a GetInsightsForProjectBadRequest with default headers values
func NewGetInsightsForProjectBadRequest() *GetInsightsForProjectBadRequest {
	return &GetInsightsForProjectBadRequest{}
}

/* GetInsightsForProjectBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetInsightsForProjectBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *GetInsightsForProjectBadRequest) Error() string {
	return fmt.Sprintf("[GET /insights/{projectOwner}/{projectId}][%d] getInsightsForProjectBadRequest  %+v", 400, o.Payload)
}
func (o *GetInsightsForProjectBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetInsightsForProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInsightsForProjectUnauthorized creates a GetInsightsForProjectUnauthorized with default headers values
func NewGetInsightsForProjectUnauthorized() *GetInsightsForProjectUnauthorized {
	return &GetInsightsForProjectUnauthorized{}
}

/* GetInsightsForProjectUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetInsightsForProjectUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *GetInsightsForProjectUnauthorized) Error() string {
	return fmt.Sprintf("[GET /insights/{projectOwner}/{projectId}][%d] getInsightsForProjectUnauthorized  %+v", 401, o.Payload)
}
func (o *GetInsightsForProjectUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetInsightsForProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInsightsForProjectForbidden creates a GetInsightsForProjectForbidden with default headers values
func NewGetInsightsForProjectForbidden() *GetInsightsForProjectForbidden {
	return &GetInsightsForProjectForbidden{}
}

/* GetInsightsForProjectForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetInsightsForProjectForbidden struct {
	Payload *models.ErrorMessage
}

func (o *GetInsightsForProjectForbidden) Error() string {
	return fmt.Sprintf("[GET /insights/{projectOwner}/{projectId}][%d] getInsightsForProjectForbidden  %+v", 403, o.Payload)
}
func (o *GetInsightsForProjectForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetInsightsForProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInsightsForProjectNotFound creates a GetInsightsForProjectNotFound with default headers values
func NewGetInsightsForProjectNotFound() *GetInsightsForProjectNotFound {
	return &GetInsightsForProjectNotFound{}
}

/* GetInsightsForProjectNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetInsightsForProjectNotFound struct {
	Payload *models.ErrorMessage
}

func (o *GetInsightsForProjectNotFound) Error() string {
	return fmt.Sprintf("[GET /insights/{projectOwner}/{projectId}][%d] getInsightsForProjectNotFound  %+v", 404, o.Payload)
}
func (o *GetInsightsForProjectNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetInsightsForProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInsightsForProjectInternalServerError creates a GetInsightsForProjectInternalServerError with default headers values
func NewGetInsightsForProjectInternalServerError() *GetInsightsForProjectInternalServerError {
	return &GetInsightsForProjectInternalServerError{}
}

/* GetInsightsForProjectInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetInsightsForProjectInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *GetInsightsForProjectInternalServerError) Error() string {
	return fmt.Sprintf("[GET /insights/{projectOwner}/{projectId}][%d] getInsightsForProjectInternalServerError  %+v", 500, o.Payload)
}
func (o *GetInsightsForProjectInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetInsightsForProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

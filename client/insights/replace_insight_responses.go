// Code generated by go-swagger; DO NOT EDIT.

package insights

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// ReplaceInsightReader is a Reader for the ReplaceInsight structure.
type ReplaceInsightReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReplaceInsightReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReplaceInsightOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewReplaceInsightBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewReplaceInsightUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReplaceInsightForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewReplaceInsightNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewReplaceInsightUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReplaceInsightInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewReplaceInsightOK creates a ReplaceInsightOK with default headers values
func NewReplaceInsightOK() *ReplaceInsightOK {
	return &ReplaceInsightOK{}
}

/* ReplaceInsightOK describes a response with status code 200, with default header values.

Insight replaced successfully.
*/
type ReplaceInsightOK struct {
	Payload *models.SuccessMessage
}

func (o *ReplaceInsightOK) Error() string {
	return fmt.Sprintf("[PUT /insights/{projectOwner}/{projectId}/{id}][%d] replaceInsightOK  %+v", 200, o.Payload)
}
func (o *ReplaceInsightOK) GetPayload() *models.SuccessMessage {
	return o.Payload
}

func (o *ReplaceInsightOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceInsightBadRequest creates a ReplaceInsightBadRequest with default headers values
func NewReplaceInsightBadRequest() *ReplaceInsightBadRequest {
	return &ReplaceInsightBadRequest{}
}

/* ReplaceInsightBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type ReplaceInsightBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *ReplaceInsightBadRequest) Error() string {
	return fmt.Sprintf("[PUT /insights/{projectOwner}/{projectId}/{id}][%d] replaceInsightBadRequest  %+v", 400, o.Payload)
}
func (o *ReplaceInsightBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *ReplaceInsightBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceInsightUnauthorized creates a ReplaceInsightUnauthorized with default headers values
func NewReplaceInsightUnauthorized() *ReplaceInsightUnauthorized {
	return &ReplaceInsightUnauthorized{}
}

/* ReplaceInsightUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ReplaceInsightUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *ReplaceInsightUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /insights/{projectOwner}/{projectId}/{id}][%d] replaceInsightUnauthorized  %+v", 401, o.Payload)
}
func (o *ReplaceInsightUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *ReplaceInsightUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceInsightForbidden creates a ReplaceInsightForbidden with default headers values
func NewReplaceInsightForbidden() *ReplaceInsightForbidden {
	return &ReplaceInsightForbidden{}
}

/* ReplaceInsightForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type ReplaceInsightForbidden struct {
	Payload *models.ErrorMessage
}

func (o *ReplaceInsightForbidden) Error() string {
	return fmt.Sprintf("[PUT /insights/{projectOwner}/{projectId}/{id}][%d] replaceInsightForbidden  %+v", 403, o.Payload)
}
func (o *ReplaceInsightForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *ReplaceInsightForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceInsightNotFound creates a ReplaceInsightNotFound with default headers values
func NewReplaceInsightNotFound() *ReplaceInsightNotFound {
	return &ReplaceInsightNotFound{}
}

/* ReplaceInsightNotFound describes a response with status code 404, with default header values.

Not found
*/
type ReplaceInsightNotFound struct {
	Payload *models.ErrorMessage
}

func (o *ReplaceInsightNotFound) Error() string {
	return fmt.Sprintf("[PUT /insights/{projectOwner}/{projectId}/{id}][%d] replaceInsightNotFound  %+v", 404, o.Payload)
}
func (o *ReplaceInsightNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *ReplaceInsightNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceInsightUnprocessableEntity creates a ReplaceInsightUnprocessableEntity with default headers values
func NewReplaceInsightUnprocessableEntity() *ReplaceInsightUnprocessableEntity {
	return &ReplaceInsightUnprocessableEntity{}
}

/* ReplaceInsightUnprocessableEntity describes a response with status code 422, with default header values.

Bad request
*/
type ReplaceInsightUnprocessableEntity struct {
	Payload *models.ErrorMessage
}

func (o *ReplaceInsightUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /insights/{projectOwner}/{projectId}/{id}][%d] replaceInsightUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *ReplaceInsightUnprocessableEntity) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *ReplaceInsightUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReplaceInsightInternalServerError creates a ReplaceInsightInternalServerError with default headers values
func NewReplaceInsightInternalServerError() *ReplaceInsightInternalServerError {
	return &ReplaceInsightInternalServerError{}
}

/* ReplaceInsightInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type ReplaceInsightInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *ReplaceInsightInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /insights/{projectOwner}/{projectId}/{id}][%d] replaceInsightInternalServerError  %+v", 500, o.Payload)
}
func (o *ReplaceInsightInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *ReplaceInsightInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

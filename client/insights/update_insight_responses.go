// Code generated by go-swagger; DO NOT EDIT.

package insights

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// UpdateInsightReader is a Reader for the UpdateInsight structure.
type UpdateInsightReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInsightReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateInsightOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInsightBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateInsightUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateInsightForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInsightNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateInsightUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateInsightInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateInsightOK creates a UpdateInsightOK with default headers values
func NewUpdateInsightOK() *UpdateInsightOK {
	return &UpdateInsightOK{}
}

/* UpdateInsightOK describes a response with status code 200, with default header values.

Insight updated successfully.
*/
type UpdateInsightOK struct {
	Payload *models.SuccessMessage
}

func (o *UpdateInsightOK) Error() string {
	return fmt.Sprintf("[PATCH /insights/{projectOwner}/{projectId}/{id}][%d] updateInsightOK  %+v", 200, o.Payload)
}
func (o *UpdateInsightOK) GetPayload() *models.SuccessMessage {
	return o.Payload
}

func (o *UpdateInsightOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInsightBadRequest creates a UpdateInsightBadRequest with default headers values
func NewUpdateInsightBadRequest() *UpdateInsightBadRequest {
	return &UpdateInsightBadRequest{}
}

/* UpdateInsightBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UpdateInsightBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *UpdateInsightBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /insights/{projectOwner}/{projectId}/{id}][%d] updateInsightBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateInsightBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UpdateInsightBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInsightUnauthorized creates a UpdateInsightUnauthorized with default headers values
func NewUpdateInsightUnauthorized() *UpdateInsightUnauthorized {
	return &UpdateInsightUnauthorized{}
}

/* UpdateInsightUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UpdateInsightUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *UpdateInsightUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /insights/{projectOwner}/{projectId}/{id}][%d] updateInsightUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateInsightUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UpdateInsightUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInsightForbidden creates a UpdateInsightForbidden with default headers values
func NewUpdateInsightForbidden() *UpdateInsightForbidden {
	return &UpdateInsightForbidden{}
}

/* UpdateInsightForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UpdateInsightForbidden struct {
	Payload *models.ErrorMessage
}

func (o *UpdateInsightForbidden) Error() string {
	return fmt.Sprintf("[PATCH /insights/{projectOwner}/{projectId}/{id}][%d] updateInsightForbidden  %+v", 403, o.Payload)
}
func (o *UpdateInsightForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UpdateInsightForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInsightNotFound creates a UpdateInsightNotFound with default headers values
func NewUpdateInsightNotFound() *UpdateInsightNotFound {
	return &UpdateInsightNotFound{}
}

/* UpdateInsightNotFound describes a response with status code 404, with default header values.

Not found
*/
type UpdateInsightNotFound struct {
	Payload *models.ErrorMessage
}

func (o *UpdateInsightNotFound) Error() string {
	return fmt.Sprintf("[PATCH /insights/{projectOwner}/{projectId}/{id}][%d] updateInsightNotFound  %+v", 404, o.Payload)
}
func (o *UpdateInsightNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UpdateInsightNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInsightUnprocessableEntity creates a UpdateInsightUnprocessableEntity with default headers values
func NewUpdateInsightUnprocessableEntity() *UpdateInsightUnprocessableEntity {
	return &UpdateInsightUnprocessableEntity{}
}

/* UpdateInsightUnprocessableEntity describes a response with status code 422, with default header values.

Bad request
*/
type UpdateInsightUnprocessableEntity struct {
	Payload *models.ErrorMessage
}

func (o *UpdateInsightUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /insights/{projectOwner}/{projectId}/{id}][%d] updateInsightUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *UpdateInsightUnprocessableEntity) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UpdateInsightUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInsightInternalServerError creates a UpdateInsightInternalServerError with default headers values
func NewUpdateInsightInternalServerError() *UpdateInsightInternalServerError {
	return &UpdateInsightInternalServerError{}
}

/* UpdateInsightInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UpdateInsightInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *UpdateInsightInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /insights/{projectOwner}/{projectId}/{id}][%d] updateInsightInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateInsightInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UpdateInsightInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

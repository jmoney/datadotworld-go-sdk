// Code generated by go-swagger; DO NOT EDIT.

package sql

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sql API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sql API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	SQLDescribe(params *SQLDescribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SQLDescribeOK, error)

	SQLGet(params *SQLGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SQLGetOK, error)

	SQLPostWithJSONRequest(params *SQLPostWithJSONRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SQLPostWithJSONRequestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  SQLDescribe describes a SQL query

  This endpoint describes what columns will be included if the given SQL query is performed against the specified dataset.
New to SQL? Check out data.world's [SQL manual](https://docs.data.world/tutorials/dwsql/) .
*/
func (a *Client) SQLDescribe(params *SQLDescribeParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SQLDescribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSQLDescribeParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sqlDescribe",
		Method:             "POST",
		PathPattern:        "/sql/{owner}/{id}/describe",
		ProducesMediaTypes: []string{"application/json", "application/json-l", "application/x-ndjson", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SQLDescribeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SQLDescribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sqlDescribe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SQLGet SQLs query via g e t

  This endpoint executes SQL queries against a dataset.
New to SQL? Check out data.world's [SQL manual](https://docs.data.world/tutorials/dwsql/) .
*/
func (a *Client) SQLGet(params *SQLGetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SQLGetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSQLGetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sqlGet",
		Method:             "GET",
		PathPattern:        "/sql/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json", "application/json-l", "application/x-ndjson", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SQLGetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SQLGetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sqlGet: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SQLPostWithJSONRequest SQLs query

  This endpoint executes SQL queries against a dataset.
New to SQL? Check out data.world's [SQL manual](https://docs.data.world/tutorials/dwsql/) .
*/
func (a *Client) SQLPostWithJSONRequest(params *SQLPostWithJSONRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SQLPostWithJSONRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSQLPostWithJSONRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "sqlPostWithJsonRequest",
		Method:             "POST",
		PathPattern:        "/sql/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json", "application/json-l", "application/x-ndjson", "text/csv"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SQLPostWithJSONRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SQLPostWithJSONRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for sqlPostWithJsonRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package sql

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// SQLGetReader is a Reader for the SQLGet structure.
type SQLGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SQLGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSQLGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSQLGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSQLGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSQLGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSQLGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSQLGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSQLGetOK creates a SQLGetOK with default headers values
func NewSQLGetOK() *SQLGetOK {
	return &SQLGetOK{}
}

/* SQLGetOK describes a response with status code 200, with default header values.

The request has succeeded.
*/
type SQLGetOK struct {
}

func (o *SQLGetOK) Error() string {
	return fmt.Sprintf("[GET /sql/{owner}/{id}][%d] sqlGetOK ", 200)
}

func (o *SQLGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSQLGetBadRequest creates a SQLGetBadRequest with default headers values
func NewSQLGetBadRequest() *SQLGetBadRequest {
	return &SQLGetBadRequest{}
}

/* SQLGetBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type SQLGetBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *SQLGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /sql/{owner}/{id}][%d] sqlGetBadRequest  %+v", 400, o.Payload)
}
func (o *SQLGetBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SQLGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSQLGetUnauthorized creates a SQLGetUnauthorized with default headers values
func NewSQLGetUnauthorized() *SQLGetUnauthorized {
	return &SQLGetUnauthorized{}
}

/* SQLGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SQLGetUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *SQLGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /sql/{owner}/{id}][%d] sqlGetUnauthorized  %+v", 401, o.Payload)
}
func (o *SQLGetUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SQLGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSQLGetForbidden creates a SQLGetForbidden with default headers values
func NewSQLGetForbidden() *SQLGetForbidden {
	return &SQLGetForbidden{}
}

/* SQLGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SQLGetForbidden struct {
	Payload *models.ErrorMessage
}

func (o *SQLGetForbidden) Error() string {
	return fmt.Sprintf("[GET /sql/{owner}/{id}][%d] sqlGetForbidden  %+v", 403, o.Payload)
}
func (o *SQLGetForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SQLGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSQLGetNotFound creates a SQLGetNotFound with default headers values
func NewSQLGetNotFound() *SQLGetNotFound {
	return &SQLGetNotFound{}
}

/* SQLGetNotFound describes a response with status code 404, with default header values.

Not found
*/
type SQLGetNotFound struct {
	Payload *models.ErrorMessage
}

func (o *SQLGetNotFound) Error() string {
	return fmt.Sprintf("[GET /sql/{owner}/{id}][%d] sqlGetNotFound  %+v", 404, o.Payload)
}
func (o *SQLGetNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SQLGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSQLGetInternalServerError creates a SQLGetInternalServerError with default headers values
func NewSQLGetInternalServerError() *SQLGetInternalServerError {
	return &SQLGetInternalServerError{}
}

/* SQLGetInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type SQLGetInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *SQLGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sql/{owner}/{id}][%d] sqlGetInternalServerError  %+v", 500, o.Payload)
}
func (o *SQLGetInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SQLGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package sql

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// NewSQLDescribeParams creates a new SQLDescribeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSQLDescribeParams() *SQLDescribeParams {
	return &SQLDescribeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSQLDescribeParamsWithTimeout creates a new SQLDescribeParams object
// with the ability to set a timeout on a request.
func NewSQLDescribeParamsWithTimeout(timeout time.Duration) *SQLDescribeParams {
	return &SQLDescribeParams{
		timeout: timeout,
	}
}

// NewSQLDescribeParamsWithContext creates a new SQLDescribeParams object
// with the ability to set a context for a request.
func NewSQLDescribeParamsWithContext(ctx context.Context) *SQLDescribeParams {
	return &SQLDescribeParams{
		Context: ctx,
	}
}

// NewSQLDescribeParamsWithHTTPClient creates a new SQLDescribeParams object
// with the ability to set a custom HTTPClient for a request.
func NewSQLDescribeParamsWithHTTPClient(client *http.Client) *SQLDescribeParams {
	return &SQLDescribeParams{
		HTTPClient: client,
	}
}

/* SQLDescribeParams contains all the parameters to send to the API endpoint
   for the sql describe operation.

   Typically these are written to a http.Request.
*/
type SQLDescribeParams struct {

	// Body.
	Body *models.SQLQueryRequest

	// Dialect.
	//
	// Default: "DW_SQL"
	Dialect *string

	// ID.
	ID string

	// Owner.
	Owner string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the sql describe params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SQLDescribeParams) WithDefaults() *SQLDescribeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the sql describe params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SQLDescribeParams) SetDefaults() {
	var (
		dialectDefault = string("DW_SQL")
	)

	val := SQLDescribeParams{
		Dialect: &dialectDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the sql describe params
func (o *SQLDescribeParams) WithTimeout(timeout time.Duration) *SQLDescribeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sql describe params
func (o *SQLDescribeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sql describe params
func (o *SQLDescribeParams) WithContext(ctx context.Context) *SQLDescribeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sql describe params
func (o *SQLDescribeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sql describe params
func (o *SQLDescribeParams) WithHTTPClient(client *http.Client) *SQLDescribeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sql describe params
func (o *SQLDescribeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the sql describe params
func (o *SQLDescribeParams) WithBody(body *models.SQLQueryRequest) *SQLDescribeParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the sql describe params
func (o *SQLDescribeParams) SetBody(body *models.SQLQueryRequest) {
	o.Body = body
}

// WithDialect adds the dialect to the sql describe params
func (o *SQLDescribeParams) WithDialect(dialect *string) *SQLDescribeParams {
	o.SetDialect(dialect)
	return o
}

// SetDialect adds the dialect to the sql describe params
func (o *SQLDescribeParams) SetDialect(dialect *string) {
	o.Dialect = dialect
}

// WithID adds the id to the sql describe params
func (o *SQLDescribeParams) WithID(id string) *SQLDescribeParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the sql describe params
func (o *SQLDescribeParams) SetID(id string) {
	o.ID = id
}

// WithOwner adds the owner to the sql describe params
func (o *SQLDescribeParams) WithOwner(owner string) *SQLDescribeParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the sql describe params
func (o *SQLDescribeParams) SetOwner(owner string) {
	o.Owner = owner
}

// WriteToRequest writes these params to a swagger request
func (o *SQLDescribeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Dialect != nil {

		// query param dialect
		var qrDialect string

		if o.Dialect != nil {
			qrDialect = *o.Dialect
		}
		qDialect := qrDialect
		if qDialect != "" {

			if err := r.SetQueryParam("dialect", qDialect); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package sql

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// SQLDescribeReader is a Reader for the SQLDescribe structure.
type SQLDescribeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SQLDescribeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSQLDescribeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSQLDescribeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSQLDescribeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSQLDescribeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSQLDescribeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSQLDescribeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSQLDescribeOK creates a SQLDescribeOK with default headers values
func NewSQLDescribeOK() *SQLDescribeOK {
	return &SQLDescribeOK{}
}

/* SQLDescribeOK describes a response with status code 200, with default header values.

The request has succeeded.
*/
type SQLDescribeOK struct {
}

func (o *SQLDescribeOK) Error() string {
	return fmt.Sprintf("[POST /sql/{owner}/{id}/describe][%d] sqlDescribeOK ", 200)
}

func (o *SQLDescribeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSQLDescribeBadRequest creates a SQLDescribeBadRequest with default headers values
func NewSQLDescribeBadRequest() *SQLDescribeBadRequest {
	return &SQLDescribeBadRequest{}
}

/* SQLDescribeBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type SQLDescribeBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *SQLDescribeBadRequest) Error() string {
	return fmt.Sprintf("[POST /sql/{owner}/{id}/describe][%d] sqlDescribeBadRequest  %+v", 400, o.Payload)
}
func (o *SQLDescribeBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SQLDescribeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSQLDescribeUnauthorized creates a SQLDescribeUnauthorized with default headers values
func NewSQLDescribeUnauthorized() *SQLDescribeUnauthorized {
	return &SQLDescribeUnauthorized{}
}

/* SQLDescribeUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SQLDescribeUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *SQLDescribeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /sql/{owner}/{id}/describe][%d] sqlDescribeUnauthorized  %+v", 401, o.Payload)
}
func (o *SQLDescribeUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SQLDescribeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSQLDescribeForbidden creates a SQLDescribeForbidden with default headers values
func NewSQLDescribeForbidden() *SQLDescribeForbidden {
	return &SQLDescribeForbidden{}
}

/* SQLDescribeForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SQLDescribeForbidden struct {
	Payload *models.ErrorMessage
}

func (o *SQLDescribeForbidden) Error() string {
	return fmt.Sprintf("[POST /sql/{owner}/{id}/describe][%d] sqlDescribeForbidden  %+v", 403, o.Payload)
}
func (o *SQLDescribeForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SQLDescribeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSQLDescribeNotFound creates a SQLDescribeNotFound with default headers values
func NewSQLDescribeNotFound() *SQLDescribeNotFound {
	return &SQLDescribeNotFound{}
}

/* SQLDescribeNotFound describes a response with status code 404, with default header values.

Not found
*/
type SQLDescribeNotFound struct {
	Payload *models.ErrorMessage
}

func (o *SQLDescribeNotFound) Error() string {
	return fmt.Sprintf("[POST /sql/{owner}/{id}/describe][%d] sqlDescribeNotFound  %+v", 404, o.Payload)
}
func (o *SQLDescribeNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SQLDescribeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSQLDescribeInternalServerError creates a SQLDescribeInternalServerError with default headers values
func NewSQLDescribeInternalServerError() *SQLDescribeInternalServerError {
	return &SQLDescribeInternalServerError{}
}

/* SQLDescribeInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type SQLDescribeInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *SQLDescribeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /sql/{owner}/{id}/describe][%d] sqlDescribeInternalServerError  %+v", 500, o.Payload)
}
func (o *SQLDescribeInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SQLDescribeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

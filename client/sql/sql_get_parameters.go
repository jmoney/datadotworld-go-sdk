// Code generated by go-swagger; DO NOT EDIT.

package sql

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSQLGetParams creates a new SQLGetParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSQLGetParams() *SQLGetParams {
	return &SQLGetParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSQLGetParamsWithTimeout creates a new SQLGetParams object
// with the ability to set a timeout on a request.
func NewSQLGetParamsWithTimeout(timeout time.Duration) *SQLGetParams {
	return &SQLGetParams{
		timeout: timeout,
	}
}

// NewSQLGetParamsWithContext creates a new SQLGetParams object
// with the ability to set a context for a request.
func NewSQLGetParamsWithContext(ctx context.Context) *SQLGetParams {
	return &SQLGetParams{
		Context: ctx,
	}
}

// NewSQLGetParamsWithHTTPClient creates a new SQLGetParams object
// with the ability to set a custom HTTPClient for a request.
func NewSQLGetParamsWithHTTPClient(client *http.Client) *SQLGetParams {
	return &SQLGetParams{
		HTTPClient: client,
	}
}

/* SQLGetParams contains all the parameters to send to the API endpoint
   for the sql get operation.

   Typically these are written to a http.Request.
*/
type SQLGetParams struct {

	// Dialect.
	//
	// Default: "DW_SQL"
	Dialect *string

	// ID.
	ID string

	// IncludeTableSchema.
	IncludeTableSchema *bool

	// Owner.
	Owner string

	// Query.
	Query *string

	/* Queryruntoken.

	   Query token to use with cancel
	*/
	Queryruntoken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the sql get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SQLGetParams) WithDefaults() *SQLGetParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the sql get params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SQLGetParams) SetDefaults() {
	var (
		dialectDefault = string("DW_SQL")

		includeTableSchemaDefault = bool(false)
	)

	val := SQLGetParams{
		Dialect:            &dialectDefault,
		IncludeTableSchema: &includeTableSchemaDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the sql get params
func (o *SQLGetParams) WithTimeout(timeout time.Duration) *SQLGetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sql get params
func (o *SQLGetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sql get params
func (o *SQLGetParams) WithContext(ctx context.Context) *SQLGetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sql get params
func (o *SQLGetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sql get params
func (o *SQLGetParams) WithHTTPClient(client *http.Client) *SQLGetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sql get params
func (o *SQLGetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDialect adds the dialect to the sql get params
func (o *SQLGetParams) WithDialect(dialect *string) *SQLGetParams {
	o.SetDialect(dialect)
	return o
}

// SetDialect adds the dialect to the sql get params
func (o *SQLGetParams) SetDialect(dialect *string) {
	o.Dialect = dialect
}

// WithID adds the id to the sql get params
func (o *SQLGetParams) WithID(id string) *SQLGetParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the sql get params
func (o *SQLGetParams) SetID(id string) {
	o.ID = id
}

// WithIncludeTableSchema adds the includeTableSchema to the sql get params
func (o *SQLGetParams) WithIncludeTableSchema(includeTableSchema *bool) *SQLGetParams {
	o.SetIncludeTableSchema(includeTableSchema)
	return o
}

// SetIncludeTableSchema adds the includeTableSchema to the sql get params
func (o *SQLGetParams) SetIncludeTableSchema(includeTableSchema *bool) {
	o.IncludeTableSchema = includeTableSchema
}

// WithOwner adds the owner to the sql get params
func (o *SQLGetParams) WithOwner(owner string) *SQLGetParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the sql get params
func (o *SQLGetParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithQuery adds the query to the sql get params
func (o *SQLGetParams) WithQuery(query *string) *SQLGetParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the sql get params
func (o *SQLGetParams) SetQuery(query *string) {
	o.Query = query
}

// WithQueryruntoken adds the queryruntoken to the sql get params
func (o *SQLGetParams) WithQueryruntoken(queryruntoken *string) *SQLGetParams {
	o.SetQueryruntoken(queryruntoken)
	return o
}

// SetQueryruntoken adds the queryruntoken to the sql get params
func (o *SQLGetParams) SetQueryruntoken(queryruntoken *string) {
	o.Queryruntoken = queryruntoken
}

// WriteToRequest writes these params to a swagger request
func (o *SQLGetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Dialect != nil {

		// query param dialect
		var qrDialect string

		if o.Dialect != nil {
			qrDialect = *o.Dialect
		}
		qDialect := qrDialect
		if qDialect != "" {

			if err := r.SetQueryParam("dialect", qDialect); err != nil {
				return err
			}
		}
	}

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IncludeTableSchema != nil {

		// query param includeTableSchema
		var qrIncludeTableSchema bool

		if o.IncludeTableSchema != nil {
			qrIncludeTableSchema = *o.IncludeTableSchema
		}
		qIncludeTableSchema := swag.FormatBool(qrIncludeTableSchema)
		if qIncludeTableSchema != "" {

			if err := r.SetQueryParam("includeTableSchema", qIncludeTableSchema); err != nil {
				return err
			}
		}
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if o.Query != nil {

		// query param query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.Queryruntoken != nil {

		// query param queryruntoken
		var qrQueryruntoken string

		if o.Queryruntoken != nil {
			qrQueryruntoken = *o.Queryruntoken
		}
		qQueryruntoken := qrQueryruntoken
		if qQueryruntoken != "" {

			if err := r.SetQueryParam("queryruntoken", qQueryruntoken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

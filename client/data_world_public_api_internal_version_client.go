// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/client/analysis"
	"datadotworld-go-sdk/client/cancel"
	"datadotworld-go-sdk/client/collections"
	"datadotworld-go-sdk/client/connections"
	"datadotworld-go-sdk/client/d_o_is"
	"datadotworld-go-sdk/client/datasets"
	"datadotworld-go-sdk/client/describe"
	"datadotworld-go-sdk/client/download"
	"datadotworld-go-sdk/client/glossary"
	"datadotworld-go-sdk/client/insights"
	"datadotworld-go-sdk/client/metadata"
	"datadotworld-go-sdk/client/partners"
	"datadotworld-go-sdk/client/projects"
	"datadotworld-go-sdk/client/properties"
	"datadotworld-go-sdk/client/queries"
	"datadotworld-go-sdk/client/relationships"
	"datadotworld-go-sdk/client/requests"
	"datadotworld-go-sdk/client/search"
	"datadotworld-go-sdk/client/serviceaccount"
	"datadotworld-go-sdk/client/sources"
	"datadotworld-go-sdk/client/sparql"
	"datadotworld-go-sdk/client/sql"
	"datadotworld-go-sdk/client/streams"
	"datadotworld-go-sdk/client/uploads"
	"datadotworld-go-sdk/client/user"
	"datadotworld-go-sdk/client/users"
)

// Default data world public API internal version HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "api.data.world"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/v0"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"https"}

// NewHTTPClient creates a new data world public API internal version HTTP client.
func NewHTTPClient(formats strfmt.Registry) *DataWorldPublicAPIInternalVersion {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new data world public API internal version HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *DataWorldPublicAPIInternalVersion {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new data world public API internal version client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *DataWorldPublicAPIInternalVersion {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(DataWorldPublicAPIInternalVersion)
	cli.Transport = transport
	cli.Analysis = analysis.New(transport, formats)
	cli.Cancel = cancel.New(transport, formats)
	cli.Collections = collections.New(transport, formats)
	cli.Connections = connections.New(transport, formats)
	cli.DoIs = d_o_is.New(transport, formats)
	cli.Datasets = datasets.New(transport, formats)
	cli.Describe = describe.New(transport, formats)
	cli.Download = download.New(transport, formats)
	cli.Glossary = glossary.New(transport, formats)
	cli.Insights = insights.New(transport, formats)
	cli.Metadata = metadata.New(transport, formats)
	cli.Partners = partners.New(transport, formats)
	cli.Projects = projects.New(transport, formats)
	cli.Properties = properties.New(transport, formats)
	cli.Queries = queries.New(transport, formats)
	cli.Relationships = relationships.New(transport, formats)
	cli.Requests = requests.New(transport, formats)
	cli.Search = search.New(transport, formats)
	cli.Serviceaccount = serviceaccount.New(transport, formats)
	cli.Sources = sources.New(transport, formats)
	cli.Sparql = sparql.New(transport, formats)
	cli.SQL = sql.New(transport, formats)
	cli.Streams = streams.New(transport, formats)
	cli.Uploads = uploads.New(transport, formats)
	cli.User = user.New(transport, formats)
	cli.Users = users.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// DataWorldPublicAPIInternalVersion is a client for data world public API internal version
type DataWorldPublicAPIInternalVersion struct {
	Analysis analysis.ClientService

	Cancel cancel.ClientService

	Collections collections.ClientService

	Connections connections.ClientService

	DoIs d_o_is.ClientService

	Datasets datasets.ClientService

	Describe describe.ClientService

	Download download.ClientService

	Glossary glossary.ClientService

	Insights insights.ClientService

	Metadata metadata.ClientService

	Partners partners.ClientService

	Projects projects.ClientService

	Properties properties.ClientService

	Queries queries.ClientService

	Relationships relationships.ClientService

	Requests requests.ClientService

	Search search.ClientService

	Serviceaccount serviceaccount.ClientService

	Sources sources.ClientService

	Sparql sparql.ClientService

	SQL sql.ClientService

	Streams streams.ClientService

	Uploads uploads.ClientService

	User user.ClientService

	Users users.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *DataWorldPublicAPIInternalVersion) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.Analysis.SetTransport(transport)
	c.Cancel.SetTransport(transport)
	c.Collections.SetTransport(transport)
	c.Connections.SetTransport(transport)
	c.DoIs.SetTransport(transport)
	c.Datasets.SetTransport(transport)
	c.Describe.SetTransport(transport)
	c.Download.SetTransport(transport)
	c.Glossary.SetTransport(transport)
	c.Insights.SetTransport(transport)
	c.Metadata.SetTransport(transport)
	c.Partners.SetTransport(transport)
	c.Projects.SetTransport(transport)
	c.Properties.SetTransport(transport)
	c.Queries.SetTransport(transport)
	c.Relationships.SetTransport(transport)
	c.Requests.SetTransport(transport)
	c.Search.SetTransport(transport)
	c.Serviceaccount.SetTransport(transport)
	c.Sources.SetTransport(transport)
	c.Sparql.SetTransport(transport)
	c.SQL.SetTransport(transport)
	c.Streams.SetTransport(transport)
	c.Uploads.SetTransport(transport)
	c.User.SetTransport(transport)
	c.Users.SetTransport(transport)
}

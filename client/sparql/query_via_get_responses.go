// Code generated by go-swagger; DO NOT EDIT.

package sparql

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// QueryViaGetReader is a Reader for the QueryViaGet structure.
type QueryViaGetReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *QueryViaGetReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewQueryViaGetOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewQueryViaGetBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewQueryViaGetUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewQueryViaGetForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewQueryViaGetNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewQueryViaGetInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewQueryViaGetOK creates a QueryViaGetOK with default headers values
func NewQueryViaGetOK() *QueryViaGetOK {
	return &QueryViaGetOK{}
}

/* QueryViaGetOK describes a response with status code 200, with default header values.

The request has succeeded.
*/
type QueryViaGetOK struct {
}

func (o *QueryViaGetOK) Error() string {
	return fmt.Sprintf("[GET /sparql/{owner}/{id}][%d] queryViaGetOK ", 200)
}

func (o *QueryViaGetOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewQueryViaGetBadRequest creates a QueryViaGetBadRequest with default headers values
func NewQueryViaGetBadRequest() *QueryViaGetBadRequest {
	return &QueryViaGetBadRequest{}
}

/* QueryViaGetBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type QueryViaGetBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *QueryViaGetBadRequest) Error() string {
	return fmt.Sprintf("[GET /sparql/{owner}/{id}][%d] queryViaGetBadRequest  %+v", 400, o.Payload)
}
func (o *QueryViaGetBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *QueryViaGetBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryViaGetUnauthorized creates a QueryViaGetUnauthorized with default headers values
func NewQueryViaGetUnauthorized() *QueryViaGetUnauthorized {
	return &QueryViaGetUnauthorized{}
}

/* QueryViaGetUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type QueryViaGetUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *QueryViaGetUnauthorized) Error() string {
	return fmt.Sprintf("[GET /sparql/{owner}/{id}][%d] queryViaGetUnauthorized  %+v", 401, o.Payload)
}
func (o *QueryViaGetUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *QueryViaGetUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryViaGetForbidden creates a QueryViaGetForbidden with default headers values
func NewQueryViaGetForbidden() *QueryViaGetForbidden {
	return &QueryViaGetForbidden{}
}

/* QueryViaGetForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type QueryViaGetForbidden struct {
	Payload *models.ErrorMessage
}

func (o *QueryViaGetForbidden) Error() string {
	return fmt.Sprintf("[GET /sparql/{owner}/{id}][%d] queryViaGetForbidden  %+v", 403, o.Payload)
}
func (o *QueryViaGetForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *QueryViaGetForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryViaGetNotFound creates a QueryViaGetNotFound with default headers values
func NewQueryViaGetNotFound() *QueryViaGetNotFound {
	return &QueryViaGetNotFound{}
}

/* QueryViaGetNotFound describes a response with status code 404, with default header values.

Not found
*/
type QueryViaGetNotFound struct {
	Payload *models.ErrorMessage
}

func (o *QueryViaGetNotFound) Error() string {
	return fmt.Sprintf("[GET /sparql/{owner}/{id}][%d] queryViaGetNotFound  %+v", 404, o.Payload)
}
func (o *QueryViaGetNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *QueryViaGetNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewQueryViaGetInternalServerError creates a QueryViaGetInternalServerError with default headers values
func NewQueryViaGetInternalServerError() *QueryViaGetInternalServerError {
	return &QueryViaGetInternalServerError{}
}

/* QueryViaGetInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type QueryViaGetInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *QueryViaGetInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sparql/{owner}/{id}][%d] queryViaGetInternalServerError  %+v", 500, o.Payload)
}
func (o *QueryViaGetInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *QueryViaGetInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

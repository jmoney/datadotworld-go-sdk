// Code generated by go-swagger; DO NOT EDIT.

package sparql

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewQueryViaURLEncodedPostParams creates a new QueryViaURLEncodedPostParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewQueryViaURLEncodedPostParams() *QueryViaURLEncodedPostParams {
	return &QueryViaURLEncodedPostParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewQueryViaURLEncodedPostParamsWithTimeout creates a new QueryViaURLEncodedPostParams object
// with the ability to set a timeout on a request.
func NewQueryViaURLEncodedPostParamsWithTimeout(timeout time.Duration) *QueryViaURLEncodedPostParams {
	return &QueryViaURLEncodedPostParams{
		timeout: timeout,
	}
}

// NewQueryViaURLEncodedPostParamsWithContext creates a new QueryViaURLEncodedPostParams object
// with the ability to set a context for a request.
func NewQueryViaURLEncodedPostParamsWithContext(ctx context.Context) *QueryViaURLEncodedPostParams {
	return &QueryViaURLEncodedPostParams{
		Context: ctx,
	}
}

// NewQueryViaURLEncodedPostParamsWithHTTPClient creates a new QueryViaURLEncodedPostParams object
// with the ability to set a custom HTTPClient for a request.
func NewQueryViaURLEncodedPostParamsWithHTTPClient(client *http.Client) *QueryViaURLEncodedPostParams {
	return &QueryViaURLEncodedPostParams{
		HTTPClient: client,
	}
}

/* QueryViaURLEncodedPostParams contains all the parameters to send to the API endpoint
   for the query via Url encoded post operation.

   Typically these are written to a http.Request.
*/
type QueryViaURLEncodedPostParams struct {

	// ID.
	ID string

	// Owner.
	Owner string

	// Query.
	Query *string

	/* Queryruntoken.

	   Query token to use with cancel
	*/
	Queryruntoken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the query via Url encoded post params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryViaURLEncodedPostParams) WithDefaults() *QueryViaURLEncodedPostParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the query via Url encoded post params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *QueryViaURLEncodedPostParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) WithTimeout(timeout time.Duration) *QueryViaURLEncodedPostParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) WithContext(ctx context.Context) *QueryViaURLEncodedPostParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) WithHTTPClient(client *http.Client) *QueryViaURLEncodedPostParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) WithID(id string) *QueryViaURLEncodedPostParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) SetID(id string) {
	o.ID = id
}

// WithOwner adds the owner to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) WithOwner(owner string) *QueryViaURLEncodedPostParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithQuery adds the query to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) WithQuery(query *string) *QueryViaURLEncodedPostParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) SetQuery(query *string) {
	o.Query = query
}

// WithQueryruntoken adds the queryruntoken to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) WithQueryruntoken(queryruntoken *string) *QueryViaURLEncodedPostParams {
	o.SetQueryruntoken(queryruntoken)
	return o
}

// SetQueryruntoken adds the queryruntoken to the query via Url encoded post params
func (o *QueryViaURLEncodedPostParams) SetQueryruntoken(queryruntoken *string) {
	o.Queryruntoken = queryruntoken
}

// WriteToRequest writes these params to a swagger request
func (o *QueryViaURLEncodedPostParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	if o.Query != nil {

		// form param query
		var frQuery string
		if o.Query != nil {
			frQuery = *o.Query
		}
		fQuery := frQuery
		if fQuery != "" {
			if err := r.SetFormParam("query", fQuery); err != nil {
				return err
			}
		}
	}

	if o.Queryruntoken != nil {

		// query param queryruntoken
		var qrQueryruntoken string

		if o.Queryruntoken != nil {
			qrQueryruntoken = *o.Queryruntoken
		}
		qQueryruntoken := qrQueryruntoken
		if qQueryruntoken != "" {

			if err := r.SetQueryParam("queryruntoken", qQueryruntoken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

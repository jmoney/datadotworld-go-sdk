// Code generated by go-swagger; DO NOT EDIT.

package sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// DeleteCatalogColumnReader is a Reader for the DeleteCatalogColumn structure.
type DeleteCatalogColumnReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCatalogColumnReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteCatalogColumnOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteCatalogColumnBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteCatalogColumnUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteCatalogColumnForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteCatalogColumnNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteCatalogColumnInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteCatalogColumnOK creates a DeleteCatalogColumnOK with default headers values
func NewDeleteCatalogColumnOK() *DeleteCatalogColumnOK {
	return &DeleteCatalogColumnOK{}
}

/* DeleteCatalogColumnOK describes a response with status code 200, with default header values.

Column has been successfully deleted.
*/
type DeleteCatalogColumnOK struct {
	Payload *models.SuccessMessage
}

func (o *DeleteCatalogColumnOK) Error() string {
	return fmt.Sprintf("[DELETE /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}][%d] deleteCatalogColumnOK  %+v", 200, o.Payload)
}
func (o *DeleteCatalogColumnOK) GetPayload() *models.SuccessMessage {
	return o.Payload
}

func (o *DeleteCatalogColumnOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCatalogColumnBadRequest creates a DeleteCatalogColumnBadRequest with default headers values
func NewDeleteCatalogColumnBadRequest() *DeleteCatalogColumnBadRequest {
	return &DeleteCatalogColumnBadRequest{}
}

/* DeleteCatalogColumnBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteCatalogColumnBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *DeleteCatalogColumnBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}][%d] deleteCatalogColumnBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteCatalogColumnBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteCatalogColumnBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCatalogColumnUnauthorized creates a DeleteCatalogColumnUnauthorized with default headers values
func NewDeleteCatalogColumnUnauthorized() *DeleteCatalogColumnUnauthorized {
	return &DeleteCatalogColumnUnauthorized{}
}

/* DeleteCatalogColumnUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteCatalogColumnUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *DeleteCatalogColumnUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}][%d] deleteCatalogColumnUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteCatalogColumnUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteCatalogColumnUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCatalogColumnForbidden creates a DeleteCatalogColumnForbidden with default headers values
func NewDeleteCatalogColumnForbidden() *DeleteCatalogColumnForbidden {
	return &DeleteCatalogColumnForbidden{}
}

/* DeleteCatalogColumnForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteCatalogColumnForbidden struct {
	Payload *models.ErrorMessage
}

func (o *DeleteCatalogColumnForbidden) Error() string {
	return fmt.Sprintf("[DELETE /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}][%d] deleteCatalogColumnForbidden  %+v", 403, o.Payload)
}
func (o *DeleteCatalogColumnForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteCatalogColumnForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCatalogColumnNotFound creates a DeleteCatalogColumnNotFound with default headers values
func NewDeleteCatalogColumnNotFound() *DeleteCatalogColumnNotFound {
	return &DeleteCatalogColumnNotFound{}
}

/* DeleteCatalogColumnNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteCatalogColumnNotFound struct {
	Payload *models.ErrorMessage
}

func (o *DeleteCatalogColumnNotFound) Error() string {
	return fmt.Sprintf("[DELETE /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}][%d] deleteCatalogColumnNotFound  %+v", 404, o.Payload)
}
func (o *DeleteCatalogColumnNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteCatalogColumnNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCatalogColumnInternalServerError creates a DeleteCatalogColumnInternalServerError with default headers values
func NewDeleteCatalogColumnInternalServerError() *DeleteCatalogColumnInternalServerError {
	return &DeleteCatalogColumnInternalServerError{}
}

/* DeleteCatalogColumnInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type DeleteCatalogColumnInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *DeleteCatalogColumnInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}][%d] deleteCatalogColumnInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteCatalogColumnInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteCatalogColumnInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// NewReplaceCatalogTableParams creates a new ReplaceCatalogTableParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewReplaceCatalogTableParams() *ReplaceCatalogTableParams {
	return &ReplaceCatalogTableParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewReplaceCatalogTableParamsWithTimeout creates a new ReplaceCatalogTableParams object
// with the ability to set a timeout on a request.
func NewReplaceCatalogTableParamsWithTimeout(timeout time.Duration) *ReplaceCatalogTableParams {
	return &ReplaceCatalogTableParams{
		timeout: timeout,
	}
}

// NewReplaceCatalogTableParamsWithContext creates a new ReplaceCatalogTableParams object
// with the ability to set a context for a request.
func NewReplaceCatalogTableParamsWithContext(ctx context.Context) *ReplaceCatalogTableParams {
	return &ReplaceCatalogTableParams{
		Context: ctx,
	}
}

// NewReplaceCatalogTableParamsWithHTTPClient creates a new ReplaceCatalogTableParams object
// with the ability to set a custom HTTPClient for a request.
func NewReplaceCatalogTableParamsWithHTTPClient(client *http.Client) *ReplaceCatalogTableParams {
	return &ReplaceCatalogTableParams{
		HTTPClient: client,
	}
}

/* ReplaceCatalogTableParams contains all the parameters to send to the API endpoint
   for the replace catalog table operation.

   Typically these are written to a http.Request.
*/
type ReplaceCatalogTableParams struct {

	// Body.
	Body *models.CatalogTableRequest

	/* Owner.

	   id of the user or organization
	*/
	Owner string

	/* Sourceid.

	   database source id
	*/
	Sourceid string

	// Tableid.
	Tableid string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the replace catalog table params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReplaceCatalogTableParams) WithDefaults() *ReplaceCatalogTableParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the replace catalog table params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ReplaceCatalogTableParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the replace catalog table params
func (o *ReplaceCatalogTableParams) WithTimeout(timeout time.Duration) *ReplaceCatalogTableParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the replace catalog table params
func (o *ReplaceCatalogTableParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the replace catalog table params
func (o *ReplaceCatalogTableParams) WithContext(ctx context.Context) *ReplaceCatalogTableParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the replace catalog table params
func (o *ReplaceCatalogTableParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the replace catalog table params
func (o *ReplaceCatalogTableParams) WithHTTPClient(client *http.Client) *ReplaceCatalogTableParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the replace catalog table params
func (o *ReplaceCatalogTableParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the replace catalog table params
func (o *ReplaceCatalogTableParams) WithBody(body *models.CatalogTableRequest) *ReplaceCatalogTableParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the replace catalog table params
func (o *ReplaceCatalogTableParams) SetBody(body *models.CatalogTableRequest) {
	o.Body = body
}

// WithOwner adds the owner to the replace catalog table params
func (o *ReplaceCatalogTableParams) WithOwner(owner string) *ReplaceCatalogTableParams {
	o.SetOwner(owner)
	return o
}

// SetOwner adds the owner to the replace catalog table params
func (o *ReplaceCatalogTableParams) SetOwner(owner string) {
	o.Owner = owner
}

// WithSourceid adds the sourceid to the replace catalog table params
func (o *ReplaceCatalogTableParams) WithSourceid(sourceid string) *ReplaceCatalogTableParams {
	o.SetSourceid(sourceid)
	return o
}

// SetSourceid adds the sourceid to the replace catalog table params
func (o *ReplaceCatalogTableParams) SetSourceid(sourceid string) {
	o.Sourceid = sourceid
}

// WithTableid adds the tableid to the replace catalog table params
func (o *ReplaceCatalogTableParams) WithTableid(tableid string) *ReplaceCatalogTableParams {
	o.SetTableid(tableid)
	return o
}

// SetTableid adds the tableid to the replace catalog table params
func (o *ReplaceCatalogTableParams) SetTableid(tableid string) {
	o.Tableid = tableid
}

// WriteToRequest writes these params to a swagger request
func (o *ReplaceCatalogTableParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param owner
	if err := r.SetPathParam("owner", o.Owner); err != nil {
		return err
	}

	// path param sourceid
	if err := r.SetPathParam("sourceid", o.Sourceid); err != nil {
		return err
	}

	// path param tableid
	if err := r.SetPathParam("tableid", o.Tableid); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

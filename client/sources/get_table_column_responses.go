// Code generated by go-swagger; DO NOT EDIT.

package sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// GetTableColumnReader is a Reader for the GetTableColumn structure.
type GetTableColumnReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTableColumnReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTableColumnOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTableColumnBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTableColumnNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTableColumnOK creates a GetTableColumnOK with default headers values
func NewGetTableColumnOK() *GetTableColumnOK {
	return &GetTableColumnOK{}
}

/* GetTableColumnOK describes a response with status code 200, with default header values.

successful operation
*/
type GetTableColumnOK struct {
	Payload *models.MetadataResourceDto
}

func (o *GetTableColumnOK) Error() string {
	return fmt.Sprintf("[GET /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}][%d] getTableColumnOK  %+v", 200, o.Payload)
}
func (o *GetTableColumnOK) GetPayload() *models.MetadataResourceDto {
	return o.Payload
}

func (o *GetTableColumnOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MetadataResourceDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTableColumnBadRequest creates a GetTableColumnBadRequest with default headers values
func NewGetTableColumnBadRequest() *GetTableColumnBadRequest {
	return &GetTableColumnBadRequest{}
}

/* GetTableColumnBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetTableColumnBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *GetTableColumnBadRequest) Error() string {
	return fmt.Sprintf("[GET /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}][%d] getTableColumnBadRequest  %+v", 400, o.Payload)
}
func (o *GetTableColumnBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetTableColumnBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTableColumnNotFound creates a GetTableColumnNotFound with default headers values
func NewGetTableColumnNotFound() *GetTableColumnNotFound {
	return &GetTableColumnNotFound{}
}

/* GetTableColumnNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetTableColumnNotFound struct {
	Payload *models.ErrorMessage
}

func (o *GetTableColumnNotFound) Error() string {
	return fmt.Sprintf("[GET /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}][%d] getTableColumnNotFound  %+v", 404, o.Payload)
}
func (o *GetTableColumnNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetTableColumnNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// PatchCatalogTableReader is a Reader for the PatchCatalogTable structure.
type PatchCatalogTableReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchCatalogTableReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchCatalogTableOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchCatalogTableBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchCatalogTableUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchCatalogTableForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchCatalogTableNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPatchCatalogTableUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchCatalogTableInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchCatalogTableOK creates a PatchCatalogTableOK with default headers values
func NewPatchCatalogTableOK() *PatchCatalogTableOK {
	return &PatchCatalogTableOK{}
}

/* PatchCatalogTableOK describes a response with status code 200, with default header values.

Table updated successfully.
*/
type PatchCatalogTableOK struct {
	Payload *models.SuccessMessage
}

func (o *PatchCatalogTableOK) Error() string {
	return fmt.Sprintf("[PATCH /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}][%d] patchCatalogTableOK  %+v", 200, o.Payload)
}
func (o *PatchCatalogTableOK) GetPayload() *models.SuccessMessage {
	return o.Payload
}

func (o *PatchCatalogTableOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCatalogTableBadRequest creates a PatchCatalogTableBadRequest with default headers values
func NewPatchCatalogTableBadRequest() *PatchCatalogTableBadRequest {
	return &PatchCatalogTableBadRequest{}
}

/* PatchCatalogTableBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PatchCatalogTableBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *PatchCatalogTableBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}][%d] patchCatalogTableBadRequest  %+v", 400, o.Payload)
}
func (o *PatchCatalogTableBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchCatalogTableBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCatalogTableUnauthorized creates a PatchCatalogTableUnauthorized with default headers values
func NewPatchCatalogTableUnauthorized() *PatchCatalogTableUnauthorized {
	return &PatchCatalogTableUnauthorized{}
}

/* PatchCatalogTableUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PatchCatalogTableUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *PatchCatalogTableUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}][%d] patchCatalogTableUnauthorized  %+v", 401, o.Payload)
}
func (o *PatchCatalogTableUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchCatalogTableUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCatalogTableForbidden creates a PatchCatalogTableForbidden with default headers values
func NewPatchCatalogTableForbidden() *PatchCatalogTableForbidden {
	return &PatchCatalogTableForbidden{}
}

/* PatchCatalogTableForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchCatalogTableForbidden struct {
	Payload *models.ErrorMessage
}

func (o *PatchCatalogTableForbidden) Error() string {
	return fmt.Sprintf("[PATCH /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}][%d] patchCatalogTableForbidden  %+v", 403, o.Payload)
}
func (o *PatchCatalogTableForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchCatalogTableForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCatalogTableNotFound creates a PatchCatalogTableNotFound with default headers values
func NewPatchCatalogTableNotFound() *PatchCatalogTableNotFound {
	return &PatchCatalogTableNotFound{}
}

/* PatchCatalogTableNotFound describes a response with status code 404, with default header values.

Not found
*/
type PatchCatalogTableNotFound struct {
	Payload *models.ErrorMessage
}

func (o *PatchCatalogTableNotFound) Error() string {
	return fmt.Sprintf("[PATCH /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}][%d] patchCatalogTableNotFound  %+v", 404, o.Payload)
}
func (o *PatchCatalogTableNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchCatalogTableNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCatalogTableUnprocessableEntity creates a PatchCatalogTableUnprocessableEntity with default headers values
func NewPatchCatalogTableUnprocessableEntity() *PatchCatalogTableUnprocessableEntity {
	return &PatchCatalogTableUnprocessableEntity{}
}

/* PatchCatalogTableUnprocessableEntity describes a response with status code 422, with default header values.

Bad request
*/
type PatchCatalogTableUnprocessableEntity struct {
	Payload *models.ErrorMessage
}

func (o *PatchCatalogTableUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}][%d] patchCatalogTableUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *PatchCatalogTableUnprocessableEntity) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchCatalogTableUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCatalogTableInternalServerError creates a PatchCatalogTableInternalServerError with default headers values
func NewPatchCatalogTableInternalServerError() *PatchCatalogTableInternalServerError {
	return &PatchCatalogTableInternalServerError{}
}

/* PatchCatalogTableInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type PatchCatalogTableInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *PatchCatalogTableInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /metadata/data/sources/{owner}/{sourceid}/tables/{tableid}][%d] patchCatalogTableInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchCatalogTableInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchCatalogTableInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

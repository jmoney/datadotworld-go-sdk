// Code generated by go-swagger; DO NOT EDIT.

package sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new sources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCatalogColumn(params *CreateCatalogColumnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCatalogColumnOK, error)

	CreateCatalogTable(params *CreateCatalogTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCatalogTableOK, error)

	DeleteCatalogColumn(params *DeleteCatalogColumnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCatalogColumnOK, error)

	DeleteCatalogTable(params *DeleteCatalogTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCatalogTableOK, error)

	GetDatabase(params *GetDatabaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatabaseOK, error)

	GetDatabases(params *GetDatabasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatabasesOK, error)

	GetTable(params *GetTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableOK, error)

	GetTableColumn(params *GetTableColumnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableColumnOK, error)

	GetTableColumns(params *GetTableColumnsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableColumnsOK, error)

	GetTables(params *GetTablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTablesOK, error)

	PatchCatalogColumn(params *PatchCatalogColumnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchCatalogColumnOK, error)

	PatchCatalogTable(params *PatchCatalogTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchCatalogTableOK, error)

	ReplaceCatalogColumn(params *ReplaceCatalogColumnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceCatalogColumnOK, error)

	ReplaceCatalogTable(params *ReplaceCatalogTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceCatalogTableOK, error)

	SuggestCatalogTable(params *SuggestCatalogTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SuggestCatalogTableOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCatalogColumn creates a column
*/
func (a *Client) CreateCatalogColumn(params *CreateCatalogColumnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCatalogColumnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCatalogColumnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCatalogColumn",
		Method:             "POST",
		PathPattern:        "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCatalogColumnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCatalogColumnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCatalogColumn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateCatalogTable creates a new table metadata
*/
func (a *Client) CreateCatalogTable(params *CreateCatalogTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCatalogTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCatalogTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCatalogTable",
		Method:             "POST",
		PathPattern:        "/metadata/data/sources/{owner}/{sourceid}/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCatalogTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCatalogTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCatalogTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCatalogColumn deletes a column
*/
func (a *Client) DeleteCatalogColumn(params *DeleteCatalogColumnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCatalogColumnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogColumnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCatalogColumn",
		Method:             "DELETE",
		PathPattern:        "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCatalogColumnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCatalogColumnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCatalogColumn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCatalogTable deletes a table
*/
func (a *Client) DeleteCatalogTable(params *DeleteCatalogTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCatalogTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCatalogTable",
		Method:             "DELETE",
		PathPattern:        "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCatalogTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCatalogTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCatalogTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDatabase gets an individual datasource metadata
*/
func (a *Client) GetDatabase(params *GetDatabaseParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabaseParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatabase",
		Method:             "GET",
		PathPattern:        "/metadata/data/sources/{owner}/{sourceid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabaseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabaseOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatabase: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetDatabases gets datasources by owner
*/
func (a *Client) GetDatabases(params *GetDatabasesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDatabasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabasesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDatabases",
		Method:             "GET",
		PathPattern:        "/metadata/data/sources/{owner}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDatabasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDatabasesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDatabases: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTable gets an individual table metadata
*/
func (a *Client) GetTable(params *GetTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTable",
		Method:             "GET",
		PathPattern:        "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTableColumn gets an individual column metadata
*/
func (a *Client) GetTableColumn(params *GetTableColumnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableColumnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableColumnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTableColumn",
		Method:             "GET",
		PathPattern:        "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTableColumnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableColumnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableColumn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTableColumns gets columns for a given table
*/
func (a *Client) GetTableColumns(params *GetTableColumnsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableColumnsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableColumnsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTableColumns",
		Method:             "GET",
		PathPattern:        "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTableColumnsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableColumnsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableColumns: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTables gets tables for a data source
*/
func (a *Client) GetTables(params *GetTablesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTablesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTables",
		Method:             "GET",
		PathPattern:        "/metadata/data/sources/{owner}/{sourceid}/tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTablesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTablesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTables: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCatalogColumn updates an existing column
*/
func (a *Client) PatchCatalogColumn(params *PatchCatalogColumnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchCatalogColumnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCatalogColumnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchCatalogColumn",
		Method:             "PATCH",
		PathPattern:        "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCatalogColumnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCatalogColumnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCatalogColumn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCatalogTable updates an existing table
*/
func (a *Client) PatchCatalogTable(params *PatchCatalogTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchCatalogTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCatalogTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchCatalogTable",
		Method:             "PATCH",
		PathPattern:        "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCatalogTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCatalogTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCatalogTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCatalogColumn replaces an existing column
*/
func (a *Client) ReplaceCatalogColumn(params *ReplaceCatalogColumnParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceCatalogColumnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCatalogColumnParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceCatalogColumn",
		Method:             "PUT",
		PathPattern:        "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}/columns/{columnid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceCatalogColumnReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceCatalogColumnOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceCatalogColumn: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCatalogTable replaces an existing table
*/
func (a *Client) ReplaceCatalogTable(params *ReplaceCatalogTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceCatalogTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCatalogTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceCatalogTable",
		Method:             "PUT",
		PathPattern:        "/metadata/data/sources/{owner}/{sourceid}/tables/{tableid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceCatalogTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceCatalogTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceCatalogTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SuggestCatalogTable suggests for an existing table
*/
func (a *Client) SuggestCatalogTable(params *SuggestCatalogTableParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SuggestCatalogTableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuggestCatalogTableParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "suggestCatalogTable",
		Method:             "PATCH",
		PathPattern:        "/metadata/data/sources/suggest/{owner}/{sourceid}/tables/{tableid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SuggestCatalogTableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuggestCatalogTableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for suggestCatalogTable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

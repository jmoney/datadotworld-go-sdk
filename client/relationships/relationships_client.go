// Code generated by go-swagger; DO NOT EDIT.

package relationships

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new relationships API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for relationships API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateRelationship(params *CreateRelationshipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRelationshipOK, error)

	DeleteRelationship(params *DeleteRelationshipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRelationshipOK, error)

	GetRelationships(params *GetRelationshipsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRelationshipsOK, error)

	GetTableRelationships(params *GetTableRelationshipsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableRelationshipsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateRelationship creates a relationship between two catalog resources
*/
func (a *Client) CreateRelationship(params *CreateRelationshipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateRelationshipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRelationshipParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createRelationship",
		Method:             "POST",
		PathPattern:        "/metadata/relationships/{owner}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRelationshipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateRelationshipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createRelationship: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRelationship deletes a relationship between two catalog resources
*/
func (a *Client) DeleteRelationship(params *DeleteRelationshipParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRelationshipOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRelationshipParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRelationship",
		Method:             "POST",
		PathPattern:        "/metadata/relationships/{owner}/delete",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRelationshipReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRelationshipOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRelationship: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRelationships gets resources that are related to a resource
*/
func (a *Client) GetRelationships(params *GetRelationshipsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRelationshipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRelationshipsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRelationships",
		Method:             "POST",
		PathPattern:        "/metadata/relationships/{owner}/resource/{resourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRelationshipsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRelationshipsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRelationships: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetTableRelationships gets resources that are related to a table
*/
func (a *Client) GetTableRelationships(params *GetTableRelationshipsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTableRelationshipsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTableRelationshipsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTableRelationships",
		Method:             "POST",
		PathPattern:        "/metadata/relationships/{owner}/table/{sourceId}/{tableId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTableRelationshipsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTableRelationshipsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTableRelationships: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package queries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new queries API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for queries API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ExecuteQuery(params *ExecuteQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExecuteQueryOK, error)

	ExecuteQueryWithPost(params *ExecuteQueryWithPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExecuteQueryWithPostOK, error)

	GetQuery(params *GetQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueryOK, error)

	GetQueryVersion(params *GetQueryVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueryVersionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  ExecuteQuery executes a query
*/
func (a *Client) ExecuteQuery(params *ExecuteQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExecuteQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "executeQuery",
		Method:             "GET",
		PathPattern:        "/queries/{id}/results",
		ProducesMediaTypes: []string{"application/json", "application/json-l", "application/rdf+json", "application/rdf+xml", "application/sparql-results+json", "application/sparql-results+xml", "application/trig", "application/x-ndjson", "text/csv", "text/tab-separated-values", "text/turtle"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for executeQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ExecuteQueryWithPost executes a query
*/
func (a *Client) ExecuteQueryWithPost(params *ExecuteQueryWithPostParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ExecuteQueryWithPostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewExecuteQueryWithPostParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "executeQueryWithPost",
		Method:             "POST",
		PathPattern:        "/queries/{id}/results",
		ProducesMediaTypes: []string{"application/json", "application/json-l", "application/rdf+json", "application/rdf+xml", "application/sparql-results+json", "application/sparql-results+xml", "application/trig", "application/x-ndjson", "text/csv", "text/tab-separated-values", "text/turtle"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ExecuteQueryWithPostReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ExecuteQueryWithPostOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for executeQueryWithPost: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetQuery retrieves a query definition
*/
func (a *Client) GetQuery(params *GetQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getQuery",
		Method:             "GET",
		PathPattern:        "/queries/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetQueryVersion retrieves a versioned query definition
*/
func (a *Client) GetQueryVersion(params *GetQueryVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetQueryVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQueryVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getQueryVersion",
		Method:             "GET",
		PathPattern:        "/queries/{id}/v/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQueryVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetQueryVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getQueryVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

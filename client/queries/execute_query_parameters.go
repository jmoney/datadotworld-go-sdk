// Code generated by go-swagger; DO NOT EDIT.

package queries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewExecuteQueryParams creates a new ExecuteQueryParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewExecuteQueryParams() *ExecuteQueryParams {
	return &ExecuteQueryParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewExecuteQueryParamsWithTimeout creates a new ExecuteQueryParams object
// with the ability to set a timeout on a request.
func NewExecuteQueryParamsWithTimeout(timeout time.Duration) *ExecuteQueryParams {
	return &ExecuteQueryParams{
		timeout: timeout,
	}
}

// NewExecuteQueryParamsWithContext creates a new ExecuteQueryParams object
// with the ability to set a context for a request.
func NewExecuteQueryParamsWithContext(ctx context.Context) *ExecuteQueryParams {
	return &ExecuteQueryParams{
		Context: ctx,
	}
}

// NewExecuteQueryParamsWithHTTPClient creates a new ExecuteQueryParams object
// with the ability to set a custom HTTPClient for a request.
func NewExecuteQueryParamsWithHTTPClient(client *http.Client) *ExecuteQueryParams {
	return &ExecuteQueryParams{
		HTTPClient: client,
	}
}

/* ExecuteQueryParams contains all the parameters to send to the API endpoint
   for the execute query operation.

   Typically these are written to a http.Request.
*/
type ExecuteQueryParams struct {

	// ID.
	ID string

	// IncludeTableSchema.
	IncludeTableSchema *bool

	/* Queryruntoken.

	   Query token to use with cancel
	*/
	Queryruntoken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the execute query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExecuteQueryParams) WithDefaults() *ExecuteQueryParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the execute query params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ExecuteQueryParams) SetDefaults() {
	var (
		includeTableSchemaDefault = bool(false)
	)

	val := ExecuteQueryParams{
		IncludeTableSchema: &includeTableSchemaDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the execute query params
func (o *ExecuteQueryParams) WithTimeout(timeout time.Duration) *ExecuteQueryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the execute query params
func (o *ExecuteQueryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the execute query params
func (o *ExecuteQueryParams) WithContext(ctx context.Context) *ExecuteQueryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the execute query params
func (o *ExecuteQueryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the execute query params
func (o *ExecuteQueryParams) WithHTTPClient(client *http.Client) *ExecuteQueryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the execute query params
func (o *ExecuteQueryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the execute query params
func (o *ExecuteQueryParams) WithID(id string) *ExecuteQueryParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the execute query params
func (o *ExecuteQueryParams) SetID(id string) {
	o.ID = id
}

// WithIncludeTableSchema adds the includeTableSchema to the execute query params
func (o *ExecuteQueryParams) WithIncludeTableSchema(includeTableSchema *bool) *ExecuteQueryParams {
	o.SetIncludeTableSchema(includeTableSchema)
	return o
}

// SetIncludeTableSchema adds the includeTableSchema to the execute query params
func (o *ExecuteQueryParams) SetIncludeTableSchema(includeTableSchema *bool) {
	o.IncludeTableSchema = includeTableSchema
}

// WithQueryruntoken adds the queryruntoken to the execute query params
func (o *ExecuteQueryParams) WithQueryruntoken(queryruntoken *string) *ExecuteQueryParams {
	o.SetQueryruntoken(queryruntoken)
	return o
}

// SetQueryruntoken adds the queryruntoken to the execute query params
func (o *ExecuteQueryParams) SetQueryruntoken(queryruntoken *string) {
	o.Queryruntoken = queryruntoken
}

// WriteToRequest writes these params to a swagger request
func (o *ExecuteQueryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param id
	if err := r.SetPathParam("id", o.ID); err != nil {
		return err
	}

	if o.IncludeTableSchema != nil {

		// query param includeTableSchema
		var qrIncludeTableSchema bool

		if o.IncludeTableSchema != nil {
			qrIncludeTableSchema = *o.IncludeTableSchema
		}
		qIncludeTableSchema := swag.FormatBool(qrIncludeTableSchema)
		if qIncludeTableSchema != "" {

			if err := r.SetQueryParam("includeTableSchema", qIncludeTableSchema); err != nil {
				return err
			}
		}
	}

	if o.Queryruntoken != nil {

		// query param queryruntoken
		var qrQueryruntoken string

		if o.Queryruntoken != nil {
			qrQueryruntoken = *o.Queryruntoken
		}
		qQueryruntoken := qrQueryruntoken
		if qQueryruntoken != "" {

			if err := r.SetQueryParam("queryruntoken", qQueryruntoken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

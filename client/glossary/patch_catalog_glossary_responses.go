// Code generated by go-swagger; DO NOT EDIT.

package glossary

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// PatchCatalogGlossaryReader is a Reader for the PatchCatalogGlossary structure.
type PatchCatalogGlossaryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchCatalogGlossaryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchCatalogGlossaryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchCatalogGlossaryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchCatalogGlossaryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchCatalogGlossaryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchCatalogGlossaryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPatchCatalogGlossaryUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchCatalogGlossaryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchCatalogGlossaryOK creates a PatchCatalogGlossaryOK with default headers values
func NewPatchCatalogGlossaryOK() *PatchCatalogGlossaryOK {
	return &PatchCatalogGlossaryOK{}
}

/* PatchCatalogGlossaryOK describes a response with status code 200, with default header values.

Glossary updated successfully.
*/
type PatchCatalogGlossaryOK struct {
	Payload *models.SuccessMessage
}

func (o *PatchCatalogGlossaryOK) Error() string {
	return fmt.Sprintf("[PATCH /metadata/glossary/{owner}/{id}][%d] patchCatalogGlossaryOK  %+v", 200, o.Payload)
}
func (o *PatchCatalogGlossaryOK) GetPayload() *models.SuccessMessage {
	return o.Payload
}

func (o *PatchCatalogGlossaryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCatalogGlossaryBadRequest creates a PatchCatalogGlossaryBadRequest with default headers values
func NewPatchCatalogGlossaryBadRequest() *PatchCatalogGlossaryBadRequest {
	return &PatchCatalogGlossaryBadRequest{}
}

/* PatchCatalogGlossaryBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PatchCatalogGlossaryBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *PatchCatalogGlossaryBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /metadata/glossary/{owner}/{id}][%d] patchCatalogGlossaryBadRequest  %+v", 400, o.Payload)
}
func (o *PatchCatalogGlossaryBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchCatalogGlossaryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCatalogGlossaryUnauthorized creates a PatchCatalogGlossaryUnauthorized with default headers values
func NewPatchCatalogGlossaryUnauthorized() *PatchCatalogGlossaryUnauthorized {
	return &PatchCatalogGlossaryUnauthorized{}
}

/* PatchCatalogGlossaryUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PatchCatalogGlossaryUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *PatchCatalogGlossaryUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /metadata/glossary/{owner}/{id}][%d] patchCatalogGlossaryUnauthorized  %+v", 401, o.Payload)
}
func (o *PatchCatalogGlossaryUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchCatalogGlossaryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCatalogGlossaryForbidden creates a PatchCatalogGlossaryForbidden with default headers values
func NewPatchCatalogGlossaryForbidden() *PatchCatalogGlossaryForbidden {
	return &PatchCatalogGlossaryForbidden{}
}

/* PatchCatalogGlossaryForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchCatalogGlossaryForbidden struct {
	Payload *models.ErrorMessage
}

func (o *PatchCatalogGlossaryForbidden) Error() string {
	return fmt.Sprintf("[PATCH /metadata/glossary/{owner}/{id}][%d] patchCatalogGlossaryForbidden  %+v", 403, o.Payload)
}
func (o *PatchCatalogGlossaryForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchCatalogGlossaryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCatalogGlossaryNotFound creates a PatchCatalogGlossaryNotFound with default headers values
func NewPatchCatalogGlossaryNotFound() *PatchCatalogGlossaryNotFound {
	return &PatchCatalogGlossaryNotFound{}
}

/* PatchCatalogGlossaryNotFound describes a response with status code 404, with default header values.

Not found
*/
type PatchCatalogGlossaryNotFound struct {
	Payload *models.ErrorMessage
}

func (o *PatchCatalogGlossaryNotFound) Error() string {
	return fmt.Sprintf("[PATCH /metadata/glossary/{owner}/{id}][%d] patchCatalogGlossaryNotFound  %+v", 404, o.Payload)
}
func (o *PatchCatalogGlossaryNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchCatalogGlossaryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCatalogGlossaryUnprocessableEntity creates a PatchCatalogGlossaryUnprocessableEntity with default headers values
func NewPatchCatalogGlossaryUnprocessableEntity() *PatchCatalogGlossaryUnprocessableEntity {
	return &PatchCatalogGlossaryUnprocessableEntity{}
}

/* PatchCatalogGlossaryUnprocessableEntity describes a response with status code 422, with default header values.

Bad request
*/
type PatchCatalogGlossaryUnprocessableEntity struct {
	Payload *models.ErrorMessage
}

func (o *PatchCatalogGlossaryUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /metadata/glossary/{owner}/{id}][%d] patchCatalogGlossaryUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *PatchCatalogGlossaryUnprocessableEntity) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchCatalogGlossaryUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchCatalogGlossaryInternalServerError creates a PatchCatalogGlossaryInternalServerError with default headers values
func NewPatchCatalogGlossaryInternalServerError() *PatchCatalogGlossaryInternalServerError {
	return &PatchCatalogGlossaryInternalServerError{}
}

/* PatchCatalogGlossaryInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type PatchCatalogGlossaryInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *PatchCatalogGlossaryInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /metadata/glossary/{owner}/{id}][%d] patchCatalogGlossaryInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchCatalogGlossaryInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchCatalogGlossaryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

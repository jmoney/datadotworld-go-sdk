// Code generated by go-swagger; DO NOT EDIT.

package glossary

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new glossary API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for glossary API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCatalogGlossary(params *CreateCatalogGlossaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCatalogGlossaryOK, error)

	DeleteCatalogGlossary(params *DeleteCatalogGlossaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCatalogGlossaryOK, error)

	GetCatalogGlossariesByOwner(params *GetCatalogGlossariesByOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogGlossariesByOwnerOK, error)

	GetCatalogGlossary(params *GetCatalogGlossaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogGlossaryOK, error)

	PatchCatalogGlossary(params *PatchCatalogGlossaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchCatalogGlossaryOK, error)

	ReplaceCatalogGlossary(params *ReplaceCatalogGlossaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceCatalogGlossaryOK, error)

	SuggestCatalogGlossary(params *SuggestCatalogGlossaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SuggestCatalogGlossaryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateCatalogGlossary creates a new glossary metadata
*/
func (a *Client) CreateCatalogGlossary(params *CreateCatalogGlossaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCatalogGlossaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCatalogGlossaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCatalogGlossary",
		Method:             "POST",
		PathPattern:        "/metadata/glossary/{owner}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCatalogGlossaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCatalogGlossaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createCatalogGlossary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteCatalogGlossary deletes a glossary
*/
func (a *Client) DeleteCatalogGlossary(params *DeleteCatalogGlossaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCatalogGlossaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogGlossaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCatalogGlossary",
		Method:             "DELETE",
		PathPattern:        "/metadata/glossary/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCatalogGlossaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCatalogGlossaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteCatalogGlossary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCatalogGlossariesByOwner gets metadata glossary by owner
*/
func (a *Client) GetCatalogGlossariesByOwner(params *GetCatalogGlossariesByOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogGlossariesByOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogGlossariesByOwnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCatalogGlossariesByOwner",
		Method:             "GET",
		PathPattern:        "/metadata/glossary/{owner}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCatalogGlossariesByOwnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogGlossariesByOwnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogGlossariesByOwner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetCatalogGlossary gets an individual metadata glossary
*/
func (a *Client) GetCatalogGlossary(params *GetCatalogGlossaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCatalogGlossaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogGlossaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCatalogGlossary",
		Method:             "GET",
		PathPattern:        "/metadata/glossary/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCatalogGlossaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogGlossaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCatalogGlossary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchCatalogGlossary updates an existing glossary
*/
func (a *Client) PatchCatalogGlossary(params *PatchCatalogGlossaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchCatalogGlossaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchCatalogGlossaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchCatalogGlossary",
		Method:             "PATCH",
		PathPattern:        "/metadata/glossary/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchCatalogGlossaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchCatalogGlossaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchCatalogGlossary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceCatalogGlossary replaces an existing glossary
*/
func (a *Client) ReplaceCatalogGlossary(params *ReplaceCatalogGlossaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceCatalogGlossaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceCatalogGlossaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceCatalogGlossary",
		Method:             "PUT",
		PathPattern:        "/metadata/glossary/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceCatalogGlossaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceCatalogGlossaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceCatalogGlossary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SuggestCatalogGlossary suggests for an existing glossary
*/
func (a *Client) SuggestCatalogGlossary(params *SuggestCatalogGlossaryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SuggestCatalogGlossaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuggestCatalogGlossaryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "suggestCatalogGlossary",
		Method:             "PATCH",
		PathPattern:        "/metadata/glossary/suggest/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SuggestCatalogGlossaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SuggestCatalogGlossaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for suggestCatalogGlossary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

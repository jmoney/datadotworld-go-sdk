// Code generated by go-swagger; DO NOT EDIT.

package glossary

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// DeleteCatalogGlossaryReader is a Reader for the DeleteCatalogGlossary structure.
type DeleteCatalogGlossaryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteCatalogGlossaryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteCatalogGlossaryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteCatalogGlossaryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeleteCatalogGlossaryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteCatalogGlossaryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteCatalogGlossaryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteCatalogGlossaryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteCatalogGlossaryOK creates a DeleteCatalogGlossaryOK with default headers values
func NewDeleteCatalogGlossaryOK() *DeleteCatalogGlossaryOK {
	return &DeleteCatalogGlossaryOK{}
}

/* DeleteCatalogGlossaryOK describes a response with status code 200, with default header values.

Glossary has been successfully deleted.
*/
type DeleteCatalogGlossaryOK struct {
	Payload *models.SuccessMessage
}

func (o *DeleteCatalogGlossaryOK) Error() string {
	return fmt.Sprintf("[DELETE /metadata/glossary/{owner}/{id}][%d] deleteCatalogGlossaryOK  %+v", 200, o.Payload)
}
func (o *DeleteCatalogGlossaryOK) GetPayload() *models.SuccessMessage {
	return o.Payload
}

func (o *DeleteCatalogGlossaryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCatalogGlossaryBadRequest creates a DeleteCatalogGlossaryBadRequest with default headers values
func NewDeleteCatalogGlossaryBadRequest() *DeleteCatalogGlossaryBadRequest {
	return &DeleteCatalogGlossaryBadRequest{}
}

/* DeleteCatalogGlossaryBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type DeleteCatalogGlossaryBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *DeleteCatalogGlossaryBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /metadata/glossary/{owner}/{id}][%d] deleteCatalogGlossaryBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteCatalogGlossaryBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteCatalogGlossaryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCatalogGlossaryUnauthorized creates a DeleteCatalogGlossaryUnauthorized with default headers values
func NewDeleteCatalogGlossaryUnauthorized() *DeleteCatalogGlossaryUnauthorized {
	return &DeleteCatalogGlossaryUnauthorized{}
}

/* DeleteCatalogGlossaryUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type DeleteCatalogGlossaryUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *DeleteCatalogGlossaryUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /metadata/glossary/{owner}/{id}][%d] deleteCatalogGlossaryUnauthorized  %+v", 401, o.Payload)
}
func (o *DeleteCatalogGlossaryUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteCatalogGlossaryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCatalogGlossaryForbidden creates a DeleteCatalogGlossaryForbidden with default headers values
func NewDeleteCatalogGlossaryForbidden() *DeleteCatalogGlossaryForbidden {
	return &DeleteCatalogGlossaryForbidden{}
}

/* DeleteCatalogGlossaryForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type DeleteCatalogGlossaryForbidden struct {
	Payload *models.ErrorMessage
}

func (o *DeleteCatalogGlossaryForbidden) Error() string {
	return fmt.Sprintf("[DELETE /metadata/glossary/{owner}/{id}][%d] deleteCatalogGlossaryForbidden  %+v", 403, o.Payload)
}
func (o *DeleteCatalogGlossaryForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteCatalogGlossaryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCatalogGlossaryNotFound creates a DeleteCatalogGlossaryNotFound with default headers values
func NewDeleteCatalogGlossaryNotFound() *DeleteCatalogGlossaryNotFound {
	return &DeleteCatalogGlossaryNotFound{}
}

/* DeleteCatalogGlossaryNotFound describes a response with status code 404, with default header values.

Not found
*/
type DeleteCatalogGlossaryNotFound struct {
	Payload *models.ErrorMessage
}

func (o *DeleteCatalogGlossaryNotFound) Error() string {
	return fmt.Sprintf("[DELETE /metadata/glossary/{owner}/{id}][%d] deleteCatalogGlossaryNotFound  %+v", 404, o.Payload)
}
func (o *DeleteCatalogGlossaryNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteCatalogGlossaryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteCatalogGlossaryInternalServerError creates a DeleteCatalogGlossaryInternalServerError with default headers values
func NewDeleteCatalogGlossaryInternalServerError() *DeleteCatalogGlossaryInternalServerError {
	return &DeleteCatalogGlossaryInternalServerError{}
}

/* DeleteCatalogGlossaryInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type DeleteCatalogGlossaryInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *DeleteCatalogGlossaryInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /metadata/glossary/{owner}/{id}][%d] deleteCatalogGlossaryInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteCatalogGlossaryInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *DeleteCatalogGlossaryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package glossary

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// GetCatalogGlossaryReader is a Reader for the GetCatalogGlossary structure.
type GetCatalogGlossaryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCatalogGlossaryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCatalogGlossaryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCatalogGlossaryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCatalogGlossaryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCatalogGlossaryOK creates a GetCatalogGlossaryOK with default headers values
func NewGetCatalogGlossaryOK() *GetCatalogGlossaryOK {
	return &GetCatalogGlossaryOK{}
}

/* GetCatalogGlossaryOK describes a response with status code 200, with default header values.

successful operation
*/
type GetCatalogGlossaryOK struct {
	Payload *models.MetadataResourceDto
}

func (o *GetCatalogGlossaryOK) Error() string {
	return fmt.Sprintf("[GET /metadata/glossary/{owner}/{id}][%d] getCatalogGlossaryOK  %+v", 200, o.Payload)
}
func (o *GetCatalogGlossaryOK) GetPayload() *models.MetadataResourceDto {
	return o.Payload
}

func (o *GetCatalogGlossaryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.MetadataResourceDto)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogGlossaryBadRequest creates a GetCatalogGlossaryBadRequest with default headers values
func NewGetCatalogGlossaryBadRequest() *GetCatalogGlossaryBadRequest {
	return &GetCatalogGlossaryBadRequest{}
}

/* GetCatalogGlossaryBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GetCatalogGlossaryBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *GetCatalogGlossaryBadRequest) Error() string {
	return fmt.Sprintf("[GET /metadata/glossary/{owner}/{id}][%d] getCatalogGlossaryBadRequest  %+v", 400, o.Payload)
}
func (o *GetCatalogGlossaryBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetCatalogGlossaryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogGlossaryNotFound creates a GetCatalogGlossaryNotFound with default headers values
func NewGetCatalogGlossaryNotFound() *GetCatalogGlossaryNotFound {
	return &GetCatalogGlossaryNotFound{}
}

/* GetCatalogGlossaryNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetCatalogGlossaryNotFound struct {
	Payload *models.ErrorMessage
}

func (o *GetCatalogGlossaryNotFound) Error() string {
	return fmt.Sprintf("[GET /metadata/glossary/{owner}/{id}][%d] getCatalogGlossaryNotFound  %+v", 404, o.Payload)
}
func (o *GetCatalogGlossaryNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetCatalogGlossaryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new projects API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for projects API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddLinkedDataset(params *AddLinkedDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddLinkedDatasetOK, error)

	CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectOK, error)

	CreateProjectSavedQuery(params *CreateProjectSavedQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectSavedQueryOK, error)

	DeleteProject(params *DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectOK, error)

	DeleteProjectSavedQuery(params *DeleteProjectSavedQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectSavedQueryOK, error)

	GetProject(params *GetProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectOK, error)

	GetProjectByVersion(params *GetProjectByVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectByVersionOK, error)

	GetProjectQueries(params *GetProjectQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectQueriesOK, error)

	GetProjectsByOwner(params *GetProjectsByOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectsByOwnerOK, error)

	PatchProject(params *PatchProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchProjectOK, error)

	RemoveLinkedDataset(params *RemoveLinkedDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveLinkedDatasetOK, error)

	ReplaceProject(params *ReplaceProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceProjectOK, error)

	UpdateProjectSavedQuery(params *UpdateProjectSavedQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectSavedQueryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddLinkedDataset links a dataset to a project
*/
func (a *Client) AddLinkedDataset(params *AddLinkedDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AddLinkedDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddLinkedDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addLinkedDataset",
		Method:             "PUT",
		PathPattern:        "/projects/{owner}/{id}/linkedDatasets/{linkedDatasetOwner}/{linkedDatasetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddLinkedDatasetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddLinkedDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addLinkedDataset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProject creates a new project
*/
func (a *Client) CreateProject(params *CreateProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProject",
		Method:             "POST",
		PathPattern:        "/projects/{owner}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateProjectSavedQuery creates a saved query for a project
*/
func (a *Client) CreateProjectSavedQuery(params *CreateProjectSavedQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateProjectSavedQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProjectSavedQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProjectSavedQuery",
		Method:             "POST",
		PathPattern:        "/projects/{owner}/{id}/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProjectSavedQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProjectSavedQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProjectSavedQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProject deletes a project
*/
func (a *Client) DeleteProject(params *DeleteProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProject",
		Method:             "DELETE",
		PathPattern:        "/projects/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteProjectSavedQuery deletes a saved query for a project
*/
func (a *Client) DeleteProjectSavedQuery(params *DeleteProjectSavedQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectSavedQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectSavedQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteProjectSavedQuery",
		Method:             "DELETE",
		PathPattern:        "/projects/{owner}/{id}/queries/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProjectSavedQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectSavedQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteProjectSavedQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProject retrieves a project
*/
func (a *Client) GetProject(params *GetProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProject",
		Method:             "GET",
		PathPattern:        "/projects/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectByVersion retrieves a project by version
*/
func (a *Client) GetProjectByVersion(params *GetProjectByVersionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectByVersionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectByVersionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectByVersion",
		Method:             "GET",
		PathPattern:        "/projects/{owner}/{id}/v/{versionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectByVersionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectByVersionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectByVersion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectQueries retrieves queries saved in a project
*/
func (a *Client) GetProjectQueries(params *GetProjectQueriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectQueriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectQueriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectQueries",
		Method:             "GET",
		PathPattern:        "/projects/{owner}/{id}/queries",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectQueriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectQueriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectQueries: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetProjectsByOwner gets projects by owner
*/
func (a *Client) GetProjectsByOwner(params *GetProjectsByOwnerParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectsByOwnerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectsByOwnerParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getProjectsByOwner",
		Method:             "GET",
		PathPattern:        "/projects/{owner}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProjectsByOwnerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectsByOwnerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getProjectsByOwner: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PatchProject updates an existing project
*/
func (a *Client) PatchProject(params *PatchProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PatchProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "patchProject",
		Method:             "PATCH",
		PathPattern:        "/projects/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PatchProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for patchProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RemoveLinkedDataset removes a linked dataset from a project
*/
func (a *Client) RemoveLinkedDataset(params *RemoveLinkedDatasetParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RemoveLinkedDatasetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRemoveLinkedDatasetParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "removeLinkedDataset",
		Method:             "DELETE",
		PathPattern:        "/projects/{owner}/{id}/linkedDatasets/{linkedDatasetOwner}/{linkedDatasetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RemoveLinkedDatasetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RemoveLinkedDatasetOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for removeLinkedDataset: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ReplaceProject replaces an existing project or create a new project
*/
func (a *Client) ReplaceProject(params *ReplaceProjectParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ReplaceProjectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReplaceProjectParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "replaceProject",
		Method:             "PUT",
		PathPattern:        "/projects/{owner}/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ReplaceProjectReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ReplaceProjectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for replaceProject: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateProjectSavedQuery updates a saved query for a project
*/
func (a *Client) UpdateProjectSavedQuery(params *UpdateProjectSavedQueryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateProjectSavedQueryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProjectSavedQueryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateProjectSavedQuery",
		Method:             "PUT",
		PathPattern:        "/projects/{owner}/{id}/queries/{queryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProjectSavedQueryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateProjectSavedQueryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateProjectSavedQuery: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

// Code generated by go-swagger; DO NOT EDIT.

package projects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// PatchProjectReader is a Reader for the PatchProject structure.
type PatchProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PatchProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPatchProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPatchProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPatchProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPatchProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPatchProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPatchProjectUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPatchProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPatchProjectOK creates a PatchProjectOK with default headers values
func NewPatchProjectOK() *PatchProjectOK {
	return &PatchProjectOK{}
}

/* PatchProjectOK describes a response with status code 200, with default header values.

Project updated successfully.
*/
type PatchProjectOK struct {
	Payload *models.SuccessMessage
}

func (o *PatchProjectOK) Error() string {
	return fmt.Sprintf("[PATCH /projects/{owner}/{id}][%d] patchProjectOK  %+v", 200, o.Payload)
}
func (o *PatchProjectOK) GetPayload() *models.SuccessMessage {
	return o.Payload
}

func (o *PatchProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectBadRequest creates a PatchProjectBadRequest with default headers values
func NewPatchProjectBadRequest() *PatchProjectBadRequest {
	return &PatchProjectBadRequest{}
}

/* PatchProjectBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type PatchProjectBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *PatchProjectBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /projects/{owner}/{id}][%d] patchProjectBadRequest  %+v", 400, o.Payload)
}
func (o *PatchProjectBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectUnauthorized creates a PatchProjectUnauthorized with default headers values
func NewPatchProjectUnauthorized() *PatchProjectUnauthorized {
	return &PatchProjectUnauthorized{}
}

/* PatchProjectUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type PatchProjectUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *PatchProjectUnauthorized) Error() string {
	return fmt.Sprintf("[PATCH /projects/{owner}/{id}][%d] patchProjectUnauthorized  %+v", 401, o.Payload)
}
func (o *PatchProjectUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectForbidden creates a PatchProjectForbidden with default headers values
func NewPatchProjectForbidden() *PatchProjectForbidden {
	return &PatchProjectForbidden{}
}

/* PatchProjectForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type PatchProjectForbidden struct {
	Payload *models.ErrorMessage
}

func (o *PatchProjectForbidden) Error() string {
	return fmt.Sprintf("[PATCH /projects/{owner}/{id}][%d] patchProjectForbidden  %+v", 403, o.Payload)
}
func (o *PatchProjectForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectNotFound creates a PatchProjectNotFound with default headers values
func NewPatchProjectNotFound() *PatchProjectNotFound {
	return &PatchProjectNotFound{}
}

/* PatchProjectNotFound describes a response with status code 404, with default header values.

Not found
*/
type PatchProjectNotFound struct {
	Payload *models.ErrorMessage
}

func (o *PatchProjectNotFound) Error() string {
	return fmt.Sprintf("[PATCH /projects/{owner}/{id}][%d] patchProjectNotFound  %+v", 404, o.Payload)
}
func (o *PatchProjectNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectUnprocessableEntity creates a PatchProjectUnprocessableEntity with default headers values
func NewPatchProjectUnprocessableEntity() *PatchProjectUnprocessableEntity {
	return &PatchProjectUnprocessableEntity{}
}

/* PatchProjectUnprocessableEntity describes a response with status code 422, with default header values.

Bad request
*/
type PatchProjectUnprocessableEntity struct {
	Payload *models.ErrorMessage
}

func (o *PatchProjectUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PATCH /projects/{owner}/{id}][%d] patchProjectUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *PatchProjectUnprocessableEntity) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchProjectUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPatchProjectInternalServerError creates a PatchProjectInternalServerError with default headers values
func NewPatchProjectInternalServerError() *PatchProjectInternalServerError {
	return &PatchProjectInternalServerError{}
}

/* PatchProjectInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type PatchProjectInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *PatchProjectInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /projects/{owner}/{id}][%d] patchProjectInternalServerError  %+v", 500, o.Payload)
}
func (o *PatchProjectInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *PatchProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

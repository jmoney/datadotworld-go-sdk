// Code generated by go-swagger; DO NOT EDIT.

package requests

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new requests API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for requests API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AcceptRequest(params *AcceptRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptRequestOK, error)

	CreateResourceRequest(params *CreateResourceRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateResourceRequestOK, error)

	DeleteRequest(params *DeleteRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRequestOK, error)

	GetRequest(params *GetRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRequestOK, error)

	GetRequests(params *GetRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRequestsOK, error)

	RejectRequest(params *RejectRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectRequestOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AcceptRequest accepts a request
*/
func (a *Client) AcceptRequest(params *AcceptRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AcceptRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAcceptRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "acceptRequest",
		Method:             "POST",
		PathPattern:        "/requests/accept",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AcceptRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AcceptRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for acceptRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateResourceRequest suggests a request
*/
func (a *Client) CreateResourceRequest(params *CreateResourceRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateResourceRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateResourceRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createResourceRequest",
		Method:             "POST",
		PathPattern:        "/requests/suggest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateResourceRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateResourceRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createResourceRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteRequest deletes a request
*/
func (a *Client) DeleteRequest(params *DeleteRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteRequest",
		Method:             "DELETE",
		PathPattern:        "/requests/{requestid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRequest gets resource request for specified agent
*/
func (a *Client) GetRequest(params *GetRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRequest",
		Method:             "GET",
		PathPattern:        "/requests/{requestid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRequests gets pending resource request for specified agent
*/
func (a *Client) GetRequests(params *GetRequestsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRequestsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRequestsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRequests",
		Method:             "GET",
		PathPattern:        "/requests/owner/{agentid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRequestsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRequestsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRequests: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RejectRequest rejects a request
*/
func (a *Client) RejectRequest(params *RejectRequestParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RejectRequestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRejectRequestParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rejectRequest",
		Method:             "POST",
		PathPattern:        "/requests/reject",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RejectRequestReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RejectRequestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rejectRequest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}

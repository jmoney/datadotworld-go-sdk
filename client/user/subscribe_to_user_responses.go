// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// SubscribeToUserReader is a Reader for the SubscribeToUser structure.
type SubscribeToUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubscribeToUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSubscribeToUserOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubscribeToUserBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSubscribeToUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubscribeToUserForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubscribeToUserNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSubscribeToUserUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubscribeToUserInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubscribeToUserOK creates a SubscribeToUserOK with default headers values
func NewSubscribeToUserOK() *SubscribeToUserOK {
	return &SubscribeToUserOK{}
}

/* SubscribeToUserOK describes a response with status code 200, with default header values.

Webhook subscription created successfully.
*/
type SubscribeToUserOK struct {
	Payload *models.SuccessMessage
}

func (o *SubscribeToUserOK) Error() string {
	return fmt.Sprintf("[PUT /user/webhooks/users/{account}][%d] subscribeToUserOK  %+v", 200, o.Payload)
}
func (o *SubscribeToUserOK) GetPayload() *models.SuccessMessage {
	return o.Payload
}

func (o *SubscribeToUserOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscribeToUserBadRequest creates a SubscribeToUserBadRequest with default headers values
func NewSubscribeToUserBadRequest() *SubscribeToUserBadRequest {
	return &SubscribeToUserBadRequest{}
}

/* SubscribeToUserBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type SubscribeToUserBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *SubscribeToUserBadRequest) Error() string {
	return fmt.Sprintf("[PUT /user/webhooks/users/{account}][%d] subscribeToUserBadRequest  %+v", 400, o.Payload)
}
func (o *SubscribeToUserBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SubscribeToUserBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscribeToUserUnauthorized creates a SubscribeToUserUnauthorized with default headers values
func NewSubscribeToUserUnauthorized() *SubscribeToUserUnauthorized {
	return &SubscribeToUserUnauthorized{}
}

/* SubscribeToUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SubscribeToUserUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *SubscribeToUserUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /user/webhooks/users/{account}][%d] subscribeToUserUnauthorized  %+v", 401, o.Payload)
}
func (o *SubscribeToUserUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SubscribeToUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscribeToUserForbidden creates a SubscribeToUserForbidden with default headers values
func NewSubscribeToUserForbidden() *SubscribeToUserForbidden {
	return &SubscribeToUserForbidden{}
}

/* SubscribeToUserForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type SubscribeToUserForbidden struct {
	Payload *models.ErrorMessage
}

func (o *SubscribeToUserForbidden) Error() string {
	return fmt.Sprintf("[PUT /user/webhooks/users/{account}][%d] subscribeToUserForbidden  %+v", 403, o.Payload)
}
func (o *SubscribeToUserForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SubscribeToUserForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscribeToUserNotFound creates a SubscribeToUserNotFound with default headers values
func NewSubscribeToUserNotFound() *SubscribeToUserNotFound {
	return &SubscribeToUserNotFound{}
}

/* SubscribeToUserNotFound describes a response with status code 404, with default header values.

Not found
*/
type SubscribeToUserNotFound struct {
	Payload *models.ErrorMessage
}

func (o *SubscribeToUserNotFound) Error() string {
	return fmt.Sprintf("[PUT /user/webhooks/users/{account}][%d] subscribeToUserNotFound  %+v", 404, o.Payload)
}
func (o *SubscribeToUserNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SubscribeToUserNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscribeToUserUnprocessableEntity creates a SubscribeToUserUnprocessableEntity with default headers values
func NewSubscribeToUserUnprocessableEntity() *SubscribeToUserUnprocessableEntity {
	return &SubscribeToUserUnprocessableEntity{}
}

/* SubscribeToUserUnprocessableEntity describes a response with status code 422, with default header values.

Bad request
*/
type SubscribeToUserUnprocessableEntity struct {
	Payload *models.ErrorMessage
}

func (o *SubscribeToUserUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /user/webhooks/users/{account}][%d] subscribeToUserUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *SubscribeToUserUnprocessableEntity) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SubscribeToUserUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubscribeToUserInternalServerError creates a SubscribeToUserInternalServerError with default headers values
func NewSubscribeToUserInternalServerError() *SubscribeToUserInternalServerError {
	return &SubscribeToUserInternalServerError{}
}

/* SubscribeToUserInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type SubscribeToUserInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *SubscribeToUserInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /user/webhooks/users/{account}][%d] subscribeToUserInternalServerError  %+v", 500, o.Payload)
}
func (o *SubscribeToUserInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *SubscribeToUserInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

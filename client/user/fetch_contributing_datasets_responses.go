// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// FetchContributingDatasetsReader is a Reader for the FetchContributingDatasets structure.
type FetchContributingDatasetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *FetchContributingDatasetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewFetchContributingDatasetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewFetchContributingDatasetsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewFetchContributingDatasetsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewFetchContributingDatasetsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewFetchContributingDatasetsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewFetchContributingDatasetsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewFetchContributingDatasetsOK creates a FetchContributingDatasetsOK with default headers values
func NewFetchContributingDatasetsOK() *FetchContributingDatasetsOK {
	return &FetchContributingDatasetsOK{}
}

/* FetchContributingDatasetsOK describes a response with status code 200, with default header values.

successful operation
*/
type FetchContributingDatasetsOK struct {
	Payload *models.PaginatedDatasetResults
}

func (o *FetchContributingDatasetsOK) Error() string {
	return fmt.Sprintf("[GET /user/datasets/contributing][%d] fetchContributingDatasetsOK  %+v", 200, o.Payload)
}
func (o *FetchContributingDatasetsOK) GetPayload() *models.PaginatedDatasetResults {
	return o.Payload
}

func (o *FetchContributingDatasetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedDatasetResults)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchContributingDatasetsBadRequest creates a FetchContributingDatasetsBadRequest with default headers values
func NewFetchContributingDatasetsBadRequest() *FetchContributingDatasetsBadRequest {
	return &FetchContributingDatasetsBadRequest{}
}

/* FetchContributingDatasetsBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type FetchContributingDatasetsBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *FetchContributingDatasetsBadRequest) Error() string {
	return fmt.Sprintf("[GET /user/datasets/contributing][%d] fetchContributingDatasetsBadRequest  %+v", 400, o.Payload)
}
func (o *FetchContributingDatasetsBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *FetchContributingDatasetsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchContributingDatasetsUnauthorized creates a FetchContributingDatasetsUnauthorized with default headers values
func NewFetchContributingDatasetsUnauthorized() *FetchContributingDatasetsUnauthorized {
	return &FetchContributingDatasetsUnauthorized{}
}

/* FetchContributingDatasetsUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type FetchContributingDatasetsUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *FetchContributingDatasetsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /user/datasets/contributing][%d] fetchContributingDatasetsUnauthorized  %+v", 401, o.Payload)
}
func (o *FetchContributingDatasetsUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *FetchContributingDatasetsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchContributingDatasetsForbidden creates a FetchContributingDatasetsForbidden with default headers values
func NewFetchContributingDatasetsForbidden() *FetchContributingDatasetsForbidden {
	return &FetchContributingDatasetsForbidden{}
}

/* FetchContributingDatasetsForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type FetchContributingDatasetsForbidden struct {
	Payload *models.ErrorMessage
}

func (o *FetchContributingDatasetsForbidden) Error() string {
	return fmt.Sprintf("[GET /user/datasets/contributing][%d] fetchContributingDatasetsForbidden  %+v", 403, o.Payload)
}
func (o *FetchContributingDatasetsForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *FetchContributingDatasetsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchContributingDatasetsNotFound creates a FetchContributingDatasetsNotFound with default headers values
func NewFetchContributingDatasetsNotFound() *FetchContributingDatasetsNotFound {
	return &FetchContributingDatasetsNotFound{}
}

/* FetchContributingDatasetsNotFound describes a response with status code 404, with default header values.

Not found
*/
type FetchContributingDatasetsNotFound struct {
	Payload *models.ErrorMessage
}

func (o *FetchContributingDatasetsNotFound) Error() string {
	return fmt.Sprintf("[GET /user/datasets/contributing][%d] fetchContributingDatasetsNotFound  %+v", 404, o.Payload)
}
func (o *FetchContributingDatasetsNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *FetchContributingDatasetsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewFetchContributingDatasetsInternalServerError creates a FetchContributingDatasetsInternalServerError with default headers values
func NewFetchContributingDatasetsInternalServerError() *FetchContributingDatasetsInternalServerError {
	return &FetchContributingDatasetsInternalServerError{}
}

/* FetchContributingDatasetsInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type FetchContributingDatasetsInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *FetchContributingDatasetsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /user/datasets/contributing][%d] fetchContributingDatasetsInternalServerError  %+v", 500, o.Payload)
}
func (o *FetchContributingDatasetsInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *FetchContributingDatasetsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

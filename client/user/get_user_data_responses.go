// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// GetUserDataReader is a Reader for the GetUserData structure.
type GetUserDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetUserDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetUserDataOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetUserDataUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetUserDataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetUserDataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetUserDataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetUserDataOK creates a GetUserDataOK with default headers values
func NewGetUserDataOK() *GetUserDataOK {
	return &GetUserDataOK{}
}

/* GetUserDataOK describes a response with status code 200, with default header values.

User data returned.
*/
type GetUserDataOK struct {
	Payload *models.UserDataResponse
}

func (o *GetUserDataOK) Error() string {
	return fmt.Sprintf("[GET /user][%d] getUserDataOK  %+v", 200, o.Payload)
}
func (o *GetUserDataOK) GetPayload() *models.UserDataResponse {
	return o.Payload
}

func (o *GetUserDataOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.UserDataResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserDataUnauthorized creates a GetUserDataUnauthorized with default headers values
func NewGetUserDataUnauthorized() *GetUserDataUnauthorized {
	return &GetUserDataUnauthorized{}
}

/* GetUserDataUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetUserDataUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *GetUserDataUnauthorized) Error() string {
	return fmt.Sprintf("[GET /user][%d] getUserDataUnauthorized  %+v", 401, o.Payload)
}
func (o *GetUserDataUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetUserDataUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserDataForbidden creates a GetUserDataForbidden with default headers values
func NewGetUserDataForbidden() *GetUserDataForbidden {
	return &GetUserDataForbidden{}
}

/* GetUserDataForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetUserDataForbidden struct {
	Payload *models.ErrorMessage
}

func (o *GetUserDataForbidden) Error() string {
	return fmt.Sprintf("[GET /user][%d] getUserDataForbidden  %+v", 403, o.Payload)
}
func (o *GetUserDataForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetUserDataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserDataNotFound creates a GetUserDataNotFound with default headers values
func NewGetUserDataNotFound() *GetUserDataNotFound {
	return &GetUserDataNotFound{}
}

/* GetUserDataNotFound describes a response with status code 404, with default header values.

Not found
*/
type GetUserDataNotFound struct {
	Payload *models.ErrorMessage
}

func (o *GetUserDataNotFound) Error() string {
	return fmt.Sprintf("[GET /user][%d] getUserDataNotFound  %+v", 404, o.Payload)
}
func (o *GetUserDataNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetUserDataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetUserDataInternalServerError creates a GetUserDataInternalServerError with default headers values
func NewGetUserDataInternalServerError() *GetUserDataInternalServerError {
	return &GetUserDataInternalServerError{}
}

/* GetUserDataInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetUserDataInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *GetUserDataInternalServerError) Error() string {
	return fmt.Sprintf("[GET /user][%d] getUserDataInternalServerError  %+v", 500, o.Payload)
}
func (o *GetUserDataInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetUserDataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

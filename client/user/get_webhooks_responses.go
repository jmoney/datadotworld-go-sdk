// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// GetWebhooksReader is a Reader for the GetWebhooks structure.
type GetWebhooksReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetWebhooksReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetWebhooksOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetWebhooksBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetWebhooksUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetWebhooksForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetWebhooksInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetWebhooksOK creates a GetWebhooksOK with default headers values
func NewGetWebhooksOK() *GetWebhooksOK {
	return &GetWebhooksOK{}
}

/* GetWebhooksOK describes a response with status code 200, with default header values.

Webhook subscriptions returned successfully.
*/
type GetWebhooksOK struct {
	Payload *models.PaginatedSubscriptionResults
}

func (o *GetWebhooksOK) Error() string {
	return fmt.Sprintf("[GET /user/webhooks][%d] getWebhooksOK  %+v", 200, o.Payload)
}
func (o *GetWebhooksOK) GetPayload() *models.PaginatedSubscriptionResults {
	return o.Payload
}

func (o *GetWebhooksOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.PaginatedSubscriptionResults)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhooksBadRequest creates a GetWebhooksBadRequest with default headers values
func NewGetWebhooksBadRequest() *GetWebhooksBadRequest {
	return &GetWebhooksBadRequest{}
}

/* GetWebhooksBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type GetWebhooksBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *GetWebhooksBadRequest) Error() string {
	return fmt.Sprintf("[GET /user/webhooks][%d] getWebhooksBadRequest  %+v", 400, o.Payload)
}
func (o *GetWebhooksBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetWebhooksBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhooksUnauthorized creates a GetWebhooksUnauthorized with default headers values
func NewGetWebhooksUnauthorized() *GetWebhooksUnauthorized {
	return &GetWebhooksUnauthorized{}
}

/* GetWebhooksUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type GetWebhooksUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *GetWebhooksUnauthorized) Error() string {
	return fmt.Sprintf("[GET /user/webhooks][%d] getWebhooksUnauthorized  %+v", 401, o.Payload)
}
func (o *GetWebhooksUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetWebhooksUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhooksForbidden creates a GetWebhooksForbidden with default headers values
func NewGetWebhooksForbidden() *GetWebhooksForbidden {
	return &GetWebhooksForbidden{}
}

/* GetWebhooksForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type GetWebhooksForbidden struct {
	Payload *models.ErrorMessage
}

func (o *GetWebhooksForbidden) Error() string {
	return fmt.Sprintf("[GET /user/webhooks][%d] getWebhooksForbidden  %+v", 403, o.Payload)
}
func (o *GetWebhooksForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetWebhooksForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetWebhooksInternalServerError creates a GetWebhooksInternalServerError with default headers values
func NewGetWebhooksInternalServerError() *GetWebhooksInternalServerError {
	return &GetWebhooksInternalServerError{}
}

/* GetWebhooksInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type GetWebhooksInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *GetWebhooksInternalServerError) Error() string {
	return fmt.Sprintf("[GET /user/webhooks][%d] getWebhooksInternalServerError  %+v", 500, o.Payload)
}
func (o *GetWebhooksInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *GetWebhooksInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

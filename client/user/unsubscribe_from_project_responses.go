// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"datadotworld-go-sdk/models"
)

// UnsubscribeFromProjectReader is a Reader for the UnsubscribeFromProject structure.
type UnsubscribeFromProjectReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnsubscribeFromProjectReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUnsubscribeFromProjectOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUnsubscribeFromProjectBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUnsubscribeFromProjectUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUnsubscribeFromProjectForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUnsubscribeFromProjectNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUnsubscribeFromProjectInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUnsubscribeFromProjectOK creates a UnsubscribeFromProjectOK with default headers values
func NewUnsubscribeFromProjectOK() *UnsubscribeFromProjectOK {
	return &UnsubscribeFromProjectOK{}
}

/* UnsubscribeFromProjectOK describes a response with status code 200, with default header values.

Webhook subscription deleted successfully.
*/
type UnsubscribeFromProjectOK struct {
	Payload *models.SuccessMessage
}

func (o *UnsubscribeFromProjectOK) Error() string {
	return fmt.Sprintf("[DELETE /user/webhooks/projects/{owner}/{id}][%d] unsubscribeFromProjectOK  %+v", 200, o.Payload)
}
func (o *UnsubscribeFromProjectOK) GetPayload() *models.SuccessMessage {
	return o.Payload
}

func (o *UnsubscribeFromProjectOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnsubscribeFromProjectBadRequest creates a UnsubscribeFromProjectBadRequest with default headers values
func NewUnsubscribeFromProjectBadRequest() *UnsubscribeFromProjectBadRequest {
	return &UnsubscribeFromProjectBadRequest{}
}

/* UnsubscribeFromProjectBadRequest describes a response with status code 400, with default header values.

Bad request
*/
type UnsubscribeFromProjectBadRequest struct {
	Payload *models.ErrorMessage
}

func (o *UnsubscribeFromProjectBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /user/webhooks/projects/{owner}/{id}][%d] unsubscribeFromProjectBadRequest  %+v", 400, o.Payload)
}
func (o *UnsubscribeFromProjectBadRequest) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UnsubscribeFromProjectBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnsubscribeFromProjectUnauthorized creates a UnsubscribeFromProjectUnauthorized with default headers values
func NewUnsubscribeFromProjectUnauthorized() *UnsubscribeFromProjectUnauthorized {
	return &UnsubscribeFromProjectUnauthorized{}
}

/* UnsubscribeFromProjectUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type UnsubscribeFromProjectUnauthorized struct {
	Payload *models.ErrorMessage
}

func (o *UnsubscribeFromProjectUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /user/webhooks/projects/{owner}/{id}][%d] unsubscribeFromProjectUnauthorized  %+v", 401, o.Payload)
}
func (o *UnsubscribeFromProjectUnauthorized) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UnsubscribeFromProjectUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnsubscribeFromProjectForbidden creates a UnsubscribeFromProjectForbidden with default headers values
func NewUnsubscribeFromProjectForbidden() *UnsubscribeFromProjectForbidden {
	return &UnsubscribeFromProjectForbidden{}
}

/* UnsubscribeFromProjectForbidden describes a response with status code 403, with default header values.

Forbidden
*/
type UnsubscribeFromProjectForbidden struct {
	Payload *models.ErrorMessage
}

func (o *UnsubscribeFromProjectForbidden) Error() string {
	return fmt.Sprintf("[DELETE /user/webhooks/projects/{owner}/{id}][%d] unsubscribeFromProjectForbidden  %+v", 403, o.Payload)
}
func (o *UnsubscribeFromProjectForbidden) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UnsubscribeFromProjectForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnsubscribeFromProjectNotFound creates a UnsubscribeFromProjectNotFound with default headers values
func NewUnsubscribeFromProjectNotFound() *UnsubscribeFromProjectNotFound {
	return &UnsubscribeFromProjectNotFound{}
}

/* UnsubscribeFromProjectNotFound describes a response with status code 404, with default header values.

Not found
*/
type UnsubscribeFromProjectNotFound struct {
	Payload *models.ErrorMessage
}

func (o *UnsubscribeFromProjectNotFound) Error() string {
	return fmt.Sprintf("[DELETE /user/webhooks/projects/{owner}/{id}][%d] unsubscribeFromProjectNotFound  %+v", 404, o.Payload)
}
func (o *UnsubscribeFromProjectNotFound) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UnsubscribeFromProjectNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnsubscribeFromProjectInternalServerError creates a UnsubscribeFromProjectInternalServerError with default headers values
func NewUnsubscribeFromProjectInternalServerError() *UnsubscribeFromProjectInternalServerError {
	return &UnsubscribeFromProjectInternalServerError{}
}

/* UnsubscribeFromProjectInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type UnsubscribeFromProjectInternalServerError struct {
	Payload *models.ErrorMessage
}

func (o *UnsubscribeFromProjectInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /user/webhooks/projects/{owner}/{id}][%d] unsubscribeFromProjectInternalServerError  %+v", 500, o.Payload)
}
func (o *UnsubscribeFromProjectInternalServerError) GetPayload() *models.ErrorMessage {
	return o.Payload
}

func (o *UnsubscribeFromProjectInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorMessage)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

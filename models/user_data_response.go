// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserDataResponse user data response
//
// swagger:model UserDataResponse
type UserDataResponse struct {

	// avatar Url
	// Max Length: 256
	// Min Length: 0
	AvatarURL *string `json:"avatarUrl,omitempty"`

	// created
	// Required: true
	Created *string `json:"created"`

	// display name
	// Max Length: 128
	// Min Length: 0
	DisplayName *string `json:"displayName,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// updated
	// Required: true
	Updated *string `json:"updated"`
}

// Validate validates this user data response
func (m *UserDataResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvatarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserDataResponse) validateAvatarURL(formats strfmt.Registry) error {
	if swag.IsZero(m.AvatarURL) { // not required
		return nil
	}

	if err := validate.MinLength("avatarUrl", "body", *m.AvatarURL, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("avatarUrl", "body", *m.AvatarURL, 256); err != nil {
		return err
	}

	return nil
}

func (m *UserDataResponse) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *UserDataResponse) validateDisplayName(formats strfmt.Registry) error {
	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", *m.DisplayName, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", *m.DisplayName, 128); err != nil {
		return err
	}

	return nil
}

func (m *UserDataResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *UserDataResponse) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("updated", "body", m.Updated); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user data response based on context it is used
func (m *UserDataResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserDataResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserDataResponse) UnmarshalBinary(b []byte) error {
	var res UserDataResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

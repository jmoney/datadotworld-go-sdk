// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"io/ioutil"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContributionActivity contribution activity
//
// swagger:discriminator ContributionActivity type
type ContributionActivity interface {
	runtime.Validatable
	runtime.ContextValidatable

	// contribution hydratables
	ContributionHydratables() []*ContributionHydratable
	SetContributionHydratables([]*ContributionHydratable)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type contributionActivity struct {
	contributionHydratablesField []*ContributionHydratable
}

// ContributionHydratables gets the contribution hydratables of this polymorphic type
func (m *contributionActivity) ContributionHydratables() []*ContributionHydratable {
	return m.contributionHydratablesField
}

// SetContributionHydratables sets the contribution hydratables of this polymorphic type
func (m *contributionActivity) SetContributionHydratables(val []*ContributionHydratable) {
	m.contributionHydratablesField = val
}

// UnmarshalContributionActivitySlice unmarshals polymorphic slices of ContributionActivity
func UnmarshalContributionActivitySlice(reader io.Reader, consumer runtime.Consumer) ([]ContributionActivity, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ContributionActivity
	for _, element := range elements {
		obj, err := unmarshalContributionActivity(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalContributionActivity unmarshals polymorphic ContributionActivity
func UnmarshalContributionActivity(reader io.Reader, consumer runtime.Consumer) (ContributionActivity, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalContributionActivity(data, consumer)
}

func unmarshalContributionActivity(data []byte, consumer runtime.Consumer) (ContributionActivity, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "AddCustomIriPropertyContribution":
		var result AddCustomIriPropertyContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "AddTagContribution":
		var result AddTagContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "AddToCatalogContribution":
		var result AddToCatalogContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "AddUsesDataFromContribution":
		var result AddUsesDataFromContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "AddUsesDatasetContribution":
		var result AddUsesDatasetContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "ContributionActivity":
		var result contributionActivity
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "CreateAnalysisContribution":
		var result CreateAnalysisContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "CreateBusinessTermContribution":
		var result CreateBusinessTermContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "CreateDatasetContribution":
		var result CreateDatasetContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "CreateExternalResourceContribution":
		var result CreateExternalResourceContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "CreateMissingDatasetAndLinkAnalysisContribution":
		var result CreateMissingDatasetAndLinkAnalysisContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "CreateMissingDatasetAndLinkTableContribution":
		var result CreateMissingDatasetAndLinkTableContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "ReferenceBusinessTermContribution":
		var result ReferenceBusinessTermContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "RemoveCustomIriPropertyContribution":
		var result RemoveCustomIriPropertyContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "RemoveFromCatalogContribution":
		var result RemoveFromCatalogContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "RemoveTagContribution":
		var result RemoveTagContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "RemoveUsesDataFromContribution":
		var result RemoveUsesDataFromContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "RemoveUsesDatasetContribution":
		var result RemoveUsesDatasetContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "SetAssetStatusContribution":
		var result SetAssetStatusContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "SetCustomIriPropertyContribution":
		var result SetCustomIriPropertyContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "SetCustomLiteralPropertyContribution":
		var result SetCustomLiteralPropertyContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "SetCustomStringPropertyContribution":
		var result SetCustomStringPropertyContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "SetDescriptionContribution":
		var result SetDescriptionContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "SetLicense":
		var result SetLicense
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "SetNameContribution":
		var result SetNameContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "SetSummaryContribution":
		var result SetSummaryContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "UnreferenceBusinessTermContribution":
		var result UnreferenceBusinessTermContribution
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)
}

// Validate validates this contribution activity
func (m *contributionActivity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContributionHydratables(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *contributionActivity) validateContributionHydratables(formats strfmt.Registry) error {
	if swag.IsZero(m.ContributionHydratables()) { // not required
		return nil
	}

	for i := 0; i < len(m.ContributionHydratables()); i++ {
		if swag.IsZero(m.contributionHydratablesField[i]) { // not required
			continue
		}

		if m.contributionHydratablesField[i] != nil {
			if err := m.contributionHydratablesField[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contributionHydratables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contributionHydratables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this contribution activity based on the context it is used
func (m *contributionActivity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContributionHydratables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *contributionActivity) contextValidateContributionHydratables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContributionHydratables()); i++ {

		if m.contributionHydratablesField[i] != nil {
			if err := m.contributionHydratablesField[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contributionHydratables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contributionHydratables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

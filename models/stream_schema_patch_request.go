// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StreamSchemaPatchRequest stream schema patch request
//
// swagger:model StreamSchemaPatchRequest
type StreamSchemaPatchRequest struct {

	// primary key fields
	PrimaryKeyFields []string `json:"primaryKeyFields"`

	// sequence field
	SequenceField string `json:"sequenceField,omitempty"`

	// update method
	// Required: true
	// Enum: [TRUNCATE]
	UpdateMethod *string `json:"updateMethod"`
}

// Validate validates this stream schema patch request
func (m *StreamSchemaPatchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUpdateMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var streamSchemaPatchRequestTypeUpdateMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TRUNCATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		streamSchemaPatchRequestTypeUpdateMethodPropEnum = append(streamSchemaPatchRequestTypeUpdateMethodPropEnum, v)
	}
}

const (

	// StreamSchemaPatchRequestUpdateMethodTRUNCATE captures enum value "TRUNCATE"
	StreamSchemaPatchRequestUpdateMethodTRUNCATE string = "TRUNCATE"
)

// prop value enum
func (m *StreamSchemaPatchRequest) validateUpdateMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, streamSchemaPatchRequestTypeUpdateMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StreamSchemaPatchRequest) validateUpdateMethod(formats strfmt.Registry) error {

	if err := validate.Required("updateMethod", "body", m.UpdateMethod); err != nil {
		return err
	}

	// value enum
	if err := m.validateUpdateMethodEnum("updateMethod", "body", *m.UpdateMethod); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this stream schema patch request based on context it is used
func (m *StreamSchemaPatchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StreamSchemaPatchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StreamSchemaPatchRequest) UnmarshalBinary(b []byte) error {
	var res StreamSchemaPatchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

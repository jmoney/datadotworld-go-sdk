// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContributionDto contribution dto
//
// swagger:model ContributionDto
type ContributionDto struct {
	activitiesField []ContributionActivity

	// activity type
	// Required: true
	// Enum: [METADATA_EDIT RELATIONSHIP]
	ActivityType *string `json:"activityType"`

	// type
	// Required: true
	// Enum: [METADATA DATASET]
	Type *string `json:"type"`
}

// Activities gets the activities of this base type
func (m *ContributionDto) Activities() []ContributionActivity {
	return m.activitiesField
}

// SetActivities sets the activities of this base type
func (m *ContributionDto) SetActivities(val []ContributionActivity) {
	m.activitiesField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ContributionDto) UnmarshalJSON(raw []byte) error {
	var data struct {
		Activities json.RawMessage `json:"activities"`

		ActivityType *string `json:"activityType"`

		Type *string `json:"type"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	propActivities, err := UnmarshalContributionActivitySlice(bytes.NewBuffer(data.Activities), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result ContributionDto

	// activities
	result.activitiesField = propActivities

	// activityType
	result.ActivityType = data.ActivityType

	// type
	result.Type = data.Type

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ContributionDto) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		ActivityType *string `json:"activityType"`

		Type *string `json:"type"`
	}{

		ActivityType: m.ActivityType,

		Type: m.Type,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Activities []ContributionActivity `json:"activities"`
	}{

		Activities: m.activitiesField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this contribution dto
func (m *ContributionDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActivityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContributionDto) validateActivities(formats strfmt.Registry) error {

	if err := validate.Required("activities", "body", m.Activities()); err != nil {
		return err
	}

	for i := 0; i < len(m.Activities()); i++ {

		if err := m.activitiesField[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activities" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activities" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

var contributionDtoTypeActivityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["METADATA_EDIT","RELATIONSHIP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contributionDtoTypeActivityTypePropEnum = append(contributionDtoTypeActivityTypePropEnum, v)
	}
}

const (

	// ContributionDtoActivityTypeMETADATAEDIT captures enum value "METADATA_EDIT"
	ContributionDtoActivityTypeMETADATAEDIT string = "METADATA_EDIT"

	// ContributionDtoActivityTypeRELATIONSHIP captures enum value "RELATIONSHIP"
	ContributionDtoActivityTypeRELATIONSHIP string = "RELATIONSHIP"
)

// prop value enum
func (m *ContributionDto) validateActivityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contributionDtoTypeActivityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContributionDto) validateActivityType(formats strfmt.Registry) error {

	if err := validate.Required("activityType", "body", m.ActivityType); err != nil {
		return err
	}

	// value enum
	if err := m.validateActivityTypeEnum("activityType", "body", *m.ActivityType); err != nil {
		return err
	}

	return nil
}

var contributionDtoTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["METADATA","DATASET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contributionDtoTypeTypePropEnum = append(contributionDtoTypeTypePropEnum, v)
	}
}

const (

	// ContributionDtoTypeMETADATA captures enum value "METADATA"
	ContributionDtoTypeMETADATA string = "METADATA"

	// ContributionDtoTypeDATASET captures enum value "DATASET"
	ContributionDtoTypeDATASET string = "DATASET"
)

// prop value enum
func (m *ContributionDto) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, contributionDtoTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ContributionDto) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this contribution dto based on the context it is used
func (m *ContributionDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContributionDto) contextValidateActivities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Activities()); i++ {

		if err := m.activitiesField[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("activities" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("activities" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContributionDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContributionDto) UnmarshalBinary(b []byte) error {
	var res ContributionDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectionDto connection dto
//
// swagger:model ConnectionDto
type ConnectionDto struct {

	// Advanced properties
	AdvancedProperties map[string]string `json:"advancedProperties,omitempty"`

	// Database Credentials
	Credentials *DatabaseCredentials `json:"credentials,omitempty"`

	// Database/Schema Logical Name
	// Example: schemadw
	// Max Length: 256
	// Min Length: 0
	// Pattern: [\w\_]{0,}
	Database *string `json:"database,omitempty"`

	// Database Host
	// Example: dwserver.thinktank.com
	// Required: true
	Host *string `json:"host"`

	// Connection name
	// Example: Humanitarian_Aid
	// Max Length: 1024
	// Min Length: 0
	// Pattern: [\w\_\.-]{0,}
	Name *string `json:"name,omitempty"`

	// Database Port
	// Example: 5432
	// Maximum: 65535
	// Minimum: 1
	Port int32 `json:"port,omitempty"`

	// Properties such as auto commit, isolation level etc.
	Properties map[string]string `json:"properties,omitempty"`

	// ssh tunnel configuration
	SSHTunnel *SSHTunnel `json:"sshTunnel,omitempty"`

	// Is ssl required
	// Example: true
	SslRequired *bool `json:"sslRequired,omitempty"`

	// trusted server certificates
	// Max Length: 100000
	// Min Length: 0
	TrustedServerCertificates *string `json:"trustedServerCertificates,omitempty"`

	// Database Type
	// Example: ATHENA
	// Required: true
	Type *string `json:"type"`

	// Should server certificate be verified
	// Example: true
	VerifyServerCertificate *bool `json:"verifyServerCertificate,omitempty"`
}

// Validate validates this connection dto
func (m *ConnectionDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHTunnel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrustedServerCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectionDto) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if m.Credentials != nil {
		if err := m.Credentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectionDto) validateDatabase(formats strfmt.Registry) error {
	if swag.IsZero(m.Database) { // not required
		return nil
	}

	if err := validate.MinLength("database", "body", *m.Database, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("database", "body", *m.Database, 256); err != nil {
		return err
	}

	if err := validate.Pattern("database", "body", *m.Database, `[\w\_]{0,}`); err != nil {
		return err
	}

	return nil
}

func (m *ConnectionDto) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *ConnectionDto) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", *m.Name, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 1024); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", *m.Name, `[\w\_\.-]{0,}`); err != nil {
		return err
	}

	return nil
}

func (m *ConnectionDto) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("port", "body", int64(m.Port), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(m.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *ConnectionDto) validateSSHTunnel(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHTunnel) { // not required
		return nil
	}

	if m.SSHTunnel != nil {
		if err := m.SSHTunnel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshTunnel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshTunnel")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectionDto) validateTrustedServerCertificates(formats strfmt.Registry) error {
	if swag.IsZero(m.TrustedServerCertificates) { // not required
		return nil
	}

	if err := validate.MinLength("trustedServerCertificates", "body", *m.TrustedServerCertificates, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("trustedServerCertificates", "body", *m.TrustedServerCertificates, 100000); err != nil {
		return err
	}

	return nil
}

func (m *ConnectionDto) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this connection dto based on the context it is used
func (m *ConnectionDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHTunnel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectionDto) contextValidateCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.Credentials != nil {
		if err := m.Credentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("credentials")
			}
			return err
		}
	}

	return nil
}

func (m *ConnectionDto) contextValidateSSHTunnel(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHTunnel != nil {
		if err := m.SSHTunnel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshTunnel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshTunnel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectionDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectionDto) UnmarshalBinary(b []byte) error {
	var res ConnectionDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ViewRequestDto view request dto
//
// swagger:model ViewRequestDto
type ViewRequestDto struct {

	// base agent Id
	// Required: true
	BaseAgentID *string `json:"baseAgentId"`

	// base dataset Id
	// Required: true
	BaseDatasetID *string `json:"baseDatasetId"`

	// query Id
	// Format: uuid
	QueryID strfmt.UUID `json:"queryId,omitempty"`

	// query name
	// Required: true
	QueryName *string `json:"queryName"`

	// query text
	// Max Length: 10000
	// Min Length: 1
	QueryText string `json:"queryText,omitempty"`

	// query type
	// Required: true
	// Enum: [SPARQL SQL]
	QueryType *string `json:"queryType"`

	// run as agent Id
	// Required: true
	RunAsAgentID *string `json:"runAsAgentId"`

	// target agent Id
	// Required: true
	TargetAgentID *string `json:"targetAgentId"`

	// target dataset Id
	// Required: true
	TargetDatasetID *string `json:"targetDatasetId"`
}

// Validate validates this view request dto
func (m *ViewRequestDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseAgentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseDatasetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunAsAgentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetAgentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetDatasetID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ViewRequestDto) validateBaseAgentID(formats strfmt.Registry) error {

	if err := validate.Required("baseAgentId", "body", m.BaseAgentID); err != nil {
		return err
	}

	return nil
}

func (m *ViewRequestDto) validateBaseDatasetID(formats strfmt.Registry) error {

	if err := validate.Required("baseDatasetId", "body", m.BaseDatasetID); err != nil {
		return err
	}

	return nil
}

func (m *ViewRequestDto) validateQueryID(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryID) { // not required
		return nil
	}

	if err := validate.FormatOf("queryId", "body", "uuid", m.QueryID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ViewRequestDto) validateQueryName(formats strfmt.Registry) error {

	if err := validate.Required("queryName", "body", m.QueryName); err != nil {
		return err
	}

	return nil
}

func (m *ViewRequestDto) validateQueryText(formats strfmt.Registry) error {
	if swag.IsZero(m.QueryText) { // not required
		return nil
	}

	if err := validate.MinLength("queryText", "body", m.QueryText, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("queryText", "body", m.QueryText, 10000); err != nil {
		return err
	}

	return nil
}

var viewRequestDtoTypeQueryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SPARQL","SQL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewRequestDtoTypeQueryTypePropEnum = append(viewRequestDtoTypeQueryTypePropEnum, v)
	}
}

const (

	// ViewRequestDtoQueryTypeSPARQL captures enum value "SPARQL"
	ViewRequestDtoQueryTypeSPARQL string = "SPARQL"

	// ViewRequestDtoQueryTypeSQL captures enum value "SQL"
	ViewRequestDtoQueryTypeSQL string = "SQL"
)

// prop value enum
func (m *ViewRequestDto) validateQueryTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewRequestDtoTypeQueryTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewRequestDto) validateQueryType(formats strfmt.Registry) error {

	if err := validate.Required("queryType", "body", m.QueryType); err != nil {
		return err
	}

	// value enum
	if err := m.validateQueryTypeEnum("queryType", "body", *m.QueryType); err != nil {
		return err
	}

	return nil
}

func (m *ViewRequestDto) validateRunAsAgentID(formats strfmt.Registry) error {

	if err := validate.Required("runAsAgentId", "body", m.RunAsAgentID); err != nil {
		return err
	}

	return nil
}

func (m *ViewRequestDto) validateTargetAgentID(formats strfmt.Registry) error {

	if err := validate.Required("targetAgentId", "body", m.TargetAgentID); err != nil {
		return err
	}

	return nil
}

func (m *ViewRequestDto) validateTargetDatasetID(formats strfmt.Registry) error {

	if err := validate.Required("targetDatasetId", "body", m.TargetDatasetID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this view request dto based on context it is used
func (m *ViewRequestDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ViewRequestDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewRequestDto) UnmarshalBinary(b []byte) error {
	var res ViewRequestDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

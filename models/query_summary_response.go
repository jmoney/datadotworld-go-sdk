// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuerySummaryResponse query summary response
//
// swagger:model QuerySummaryResponse
type QuerySummaryResponse struct {

	// body
	Body string `json:"body,omitempty"`

	// created
	Created string `json:"created,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	ID string `json:"id,omitempty"`

	// language
	// Enum: [SPARQL SQL]
	Language string `json:"language,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// owner
	Owner string `json:"owner,omitempty"`

	// parameters
	Parameters map[string]QueryParameter `json:"parameters,omitempty"`

	// updated
	Updated string `json:"updated,omitempty"`

	// version
	Version string `json:"version,omitempty"`
}

// Validate validates this query summary response
func (m *QuerySummaryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var querySummaryResponseTypeLanguagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SPARQL","SQL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		querySummaryResponseTypeLanguagePropEnum = append(querySummaryResponseTypeLanguagePropEnum, v)
	}
}

const (

	// QuerySummaryResponseLanguageSPARQL captures enum value "SPARQL"
	QuerySummaryResponseLanguageSPARQL string = "SPARQL"

	// QuerySummaryResponseLanguageSQL captures enum value "SQL"
	QuerySummaryResponseLanguageSQL string = "SQL"
)

// prop value enum
func (m *QuerySummaryResponse) validateLanguageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, querySummaryResponseTypeLanguagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QuerySummaryResponse) validateLanguage(formats strfmt.Registry) error {
	if swag.IsZero(m.Language) { // not required
		return nil
	}

	// value enum
	if err := m.validateLanguageEnum("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

func (m *QuerySummaryResponse) validateParameters(formats strfmt.Registry) error {
	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	for k := range m.Parameters {

		if err := validate.Required("parameters"+"."+k, "body", m.Parameters[k]); err != nil {
			return err
		}
		if val, ok := m.Parameters[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parameters" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("parameters" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this query summary response based on the context it is used
func (m *QuerySummaryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParameters(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuerySummaryResponse) contextValidateParameters(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Parameters {

		if val, ok := m.Parameters[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuerySummaryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuerySummaryResponse) UnmarshalBinary(b []byte) error {
	var res QuerySummaryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CatalogConceptHydrationDto catalog concept hydration dto
//
// swagger:model CatalogConceptHydrationDto
type CatalogConceptHydrationDto struct {

	// agentid
	Agentid string `json:"agentid,omitempty"`

	// alt label
	AltLabel string `json:"altLabel,omitempty"`

	// concept hierarchy
	ConceptHierarchy []*ConceptEntry `json:"conceptHierarchy"`

	// created by
	CreatedBy *AgentHydrationDto `json:"createdBy,omitempty"`

	// iri
	Iri string `json:"iri,omitempty"`

	// pref label
	PrefLabel string `json:"prefLabel,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this catalog concept hydration dto
func (m *CatalogConceptHydrationDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConceptHierarchy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogConceptHydrationDto) validateConceptHierarchy(formats strfmt.Registry) error {
	if swag.IsZero(m.ConceptHierarchy) { // not required
		return nil
	}

	for i := 0; i < len(m.ConceptHierarchy); i++ {
		if swag.IsZero(m.ConceptHierarchy[i]) { // not required
			continue
		}

		if m.ConceptHierarchy[i] != nil {
			if err := m.ConceptHierarchy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conceptHierarchy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conceptHierarchy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogConceptHydrationDto) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *CatalogConceptHydrationDto) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this catalog concept hydration dto based on the context it is used
func (m *CatalogConceptHydrationDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConceptHierarchy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CatalogConceptHydrationDto) contextValidateConceptHierarchy(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConceptHierarchy); i++ {

		if m.ConceptHierarchy[i] != nil {
			if err := m.ConceptHierarchy[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conceptHierarchy" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conceptHierarchy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CatalogConceptHydrationDto) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {
		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CatalogConceptHydrationDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CatalogConceptHydrationDto) UnmarshalBinary(b []byte) error {
	var res CatalogConceptHydrationDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

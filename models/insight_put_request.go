// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InsightPutRequest insight put request
//
// swagger:model InsightPutRequest
type InsightPutRequest struct {

	// body
	// Required: true
	Body *InsightBody `json:"body"`

	// data source links
	DataSourceLinks []strfmt.URI `json:"dataSourceLinks"`

	// description
	// Max Length: 25000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// source link
	// Format: uri
	SourceLink strfmt.URI `json:"sourceLink,omitempty"`

	// thumbnail
	// Format: uri
	Thumbnail strfmt.URI `json:"thumbnail,omitempty"`

	// title
	// Required: true
	// Max Length: 128
	// Min Length: 1
	Title *string `json:"title"`
}

// Validate validates this insight put request
func (m *InsightPutRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSourceLinks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThumbnail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InsightPutRequest) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	if m.Body != nil {
		if err := m.Body.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

func (m *InsightPutRequest) validateDataSourceLinks(formats strfmt.Registry) error {
	if swag.IsZero(m.DataSourceLinks) { // not required
		return nil
	}

	for i := 0; i < len(m.DataSourceLinks); i++ {

		if err := validate.FormatOf("dataSourceLinks"+"."+strconv.Itoa(i), "body", "uri", m.DataSourceLinks[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *InsightPutRequest) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", *m.Description, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", *m.Description, 25000); err != nil {
		return err
	}

	return nil
}

func (m *InsightPutRequest) validateSourceLink(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceLink) { // not required
		return nil
	}

	if err := validate.FormatOf("sourceLink", "body", "uri", m.SourceLink.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InsightPutRequest) validateThumbnail(formats strfmt.Registry) error {
	if swag.IsZero(m.Thumbnail) { // not required
		return nil
	}

	if err := validate.FormatOf("thumbnail", "body", "uri", m.Thumbnail.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InsightPutRequest) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MinLength("title", "body", *m.Title, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", *m.Title, 128); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this insight put request based on the context it is used
func (m *InsightPutRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBody(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InsightPutRequest) contextValidateBody(ctx context.Context, formats strfmt.Registry) error {

	if m.Body != nil {
		if err := m.Body.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InsightPutRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InsightPutRequest) UnmarshalBinary(b []byte) error {
	var res InsightPutRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

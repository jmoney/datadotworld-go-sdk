// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionCreateRequest subscription create request
//
// swagger:model SubscriptionCreateRequest
type SubscriptionCreateRequest struct {

	// events
	// Required: true
	// Max Items: 50
	// Min Items: 1
	Events []string `json:"events"`
}

// Validate validates this subscription create request
func (m *SubscriptionCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var subscriptionCreateRequestEventsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ALL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionCreateRequestEventsItemsEnum = append(subscriptionCreateRequestEventsItemsEnum, v)
	}
}

func (m *SubscriptionCreateRequest) validateEventsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subscriptionCreateRequestEventsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SubscriptionCreateRequest) validateEvents(formats strfmt.Registry) error {

	if err := validate.Required("events", "body", m.Events); err != nil {
		return err
	}

	iEventsSize := int64(len(m.Events))

	if err := validate.MinItems("events", "body", iEventsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("events", "body", iEventsSize, 50); err != nil {
		return err
	}

	for i := 0; i < len(m.Events); i++ {

		// value enum
		if err := m.validateEventsItemsEnum("events"+"."+strconv.Itoa(i), "body", m.Events[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this subscription create request based on context it is used
func (m *SubscriptionCreateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionCreateRequest) UnmarshalBinary(b []byte) error {
	var res SubscriptionCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SimpleSearchRequest simple search request
//
// swagger:model SimpleSearchRequest
type SimpleSearchRequest struct {

	// Filter by categories.
	// Unique: true
	Category []string `json:"category"`

	// include community results
	IncludeCommunityResults *bool `json:"includeCommunityResults,omitempty"`

	// Filter by owners. Owners are identified by their IDs.
	// Unique: true
	Owner []string `json:"owner"`

	// query
	// Required: true
	Query *string `json:"query"`
}

// Validate validates this simple search request
func (m *SimpleSearchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var simpleSearchRequestCategoryItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["catalogAnalysis","catalogBusinessTerm","catalogDataType","catalogTable","collection","comment","dataset","datatable","file","insight","integration","project","query","unknownCatalogEntry"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		simpleSearchRequestCategoryItemsEnum = append(simpleSearchRequestCategoryItemsEnum, v)
	}
}

func (m *SimpleSearchRequest) validateCategoryItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, simpleSearchRequestCategoryItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SimpleSearchRequest) validateCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.Category) { // not required
		return nil
	}

	if err := validate.UniqueItems("category", "body", m.Category); err != nil {
		return err
	}

	for i := 0; i < len(m.Category); i++ {

		// value enum
		if err := m.validateCategoryItemsEnum("category"+"."+strconv.Itoa(i), "body", m.Category[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *SimpleSearchRequest) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if err := validate.UniqueItems("owner", "body", m.Owner); err != nil {
		return err
	}

	return nil
}

func (m *SimpleSearchRequest) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this simple search request based on context it is used
func (m *SimpleSearchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SimpleSearchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SimpleSearchRequest) UnmarshalBinary(b []byte) error {
	var res SimpleSearchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

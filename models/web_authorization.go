// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WebAuthorization web authorization
//
// swagger:model WebAuthorization
type WebAuthorization struct {

	// credentials
	// Max Length: 1024
	// Min Length: 1
	Credentials string `json:"credentials,omitempty"`

	// type
	// Required: true
	// Max Length: 50
	// Min Length: 0
	Type *string `json:"type"`
}

// Validate validates this web authorization
func (m *WebAuthorization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WebAuthorization) validateCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.Credentials) { // not required
		return nil
	}

	if err := validate.MinLength("credentials", "body", m.Credentials, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("credentials", "body", m.Credentials, 1024); err != nil {
		return err
	}

	return nil
}

func (m *WebAuthorization) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	if err := validate.MinLength("type", "body", *m.Type, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("type", "body", *m.Type, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this web authorization based on context it is used
func (m *WebAuthorization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WebAuthorization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WebAuthorization) UnmarshalBinary(b []byte) error {
	var res WebAuthorization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

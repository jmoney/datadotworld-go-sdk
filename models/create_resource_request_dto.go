// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateResourceRequestDto create resource request dto
//
// swagger:model CreateResourceRequestDto
type CreateResourceRequestDto struct {

	// contribution
	Contribution *ContributionDto `json:"contribution,omitempty"`

	// grantee party
	GranteeParty string `json:"granteeParty,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// resource
	// Required: true
	Resource *string `json:"resource"`

	// resource request type
	// Required: true
	ResourceRequestType *string `json:"resourceRequestType"`

	// transfer asset
	TransferAsset *TransferAssetDto `json:"transferAsset,omitempty"`
}

// Validate validates this create resource request dto
func (m *CreateResourceRequestDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContribution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceRequestType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferAsset(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateResourceRequestDto) validateContribution(formats strfmt.Registry) error {
	if swag.IsZero(m.Contribution) { // not required
		return nil
	}

	if m.Contribution != nil {
		if err := m.Contribution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contribution")
			}
			return err
		}
	}

	return nil
}

func (m *CreateResourceRequestDto) validateResource(formats strfmt.Registry) error {

	if err := validate.Required("resource", "body", m.Resource); err != nil {
		return err
	}

	return nil
}

func (m *CreateResourceRequestDto) validateResourceRequestType(formats strfmt.Registry) error {

	if err := validate.Required("resourceRequestType", "body", m.ResourceRequestType); err != nil {
		return err
	}

	return nil
}

func (m *CreateResourceRequestDto) validateTransferAsset(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferAsset) { // not required
		return nil
	}

	if m.TransferAsset != nil {
		if err := m.TransferAsset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transferAsset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transferAsset")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create resource request dto based on the context it is used
func (m *CreateResourceRequestDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContribution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransferAsset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateResourceRequestDto) contextValidateContribution(ctx context.Context, formats strfmt.Registry) error {

	if m.Contribution != nil {
		if err := m.Contribution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contribution")
			}
			return err
		}
	}

	return nil
}

func (m *CreateResourceRequestDto) contextValidateTransferAsset(ctx context.Context, formats strfmt.Registry) error {

	if m.TransferAsset != nil {
		if err := m.TransferAsset.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transferAsset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transferAsset")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateResourceRequestDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateResourceRequestDto) UnmarshalBinary(b []byte) error {
	var res CreateResourceRequestDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

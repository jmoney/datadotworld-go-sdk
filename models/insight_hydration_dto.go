// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InsightHydrationDto insight hydration dto
//
// swagger:model InsightHydrationDto
type InsightHydrationDto struct {

	// body
	Body string `json:"body,omitempty"`

	// created by
	CreatedBy *AgentHydrationDto `json:"createdBy,omitempty"`

	// data sources
	DataSources []strfmt.URI `json:"dataSources"`

	// dataset
	Dataset *DatasetHydrationDto `json:"dataset,omitempty"`

	// datasetid
	Datasetid string `json:"datasetid,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// insightid
	Insightid string `json:"insightid,omitempty"`

	// thumbnail
	// Format: uri
	Thumbnail strfmt.URI `json:"thumbnail,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// type
	Type string `json:"type,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`
}

// Validate validates this insight hydration dto
func (m *InsightHydrationDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThumbnail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InsightHydrationDto) validateCreatedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedBy) { // not required
		return nil
	}

	if m.CreatedBy != nil {
		if err := m.CreatedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *InsightHydrationDto) validateDataSources(formats strfmt.Registry) error {
	if swag.IsZero(m.DataSources) { // not required
		return nil
	}

	for i := 0; i < len(m.DataSources); i++ {

		if err := validate.FormatOf("dataSources"+"."+strconv.Itoa(i), "body", "uri", m.DataSources[i].String(), formats); err != nil {
			return err
		}

	}

	return nil
}

func (m *InsightHydrationDto) validateDataset(formats strfmt.Registry) error {
	if swag.IsZero(m.Dataset) { // not required
		return nil
	}

	if m.Dataset != nil {
		if err := m.Dataset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataset")
			}
			return err
		}
	}

	return nil
}

func (m *InsightHydrationDto) validateThumbnail(formats strfmt.Registry) error {
	if swag.IsZero(m.Thumbnail) { // not required
		return nil
	}

	if err := validate.FormatOf("thumbnail", "body", "uri", m.Thumbnail.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InsightHydrationDto) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this insight hydration dto based on the context it is used
func (m *InsightHydrationDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InsightHydrationDto) contextValidateCreatedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedBy != nil {
		if err := m.CreatedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createdBy")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createdBy")
			}
			return err
		}
	}

	return nil
}

func (m *InsightHydrationDto) contextValidateDataset(ctx context.Context, formats strfmt.Registry) error {

	if m.Dataset != nil {
		if err := m.Dataset.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataset")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InsightHydrationDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InsightHydrationDto) UnmarshalBinary(b []byte) error {
	var res InsightHydrationDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

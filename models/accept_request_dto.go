// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AcceptRequestDto accept request dto
//
// swagger:model AcceptRequestDto
type AcceptRequestDto struct {

	// The destination catalog collections belonging to the organization that the resource is being transferred to
	CollectionIds []string `json:"collectionIds"`

	// User name and unique identifier of the user or organization a resource belongs to. Only required for dataset authorization requests.
	Owner string `json:"owner,omitempty"`

	// ID of the request to accept.
	// Required: true
	// Format: uuid
	Requestid *strfmt.UUID `json:"requestid"`

	// Unique identifier of the resource. Only required for dataset authorization requests.
	Resourceid string `json:"resourceid,omitempty"`
}

// Validate validates this accept request dto
func (m *AcceptRequestDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRequestid(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AcceptRequestDto) validateRequestid(formats strfmt.Registry) error {

	if err := validate.Required("requestid", "body", m.Requestid); err != nil {
		return err
	}

	if err := validate.FormatOf("requestid", "body", "uuid", m.Requestid.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this accept request dto based on context it is used
func (m *AcceptRequestDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AcceptRequestDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AcceptRequestDto) UnmarshalBinary(b []byte) error {
	var res AcceptRequestDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

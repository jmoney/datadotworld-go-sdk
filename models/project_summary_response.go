// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectSummaryResponse project summary response
//
// swagger:model ProjectSummaryResponse
type ProjectSummaryResponse struct {

	// access level
	// Required: true
	// Enum: [NONE DISCOVER READ WRITE ADMIN]
	AccessLevel *string `json:"accessLevel"`

	// asset status
	AssetStatus *AssetStatus `json:"assetStatus,omitempty"`

	// created
	// Required: true
	Created *string `json:"created"`

	// files
	Files []*FileSummaryResponse `json:"files"`

	// id
	// Required: true
	ID *string `json:"id"`

	// license
	// Enum: [CC BY-NC CC BY-NC-ND CC BY-NC-SA CC BY-ND CC BY-ND 3.0 CC-0 CC-BY CC-BY 3.0 CC-BY 3.0 AU CC-BY 3.0 IGO CC-BY 3.0 NZ CC-BY-IGO CC-BY-NC 3.0 CC-BY-NC 3.0 NZ CC-BY-NC-ND-NZ-3.0 CC-BY-NC-SA 3.0 CC-BY-NC-SA 3.0 NZ CC-BY-SA CC-BY-SA 3.0 CC-BY-SA 3.0 NZ CDLA-Permissive-1.0 CDLA-Sharing-1.0 Italian-ODL MIT License ODC-BY ODC-ODbL OGL OGL-Canada OGL-Nova Scotia OGL-UK OSODL Other PDDL Public Domain]
	License string `json:"license,omitempty"`

	// linked datasets
	LinkedDatasets []*LinkedDatasetSummaryResponse `json:"linkedDatasets"`

	// objective
	// Max Length: 120
	// Min Length: 0
	Objective *string `json:"objective,omitempty"`

	// owner
	// Required: true
	Owner *string `json:"owner"`

	// properties
	Properties map[string]interface{} `json:"properties,omitempty"`

	// status
	// Required: true
	// Enum: [NEW INPROGRESS LOADED SYSTEMERROR]
	Status *string `json:"status"`

	// summary
	// Max Length: 25000
	// Min Length: 0
	Summary *string `json:"summary,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// title
	// Required: true
	// Max Length: 60
	// Min Length: 1
	Title *string `json:"title"`

	// updated
	// Required: true
	Updated *string `json:"updated"`

	// version
	// Required: true
	Version *string `json:"version"`

	// visibility
	// Required: true
	// Enum: [OPEN PRIVATE]
	Visibility *string `json:"visibility"`
}

// Validate validates this project summary response
func (m *ProjectSummaryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssetStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkedDatasets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjective(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var projectSummaryResponseTypeAccessLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","DISCOVER","READ","WRITE","ADMIN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectSummaryResponseTypeAccessLevelPropEnum = append(projectSummaryResponseTypeAccessLevelPropEnum, v)
	}
}

const (

	// ProjectSummaryResponseAccessLevelNONE captures enum value "NONE"
	ProjectSummaryResponseAccessLevelNONE string = "NONE"

	// ProjectSummaryResponseAccessLevelDISCOVER captures enum value "DISCOVER"
	ProjectSummaryResponseAccessLevelDISCOVER string = "DISCOVER"

	// ProjectSummaryResponseAccessLevelREAD captures enum value "READ"
	ProjectSummaryResponseAccessLevelREAD string = "READ"

	// ProjectSummaryResponseAccessLevelWRITE captures enum value "WRITE"
	ProjectSummaryResponseAccessLevelWRITE string = "WRITE"

	// ProjectSummaryResponseAccessLevelADMIN captures enum value "ADMIN"
	ProjectSummaryResponseAccessLevelADMIN string = "ADMIN"
)

// prop value enum
func (m *ProjectSummaryResponse) validateAccessLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectSummaryResponseTypeAccessLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectSummaryResponse) validateAccessLevel(formats strfmt.Registry) error {

	if err := validate.Required("accessLevel", "body", m.AccessLevel); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessLevelEnum("accessLevel", "body", *m.AccessLevel); err != nil {
		return err
	}

	return nil
}

func (m *ProjectSummaryResponse) validateAssetStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetStatus) { // not required
		return nil
	}

	if m.AssetStatus != nil {
		if err := m.AssetStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assetStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectSummaryResponse) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *ProjectSummaryResponse) validateFiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Files) { // not required
		return nil
	}

	for i := 0; i < len(m.Files); i++ {
		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {
			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectSummaryResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var projectSummaryResponseTypeLicensePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CC BY-NC","CC BY-NC-ND","CC BY-NC-SA","CC BY-ND","CC BY-ND 3.0","CC-0","CC-BY","CC-BY 3.0","CC-BY 3.0 AU","CC-BY 3.0 IGO","CC-BY 3.0 NZ","CC-BY-IGO","CC-BY-NC 3.0","CC-BY-NC 3.0 NZ","CC-BY-NC-ND-NZ-3.0","CC-BY-NC-SA 3.0","CC-BY-NC-SA 3.0 NZ","CC-BY-SA","CC-BY-SA 3.0","CC-BY-SA 3.0 NZ","CDLA-Permissive-1.0","CDLA-Sharing-1.0","Italian-ODL","MIT License","ODC-BY","ODC-ODbL","OGL","OGL-Canada","OGL-Nova Scotia","OGL-UK","OSODL","Other","PDDL","Public Domain"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectSummaryResponseTypeLicensePropEnum = append(projectSummaryResponseTypeLicensePropEnum, v)
	}
}

const (

	// ProjectSummaryResponseLicenseCCBYDashNC captures enum value "CC BY-NC"
	ProjectSummaryResponseLicenseCCBYDashNC string = "CC BY-NC"

	// ProjectSummaryResponseLicenseCCBYDashNCDashND captures enum value "CC BY-NC-ND"
	ProjectSummaryResponseLicenseCCBYDashNCDashND string = "CC BY-NC-ND"

	// ProjectSummaryResponseLicenseCCBYDashNCDashSA captures enum value "CC BY-NC-SA"
	ProjectSummaryResponseLicenseCCBYDashNCDashSA string = "CC BY-NC-SA"

	// ProjectSummaryResponseLicenseCCBYDashND captures enum value "CC BY-ND"
	ProjectSummaryResponseLicenseCCBYDashND string = "CC BY-ND"

	// ProjectSummaryResponseLicenseCCBYDashND3Dot0 captures enum value "CC BY-ND 3.0"
	ProjectSummaryResponseLicenseCCBYDashND3Dot0 string = "CC BY-ND 3.0"

	// ProjectSummaryResponseLicenseCCDash0 captures enum value "CC-0"
	ProjectSummaryResponseLicenseCCDash0 string = "CC-0"

	// ProjectSummaryResponseLicenseCCDashBY captures enum value "CC-BY"
	ProjectSummaryResponseLicenseCCDashBY string = "CC-BY"

	// ProjectSummaryResponseLicenseCCDashBY3Dot0 captures enum value "CC-BY 3.0"
	ProjectSummaryResponseLicenseCCDashBY3Dot0 string = "CC-BY 3.0"

	// ProjectSummaryResponseLicenseCCDashBY3Dot0AU captures enum value "CC-BY 3.0 AU"
	ProjectSummaryResponseLicenseCCDashBY3Dot0AU string = "CC-BY 3.0 AU"

	// ProjectSummaryResponseLicenseCCDashBY3Dot0IGO captures enum value "CC-BY 3.0 IGO"
	ProjectSummaryResponseLicenseCCDashBY3Dot0IGO string = "CC-BY 3.0 IGO"

	// ProjectSummaryResponseLicenseCCDashBY3Dot0NZ captures enum value "CC-BY 3.0 NZ"
	ProjectSummaryResponseLicenseCCDashBY3Dot0NZ string = "CC-BY 3.0 NZ"

	// ProjectSummaryResponseLicenseCCDashBYDashIGO captures enum value "CC-BY-IGO"
	ProjectSummaryResponseLicenseCCDashBYDashIGO string = "CC-BY-IGO"

	// ProjectSummaryResponseLicenseCCDashBYDashNC3Dot0 captures enum value "CC-BY-NC 3.0"
	ProjectSummaryResponseLicenseCCDashBYDashNC3Dot0 string = "CC-BY-NC 3.0"

	// ProjectSummaryResponseLicenseCCDashBYDashNC3Dot0NZ captures enum value "CC-BY-NC 3.0 NZ"
	ProjectSummaryResponseLicenseCCDashBYDashNC3Dot0NZ string = "CC-BY-NC 3.0 NZ"

	// ProjectSummaryResponseLicenseCCDashBYDashNCDashNDDashNZDash3Dot0 captures enum value "CC-BY-NC-ND-NZ-3.0"
	ProjectSummaryResponseLicenseCCDashBYDashNCDashNDDashNZDash3Dot0 string = "CC-BY-NC-ND-NZ-3.0"

	// ProjectSummaryResponseLicenseCCDashBYDashNCDashSA3Dot0 captures enum value "CC-BY-NC-SA 3.0"
	ProjectSummaryResponseLicenseCCDashBYDashNCDashSA3Dot0 string = "CC-BY-NC-SA 3.0"

	// ProjectSummaryResponseLicenseCCDashBYDashNCDashSA3Dot0NZ captures enum value "CC-BY-NC-SA 3.0 NZ"
	ProjectSummaryResponseLicenseCCDashBYDashNCDashSA3Dot0NZ string = "CC-BY-NC-SA 3.0 NZ"

	// ProjectSummaryResponseLicenseCCDashBYDashSA captures enum value "CC-BY-SA"
	ProjectSummaryResponseLicenseCCDashBYDashSA string = "CC-BY-SA"

	// ProjectSummaryResponseLicenseCCDashBYDashSA3Dot0 captures enum value "CC-BY-SA 3.0"
	ProjectSummaryResponseLicenseCCDashBYDashSA3Dot0 string = "CC-BY-SA 3.0"

	// ProjectSummaryResponseLicenseCCDashBYDashSA3Dot0NZ captures enum value "CC-BY-SA 3.0 NZ"
	ProjectSummaryResponseLicenseCCDashBYDashSA3Dot0NZ string = "CC-BY-SA 3.0 NZ"

	// ProjectSummaryResponseLicenseCDLADashPermissiveDash1Dot0 captures enum value "CDLA-Permissive-1.0"
	ProjectSummaryResponseLicenseCDLADashPermissiveDash1Dot0 string = "CDLA-Permissive-1.0"

	// ProjectSummaryResponseLicenseCDLADashSharingDash1Dot0 captures enum value "CDLA-Sharing-1.0"
	ProjectSummaryResponseLicenseCDLADashSharingDash1Dot0 string = "CDLA-Sharing-1.0"

	// ProjectSummaryResponseLicenseItalianDashODL captures enum value "Italian-ODL"
	ProjectSummaryResponseLicenseItalianDashODL string = "Italian-ODL"

	// ProjectSummaryResponseLicenseMITLicense captures enum value "MIT License"
	ProjectSummaryResponseLicenseMITLicense string = "MIT License"

	// ProjectSummaryResponseLicenseODCDashBY captures enum value "ODC-BY"
	ProjectSummaryResponseLicenseODCDashBY string = "ODC-BY"

	// ProjectSummaryResponseLicenseODCDashODbL captures enum value "ODC-ODbL"
	ProjectSummaryResponseLicenseODCDashODbL string = "ODC-ODbL"

	// ProjectSummaryResponseLicenseOGL captures enum value "OGL"
	ProjectSummaryResponseLicenseOGL string = "OGL"

	// ProjectSummaryResponseLicenseOGLDashCanada captures enum value "OGL-Canada"
	ProjectSummaryResponseLicenseOGLDashCanada string = "OGL-Canada"

	// ProjectSummaryResponseLicenseOGLDashNovaScotia captures enum value "OGL-Nova Scotia"
	ProjectSummaryResponseLicenseOGLDashNovaScotia string = "OGL-Nova Scotia"

	// ProjectSummaryResponseLicenseOGLDashUK captures enum value "OGL-UK"
	ProjectSummaryResponseLicenseOGLDashUK string = "OGL-UK"

	// ProjectSummaryResponseLicenseOSODL captures enum value "OSODL"
	ProjectSummaryResponseLicenseOSODL string = "OSODL"

	// ProjectSummaryResponseLicenseOther captures enum value "Other"
	ProjectSummaryResponseLicenseOther string = "Other"

	// ProjectSummaryResponseLicensePDDL captures enum value "PDDL"
	ProjectSummaryResponseLicensePDDL string = "PDDL"

	// ProjectSummaryResponseLicensePublicDomain captures enum value "Public Domain"
	ProjectSummaryResponseLicensePublicDomain string = "Public Domain"
)

// prop value enum
func (m *ProjectSummaryResponse) validateLicenseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectSummaryResponseTypeLicensePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectSummaryResponse) validateLicense(formats strfmt.Registry) error {
	if swag.IsZero(m.License) { // not required
		return nil
	}

	// value enum
	if err := m.validateLicenseEnum("license", "body", m.License); err != nil {
		return err
	}

	return nil
}

func (m *ProjectSummaryResponse) validateLinkedDatasets(formats strfmt.Registry) error {
	if swag.IsZero(m.LinkedDatasets) { // not required
		return nil
	}

	for i := 0; i < len(m.LinkedDatasets); i++ {
		if swag.IsZero(m.LinkedDatasets[i]) { // not required
			continue
		}

		if m.LinkedDatasets[i] != nil {
			if err := m.LinkedDatasets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("linkedDatasets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("linkedDatasets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectSummaryResponse) validateObjective(formats strfmt.Registry) error {
	if swag.IsZero(m.Objective) { // not required
		return nil
	}

	if err := validate.MinLength("objective", "body", *m.Objective, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("objective", "body", *m.Objective, 120); err != nil {
		return err
	}

	return nil
}

func (m *ProjectSummaryResponse) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	return nil
}

var projectSummaryResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEW","INPROGRESS","LOADED","SYSTEMERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectSummaryResponseTypeStatusPropEnum = append(projectSummaryResponseTypeStatusPropEnum, v)
	}
}

const (

	// ProjectSummaryResponseStatusNEW captures enum value "NEW"
	ProjectSummaryResponseStatusNEW string = "NEW"

	// ProjectSummaryResponseStatusINPROGRESS captures enum value "INPROGRESS"
	ProjectSummaryResponseStatusINPROGRESS string = "INPROGRESS"

	// ProjectSummaryResponseStatusLOADED captures enum value "LOADED"
	ProjectSummaryResponseStatusLOADED string = "LOADED"

	// ProjectSummaryResponseStatusSYSTEMERROR captures enum value "SYSTEMERROR"
	ProjectSummaryResponseStatusSYSTEMERROR string = "SYSTEMERROR"
)

// prop value enum
func (m *ProjectSummaryResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectSummaryResponseTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectSummaryResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *ProjectSummaryResponse) validateSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.Summary) { // not required
		return nil
	}

	if err := validate.MinLength("summary", "body", *m.Summary, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("summary", "body", *m.Summary, 25000); err != nil {
		return err
	}

	return nil
}

func (m *ProjectSummaryResponse) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MinLength("title", "body", *m.Title, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", *m.Title, 60); err != nil {
		return err
	}

	return nil
}

func (m *ProjectSummaryResponse) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("updated", "body", m.Updated); err != nil {
		return err
	}

	return nil
}

func (m *ProjectSummaryResponse) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

var projectSummaryResponseTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPEN","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectSummaryResponseTypeVisibilityPropEnum = append(projectSummaryResponseTypeVisibilityPropEnum, v)
	}
}

const (

	// ProjectSummaryResponseVisibilityOPEN captures enum value "OPEN"
	ProjectSummaryResponseVisibilityOPEN string = "OPEN"

	// ProjectSummaryResponseVisibilityPRIVATE captures enum value "PRIVATE"
	ProjectSummaryResponseVisibilityPRIVATE string = "PRIVATE"
)

// prop value enum
func (m *ProjectSummaryResponse) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectSummaryResponseTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectSummaryResponse) validateVisibility(formats strfmt.Registry) error {

	if err := validate.Required("visibility", "body", m.Visibility); err != nil {
		return err
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", *m.Visibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this project summary response based on the context it is used
func (m *ProjectSummaryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssetStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinkedDatasets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectSummaryResponse) contextValidateAssetStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.AssetStatus != nil {
		if err := m.AssetStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assetStatus")
			}
			return err
		}
	}

	return nil
}

func (m *ProjectSummaryResponse) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Files); i++ {

		if m.Files[i] != nil {
			if err := m.Files[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectSummaryResponse) contextValidateLinkedDatasets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LinkedDatasets); i++ {

		if m.LinkedDatasets[i] != nil {
			if err := m.LinkedDatasets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("linkedDatasets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("linkedDatasets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectSummaryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectSummaryResponse) UnmarshalBinary(b []byte) error {
	var res ProjectSummaryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MetadataResourceDto metadata resource dto
//
// swagger:model MetadataResourceDto
type MetadataResourceDto struct {

	// asset status
	AssetStatus *AssetStatus `json:"assetStatus,omitempty"`

	// category
	Category string `json:"category,omitempty"`

	// collections
	Collections []*CatalogID `json:"collections"`

	// column index
	ColumnIndex int32 `json:"columnIndex,omitempty"`

	// created
	// Required: true
	// Format: date-time
	Created *strfmt.DateTime `json:"created"`

	// data type
	DataType string `json:"dataType,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// encoded iri
	EncodedIri string `json:"encodedIri,omitempty"`

	// external urls
	ExternalUrls []string `json:"externalUrls"`

	// id
	// Required: true
	ID *string `json:"id"`

	// owner
	// Required: true
	Owner *string `json:"owner"`

	// properties
	Properties map[string]interface{} `json:"properties,omitempty"`

	// relationship types
	// Unique: true
	RelationshipTypes []string `json:"relationshipTypes"`

	// root parent type iri
	RootParentTypeIri string `json:"rootParentTypeIri,omitempty"`

	// root parent type label
	RootParentTypeLabel string `json:"rootParentTypeLabel,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`

	// table
	Table *TableID `json:"table,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// title
	Title string `json:"title,omitempty"`

	// type iri
	TypeIri string `json:"typeIri,omitempty"`

	// type label
	TypeLabel string `json:"typeLabel,omitempty"`

	// updated
	// Format: date-time
	Updated strfmt.DateTime `json:"updated,omitempty"`

	// url
	// Format: uri
	URL strfmt.URI `json:"url,omitempty"`

	// visibility
	// Required: true
	// Enum: [DISCOVERABLE OPEN PRIVATE]
	Visibility *string `json:"visibility"`
}

// Validate validates this metadata resource dto
func (m *MetadataResourceDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAssetStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelationshipTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataResourceDto) validateAssetStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AssetStatus) { // not required
		return nil
	}

	if m.AssetStatus != nil {
		if err := m.AssetStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assetStatus")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataResourceDto) validateCollections(formats strfmt.Registry) error {
	if swag.IsZero(m.Collections) { // not required
		return nil
	}

	for i := 0; i < len(m.Collections); i++ {
		if swag.IsZero(m.Collections[i]) { // not required
			continue
		}

		if m.Collections[i] != nil {
			if err := m.Collections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("collections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("collections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MetadataResourceDto) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	if err := validate.FormatOf("created", "body", "date-time", m.Created.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MetadataResourceDto) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *MetadataResourceDto) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	return nil
}

func (m *MetadataResourceDto) validateRelationshipTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.RelationshipTypes) { // not required
		return nil
	}

	if err := validate.UniqueItems("relationshipTypes", "body", m.RelationshipTypes); err != nil {
		return err
	}

	return nil
}

func (m *MetadataResourceDto) validateTable(formats strfmt.Registry) error {
	if swag.IsZero(m.Table) { // not required
		return nil
	}

	if m.Table != nil {
		if err := m.Table.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("table")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataResourceDto) validateUpdated(formats strfmt.Registry) error {
	if swag.IsZero(m.Updated) { // not required
		return nil
	}

	if err := validate.FormatOf("updated", "body", "date-time", m.Updated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MetadataResourceDto) validateURL(formats strfmt.Registry) error {
	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.FormatOf("url", "body", "uri", m.URL.String(), formats); err != nil {
		return err
	}

	return nil
}

var metadataResourceDtoTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DISCOVERABLE","OPEN","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metadataResourceDtoTypeVisibilityPropEnum = append(metadataResourceDtoTypeVisibilityPropEnum, v)
	}
}

const (

	// MetadataResourceDtoVisibilityDISCOVERABLE captures enum value "DISCOVERABLE"
	MetadataResourceDtoVisibilityDISCOVERABLE string = "DISCOVERABLE"

	// MetadataResourceDtoVisibilityOPEN captures enum value "OPEN"
	MetadataResourceDtoVisibilityOPEN string = "OPEN"

	// MetadataResourceDtoVisibilityPRIVATE captures enum value "PRIVATE"
	MetadataResourceDtoVisibilityPRIVATE string = "PRIVATE"
)

// prop value enum
func (m *MetadataResourceDto) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, metadataResourceDtoTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MetadataResourceDto) validateVisibility(formats strfmt.Registry) error {

	if err := validate.Required("visibility", "body", m.Visibility); err != nil {
		return err
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", *m.Visibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this metadata resource dto based on the context it is used
func (m *MetadataResourceDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAssetStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCollections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTable(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MetadataResourceDto) contextValidateAssetStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.AssetStatus != nil {
		if err := m.AssetStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("assetStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("assetStatus")
			}
			return err
		}
	}

	return nil
}

func (m *MetadataResourceDto) contextValidateCollections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Collections); i++ {

		if m.Collections[i] != nil {
			if err := m.Collections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("collections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("collections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MetadataResourceDto) contextValidateTable(ctx context.Context, formats strfmt.Registry) error {

	if m.Table != nil {
		if err := m.Table.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("table")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("table")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MetadataResourceDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MetadataResourceDto) UnmarshalBinary(b []byte) error {
	var res MetadataResourceDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RdfTerm rdf term
//
// swagger:model RdfTerm
type RdfTerm struct {

	// datatype
	// Read Only: true
	Datatype string `json:"datatype,omitempty"`

	// type
	// Required: true
	// Enum: [literal uri]
	Type *string `json:"type"`

	// value
	// Required: true
	Value *string `json:"value"`

	// xml lang
	// Read Only: true
	XMLLang string `json:"xml:lang,omitempty"`
}

// Validate validates this rdf term
func (m *RdfTerm) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rdfTermTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["literal","uri"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rdfTermTypeTypePropEnum = append(rdfTermTypeTypePropEnum, v)
	}
}

const (

	// RdfTermTypeLiteral captures enum value "literal"
	RdfTermTypeLiteral string = "literal"

	// RdfTermTypeURI captures enum value "uri"
	RdfTermTypeURI string = "uri"
)

// prop value enum
func (m *RdfTerm) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rdfTermTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RdfTerm) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *RdfTerm) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this rdf term based on the context it is used
func (m *RdfTerm) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDatatype(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateXMLLang(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RdfTerm) contextValidateDatatype(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "datatype", "body", string(m.Datatype)); err != nil {
		return err
	}

	return nil
}

func (m *RdfTerm) contextValidateXMLLang(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "xml:lang", "body", string(m.XMLLang)); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RdfTerm) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RdfTerm) UnmarshalBinary(b []byte) error {
	var res RdfTerm
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

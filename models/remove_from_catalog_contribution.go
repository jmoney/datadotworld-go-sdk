// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemoveFromCatalogContribution remove from catalog contribution
//
// swagger:model RemoveFromCatalogContribution
type RemoveFromCatalogContribution struct {
	contributionHydratablesField []*ContributionHydratable

	// catalog iri
	// Required: true
	CatalogIri *string `json:"catalogIri"`

	// entry iri
	// Required: true
	EntryIri *string `json:"entryIri"`

	// entry type
	// Required: true
	EntryType *string `json:"entryType"`

	// override type
	// Enum: [SET ADD REMOVE]
	OverrideType string `json:"overrideType,omitempty"`
}

// ContributionHydratables gets the contribution hydratables of this subtype
func (m *RemoveFromCatalogContribution) ContributionHydratables() []*ContributionHydratable {
	return m.contributionHydratablesField
}

// SetContributionHydratables sets the contribution hydratables of this subtype
func (m *RemoveFromCatalogContribution) SetContributionHydratables(val []*ContributionHydratable) {
	m.contributionHydratablesField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *RemoveFromCatalogContribution) UnmarshalJSON(raw []byte) error {
	var data struct {

		// catalog iri
		// Required: true
		CatalogIri *string `json:"catalogIri"`

		// entry iri
		// Required: true
		EntryIri *string `json:"entryIri"`

		// entry type
		// Required: true
		EntryType *string `json:"entryType"`

		// override type
		// Enum: [SET ADD REMOVE]
		OverrideType string `json:"overrideType,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ContributionHydratables []*ContributionHydratable `json:"contributionHydratables"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result RemoveFromCatalogContribution

	result.contributionHydratablesField = base.ContributionHydratables

	result.CatalogIri = data.CatalogIri
	result.EntryIri = data.EntryIri
	result.EntryType = data.EntryType
	result.OverrideType = data.OverrideType

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m RemoveFromCatalogContribution) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// catalog iri
		// Required: true
		CatalogIri *string `json:"catalogIri"`

		// entry iri
		// Required: true
		EntryIri *string `json:"entryIri"`

		// entry type
		// Required: true
		EntryType *string `json:"entryType"`

		// override type
		// Enum: [SET ADD REMOVE]
		OverrideType string `json:"overrideType,omitempty"`
	}{

		CatalogIri: m.CatalogIri,

		EntryIri: m.EntryIri,

		EntryType: m.EntryType,

		OverrideType: m.OverrideType,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ContributionHydratables []*ContributionHydratable `json:"contributionHydratables"`
	}{

		ContributionHydratables: m.ContributionHydratables(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this remove from catalog contribution
func (m *RemoveFromCatalogContribution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContributionHydratables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCatalogIri(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntryIri(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntryType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoveFromCatalogContribution) validateContributionHydratables(formats strfmt.Registry) error {

	if swag.IsZero(m.ContributionHydratables()) { // not required
		return nil
	}

	for i := 0; i < len(m.ContributionHydratables()); i++ {
		if swag.IsZero(m.contributionHydratablesField[i]) { // not required
			continue
		}

		if m.contributionHydratablesField[i] != nil {
			if err := m.contributionHydratablesField[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contributionHydratables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contributionHydratables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RemoveFromCatalogContribution) validateCatalogIri(formats strfmt.Registry) error {

	if err := validate.Required("catalogIri", "body", m.CatalogIri); err != nil {
		return err
	}

	return nil
}

func (m *RemoveFromCatalogContribution) validateEntryIri(formats strfmt.Registry) error {

	if err := validate.Required("entryIri", "body", m.EntryIri); err != nil {
		return err
	}

	return nil
}

func (m *RemoveFromCatalogContribution) validateEntryType(formats strfmt.Registry) error {

	if err := validate.Required("entryType", "body", m.EntryType); err != nil {
		return err
	}

	return nil
}

var removeFromCatalogContributionTypeOverrideTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SET","ADD","REMOVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		removeFromCatalogContributionTypeOverrideTypePropEnum = append(removeFromCatalogContributionTypeOverrideTypePropEnum, v)
	}
}

// property enum
func (m *RemoveFromCatalogContribution) validateOverrideTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, removeFromCatalogContributionTypeOverrideTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RemoveFromCatalogContribution) validateOverrideType(formats strfmt.Registry) error {

	if swag.IsZero(m.OverrideType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOverrideTypeEnum("overrideType", "body", m.OverrideType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this remove from catalog contribution based on the context it is used
func (m *RemoveFromCatalogContribution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContributionHydratables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoveFromCatalogContribution) contextValidateContributionHydratables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContributionHydratables()); i++ {

		if m.contributionHydratablesField[i] != nil {
			if err := m.contributionHydratablesField[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contributionHydratables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contributionHydratables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemoveFromCatalogContribution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoveFromCatalogContribution) UnmarshalBinary(b []byte) error {
	var res RemoveFromCatalogContribution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

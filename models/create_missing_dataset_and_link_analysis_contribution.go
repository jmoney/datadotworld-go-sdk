// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMissingDatasetAndLinkAnalysisContribution create missing dataset and link analysis contribution
//
// swagger:model CreateMissingDatasetAndLinkAnalysisContribution
type CreateMissingDatasetAndLinkAnalysisContribution struct {
	contributionHydratablesField []*ContributionHydratable

	// agent Id
	// Required: true
	AgentID *string `json:"agentId"`

	// analysis iri
	// Required: true
	AnalysisIri *string `json:"analysisIri"`

	// dataset Id
	// Required: true
	DatasetID *string `json:"datasetId"`

	// dataset iri
	DatasetIri string `json:"datasetIri,omitempty"`

	// override type
	// Enum: [SET ADD REMOVE]
	OverrideType string `json:"overrideType,omitempty"`

	// title
	// Required: true
	Title *string `json:"title"`
}

// ContributionHydratables gets the contribution hydratables of this subtype
func (m *CreateMissingDatasetAndLinkAnalysisContribution) ContributionHydratables() []*ContributionHydratable {
	return m.contributionHydratablesField
}

// SetContributionHydratables sets the contribution hydratables of this subtype
func (m *CreateMissingDatasetAndLinkAnalysisContribution) SetContributionHydratables(val []*ContributionHydratable) {
	m.contributionHydratablesField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *CreateMissingDatasetAndLinkAnalysisContribution) UnmarshalJSON(raw []byte) error {
	var data struct {

		// agent Id
		// Required: true
		AgentID *string `json:"agentId"`

		// analysis iri
		// Required: true
		AnalysisIri *string `json:"analysisIri"`

		// dataset Id
		// Required: true
		DatasetID *string `json:"datasetId"`

		// dataset iri
		DatasetIri string `json:"datasetIri,omitempty"`

		// override type
		// Enum: [SET ADD REMOVE]
		OverrideType string `json:"overrideType,omitempty"`

		// title
		// Required: true
		Title *string `json:"title"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ContributionHydratables []*ContributionHydratable `json:"contributionHydratables"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result CreateMissingDatasetAndLinkAnalysisContribution

	result.contributionHydratablesField = base.ContributionHydratables

	result.AgentID = data.AgentID
	result.AnalysisIri = data.AnalysisIri
	result.DatasetID = data.DatasetID
	result.DatasetIri = data.DatasetIri
	result.OverrideType = data.OverrideType
	result.Title = data.Title

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m CreateMissingDatasetAndLinkAnalysisContribution) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// agent Id
		// Required: true
		AgentID *string `json:"agentId"`

		// analysis iri
		// Required: true
		AnalysisIri *string `json:"analysisIri"`

		// dataset Id
		// Required: true
		DatasetID *string `json:"datasetId"`

		// dataset iri
		DatasetIri string `json:"datasetIri,omitempty"`

		// override type
		// Enum: [SET ADD REMOVE]
		OverrideType string `json:"overrideType,omitempty"`

		// title
		// Required: true
		Title *string `json:"title"`
	}{

		AgentID: m.AgentID,

		AnalysisIri: m.AnalysisIri,

		DatasetID: m.DatasetID,

		DatasetIri: m.DatasetIri,

		OverrideType: m.OverrideType,

		Title: m.Title,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ContributionHydratables []*ContributionHydratable `json:"contributionHydratables"`
	}{

		ContributionHydratables: m.ContributionHydratables(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this create missing dataset and link analysis contribution
func (m *CreateMissingDatasetAndLinkAnalysisContribution) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContributionHydratables(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAnalysisIri(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatasetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMissingDatasetAndLinkAnalysisContribution) validateContributionHydratables(formats strfmt.Registry) error {

	if swag.IsZero(m.ContributionHydratables()) { // not required
		return nil
	}

	for i := 0; i < len(m.ContributionHydratables()); i++ {
		if swag.IsZero(m.contributionHydratablesField[i]) { // not required
			continue
		}

		if m.contributionHydratablesField[i] != nil {
			if err := m.contributionHydratablesField[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contributionHydratables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contributionHydratables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateMissingDatasetAndLinkAnalysisContribution) validateAgentID(formats strfmt.Registry) error {

	if err := validate.Required("agentId", "body", m.AgentID); err != nil {
		return err
	}

	return nil
}

func (m *CreateMissingDatasetAndLinkAnalysisContribution) validateAnalysisIri(formats strfmt.Registry) error {

	if err := validate.Required("analysisIri", "body", m.AnalysisIri); err != nil {
		return err
	}

	return nil
}

func (m *CreateMissingDatasetAndLinkAnalysisContribution) validateDatasetID(formats strfmt.Registry) error {

	if err := validate.Required("datasetId", "body", m.DatasetID); err != nil {
		return err
	}

	return nil
}

var createMissingDatasetAndLinkAnalysisContributionTypeOverrideTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SET","ADD","REMOVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createMissingDatasetAndLinkAnalysisContributionTypeOverrideTypePropEnum = append(createMissingDatasetAndLinkAnalysisContributionTypeOverrideTypePropEnum, v)
	}
}

// property enum
func (m *CreateMissingDatasetAndLinkAnalysisContribution) validateOverrideTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createMissingDatasetAndLinkAnalysisContributionTypeOverrideTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateMissingDatasetAndLinkAnalysisContribution) validateOverrideType(formats strfmt.Registry) error {

	if swag.IsZero(m.OverrideType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOverrideTypeEnum("overrideType", "body", m.OverrideType); err != nil {
		return err
	}

	return nil
}

func (m *CreateMissingDatasetAndLinkAnalysisContribution) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create missing dataset and link analysis contribution based on the context it is used
func (m *CreateMissingDatasetAndLinkAnalysisContribution) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContributionHydratables(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMissingDatasetAndLinkAnalysisContribution) contextValidateContributionHydratables(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ContributionHydratables()); i++ {

		if m.contributionHydratablesField[i] != nil {
			if err := m.contributionHydratablesField[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contributionHydratables" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contributionHydratables" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateMissingDatasetAndLinkAnalysisContribution) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMissingDatasetAndLinkAnalysisContribution) UnmarshalBinary(b []byte) error {
	var res CreateMissingDatasetAndLinkAnalysisContribution
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

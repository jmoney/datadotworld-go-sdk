// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LinkedDatasetSummaryResponse linked dataset summary response
//
// swagger:model LinkedDatasetSummaryResponse
type LinkedDatasetSummaryResponse struct {

	// access level
	// Required: true
	// Enum: [NONE DISCOVER READ WRITE ADMIN]
	AccessLevel *string `json:"accessLevel"`

	// created
	// Required: true
	Created *string `json:"created"`

	// description
	// Max Length: 120
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// id
	// Required: true
	ID *string `json:"id"`

	// license
	// Enum: [CC BY-NC CC BY-NC-ND CC BY-NC-SA CC BY-ND CC BY-ND 3.0 CC-0 CC-BY CC-BY 3.0 CC-BY 3.0 AU CC-BY 3.0 IGO CC-BY 3.0 NZ CC-BY-IGO CC-BY-NC 3.0 CC-BY-NC 3.0 NZ CC-BY-NC-ND-NZ-3.0 CC-BY-NC-SA 3.0 CC-BY-NC-SA 3.0 NZ CC-BY-SA CC-BY-SA 3.0 CC-BY-SA 3.0 NZ CDLA-Permissive-1.0 CDLA-Sharing-1.0 Italian-ODL MIT License ODC-BY ODC-ODbL OGL OGL-Canada OGL-Nova Scotia OGL-UK OSODL Other PDDL Public Domain]
	License string `json:"license,omitempty"`

	// owner
	// Required: true
	Owner *string `json:"owner"`

	// summary
	// Max Length: 25000
	// Min Length: 0
	Summary *string `json:"summary,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// title
	// Required: true
	// Max Length: 60
	// Min Length: 1
	Title *string `json:"title"`

	// updated
	// Required: true
	Updated *string `json:"updated"`

	// version
	Version string `json:"version,omitempty"`

	// visibility
	// Required: true
	// Enum: [OPEN PRIVATE]
	Visibility *string `json:"visibility"`
}

// Validate validates this linked dataset summary response
func (m *LinkedDatasetSummaryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var linkedDatasetSummaryResponseTypeAccessLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","DISCOVER","READ","WRITE","ADMIN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		linkedDatasetSummaryResponseTypeAccessLevelPropEnum = append(linkedDatasetSummaryResponseTypeAccessLevelPropEnum, v)
	}
}

const (

	// LinkedDatasetSummaryResponseAccessLevelNONE captures enum value "NONE"
	LinkedDatasetSummaryResponseAccessLevelNONE string = "NONE"

	// LinkedDatasetSummaryResponseAccessLevelDISCOVER captures enum value "DISCOVER"
	LinkedDatasetSummaryResponseAccessLevelDISCOVER string = "DISCOVER"

	// LinkedDatasetSummaryResponseAccessLevelREAD captures enum value "READ"
	LinkedDatasetSummaryResponseAccessLevelREAD string = "READ"

	// LinkedDatasetSummaryResponseAccessLevelWRITE captures enum value "WRITE"
	LinkedDatasetSummaryResponseAccessLevelWRITE string = "WRITE"

	// LinkedDatasetSummaryResponseAccessLevelADMIN captures enum value "ADMIN"
	LinkedDatasetSummaryResponseAccessLevelADMIN string = "ADMIN"
)

// prop value enum
func (m *LinkedDatasetSummaryResponse) validateAccessLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, linkedDatasetSummaryResponseTypeAccessLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LinkedDatasetSummaryResponse) validateAccessLevel(formats strfmt.Registry) error {

	if err := validate.Required("accessLevel", "body", m.AccessLevel); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccessLevelEnum("accessLevel", "body", *m.AccessLevel); err != nil {
		return err
	}

	return nil
}

func (m *LinkedDatasetSummaryResponse) validateCreated(formats strfmt.Registry) error {

	if err := validate.Required("created", "body", m.Created); err != nil {
		return err
	}

	return nil
}

func (m *LinkedDatasetSummaryResponse) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", *m.Description, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", *m.Description, 120); err != nil {
		return err
	}

	return nil
}

func (m *LinkedDatasetSummaryResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var linkedDatasetSummaryResponseTypeLicensePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CC BY-NC","CC BY-NC-ND","CC BY-NC-SA","CC BY-ND","CC BY-ND 3.0","CC-0","CC-BY","CC-BY 3.0","CC-BY 3.0 AU","CC-BY 3.0 IGO","CC-BY 3.0 NZ","CC-BY-IGO","CC-BY-NC 3.0","CC-BY-NC 3.0 NZ","CC-BY-NC-ND-NZ-3.0","CC-BY-NC-SA 3.0","CC-BY-NC-SA 3.0 NZ","CC-BY-SA","CC-BY-SA 3.0","CC-BY-SA 3.0 NZ","CDLA-Permissive-1.0","CDLA-Sharing-1.0","Italian-ODL","MIT License","ODC-BY","ODC-ODbL","OGL","OGL-Canada","OGL-Nova Scotia","OGL-UK","OSODL","Other","PDDL","Public Domain"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		linkedDatasetSummaryResponseTypeLicensePropEnum = append(linkedDatasetSummaryResponseTypeLicensePropEnum, v)
	}
}

const (

	// LinkedDatasetSummaryResponseLicenseCCBYDashNC captures enum value "CC BY-NC"
	LinkedDatasetSummaryResponseLicenseCCBYDashNC string = "CC BY-NC"

	// LinkedDatasetSummaryResponseLicenseCCBYDashNCDashND captures enum value "CC BY-NC-ND"
	LinkedDatasetSummaryResponseLicenseCCBYDashNCDashND string = "CC BY-NC-ND"

	// LinkedDatasetSummaryResponseLicenseCCBYDashNCDashSA captures enum value "CC BY-NC-SA"
	LinkedDatasetSummaryResponseLicenseCCBYDashNCDashSA string = "CC BY-NC-SA"

	// LinkedDatasetSummaryResponseLicenseCCBYDashND captures enum value "CC BY-ND"
	LinkedDatasetSummaryResponseLicenseCCBYDashND string = "CC BY-ND"

	// LinkedDatasetSummaryResponseLicenseCCBYDashND3Dot0 captures enum value "CC BY-ND 3.0"
	LinkedDatasetSummaryResponseLicenseCCBYDashND3Dot0 string = "CC BY-ND 3.0"

	// LinkedDatasetSummaryResponseLicenseCCDash0 captures enum value "CC-0"
	LinkedDatasetSummaryResponseLicenseCCDash0 string = "CC-0"

	// LinkedDatasetSummaryResponseLicenseCCDashBY captures enum value "CC-BY"
	LinkedDatasetSummaryResponseLicenseCCDashBY string = "CC-BY"

	// LinkedDatasetSummaryResponseLicenseCCDashBY3Dot0 captures enum value "CC-BY 3.0"
	LinkedDatasetSummaryResponseLicenseCCDashBY3Dot0 string = "CC-BY 3.0"

	// LinkedDatasetSummaryResponseLicenseCCDashBY3Dot0AU captures enum value "CC-BY 3.0 AU"
	LinkedDatasetSummaryResponseLicenseCCDashBY3Dot0AU string = "CC-BY 3.0 AU"

	// LinkedDatasetSummaryResponseLicenseCCDashBY3Dot0IGO captures enum value "CC-BY 3.0 IGO"
	LinkedDatasetSummaryResponseLicenseCCDashBY3Dot0IGO string = "CC-BY 3.0 IGO"

	// LinkedDatasetSummaryResponseLicenseCCDashBY3Dot0NZ captures enum value "CC-BY 3.0 NZ"
	LinkedDatasetSummaryResponseLicenseCCDashBY3Dot0NZ string = "CC-BY 3.0 NZ"

	// LinkedDatasetSummaryResponseLicenseCCDashBYDashIGO captures enum value "CC-BY-IGO"
	LinkedDatasetSummaryResponseLicenseCCDashBYDashIGO string = "CC-BY-IGO"

	// LinkedDatasetSummaryResponseLicenseCCDashBYDashNC3Dot0 captures enum value "CC-BY-NC 3.0"
	LinkedDatasetSummaryResponseLicenseCCDashBYDashNC3Dot0 string = "CC-BY-NC 3.0"

	// LinkedDatasetSummaryResponseLicenseCCDashBYDashNC3Dot0NZ captures enum value "CC-BY-NC 3.0 NZ"
	LinkedDatasetSummaryResponseLicenseCCDashBYDashNC3Dot0NZ string = "CC-BY-NC 3.0 NZ"

	// LinkedDatasetSummaryResponseLicenseCCDashBYDashNCDashNDDashNZDash3Dot0 captures enum value "CC-BY-NC-ND-NZ-3.0"
	LinkedDatasetSummaryResponseLicenseCCDashBYDashNCDashNDDashNZDash3Dot0 string = "CC-BY-NC-ND-NZ-3.0"

	// LinkedDatasetSummaryResponseLicenseCCDashBYDashNCDashSA3Dot0 captures enum value "CC-BY-NC-SA 3.0"
	LinkedDatasetSummaryResponseLicenseCCDashBYDashNCDashSA3Dot0 string = "CC-BY-NC-SA 3.0"

	// LinkedDatasetSummaryResponseLicenseCCDashBYDashNCDashSA3Dot0NZ captures enum value "CC-BY-NC-SA 3.0 NZ"
	LinkedDatasetSummaryResponseLicenseCCDashBYDashNCDashSA3Dot0NZ string = "CC-BY-NC-SA 3.0 NZ"

	// LinkedDatasetSummaryResponseLicenseCCDashBYDashSA captures enum value "CC-BY-SA"
	LinkedDatasetSummaryResponseLicenseCCDashBYDashSA string = "CC-BY-SA"

	// LinkedDatasetSummaryResponseLicenseCCDashBYDashSA3Dot0 captures enum value "CC-BY-SA 3.0"
	LinkedDatasetSummaryResponseLicenseCCDashBYDashSA3Dot0 string = "CC-BY-SA 3.0"

	// LinkedDatasetSummaryResponseLicenseCCDashBYDashSA3Dot0NZ captures enum value "CC-BY-SA 3.0 NZ"
	LinkedDatasetSummaryResponseLicenseCCDashBYDashSA3Dot0NZ string = "CC-BY-SA 3.0 NZ"

	// LinkedDatasetSummaryResponseLicenseCDLADashPermissiveDash1Dot0 captures enum value "CDLA-Permissive-1.0"
	LinkedDatasetSummaryResponseLicenseCDLADashPermissiveDash1Dot0 string = "CDLA-Permissive-1.0"

	// LinkedDatasetSummaryResponseLicenseCDLADashSharingDash1Dot0 captures enum value "CDLA-Sharing-1.0"
	LinkedDatasetSummaryResponseLicenseCDLADashSharingDash1Dot0 string = "CDLA-Sharing-1.0"

	// LinkedDatasetSummaryResponseLicenseItalianDashODL captures enum value "Italian-ODL"
	LinkedDatasetSummaryResponseLicenseItalianDashODL string = "Italian-ODL"

	// LinkedDatasetSummaryResponseLicenseMITLicense captures enum value "MIT License"
	LinkedDatasetSummaryResponseLicenseMITLicense string = "MIT License"

	// LinkedDatasetSummaryResponseLicenseODCDashBY captures enum value "ODC-BY"
	LinkedDatasetSummaryResponseLicenseODCDashBY string = "ODC-BY"

	// LinkedDatasetSummaryResponseLicenseODCDashODbL captures enum value "ODC-ODbL"
	LinkedDatasetSummaryResponseLicenseODCDashODbL string = "ODC-ODbL"

	// LinkedDatasetSummaryResponseLicenseOGL captures enum value "OGL"
	LinkedDatasetSummaryResponseLicenseOGL string = "OGL"

	// LinkedDatasetSummaryResponseLicenseOGLDashCanada captures enum value "OGL-Canada"
	LinkedDatasetSummaryResponseLicenseOGLDashCanada string = "OGL-Canada"

	// LinkedDatasetSummaryResponseLicenseOGLDashNovaScotia captures enum value "OGL-Nova Scotia"
	LinkedDatasetSummaryResponseLicenseOGLDashNovaScotia string = "OGL-Nova Scotia"

	// LinkedDatasetSummaryResponseLicenseOGLDashUK captures enum value "OGL-UK"
	LinkedDatasetSummaryResponseLicenseOGLDashUK string = "OGL-UK"

	// LinkedDatasetSummaryResponseLicenseOSODL captures enum value "OSODL"
	LinkedDatasetSummaryResponseLicenseOSODL string = "OSODL"

	// LinkedDatasetSummaryResponseLicenseOther captures enum value "Other"
	LinkedDatasetSummaryResponseLicenseOther string = "Other"

	// LinkedDatasetSummaryResponseLicensePDDL captures enum value "PDDL"
	LinkedDatasetSummaryResponseLicensePDDL string = "PDDL"

	// LinkedDatasetSummaryResponseLicensePublicDomain captures enum value "Public Domain"
	LinkedDatasetSummaryResponseLicensePublicDomain string = "Public Domain"
)

// prop value enum
func (m *LinkedDatasetSummaryResponse) validateLicenseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, linkedDatasetSummaryResponseTypeLicensePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LinkedDatasetSummaryResponse) validateLicense(formats strfmt.Registry) error {
	if swag.IsZero(m.License) { // not required
		return nil
	}

	// value enum
	if err := m.validateLicenseEnum("license", "body", m.License); err != nil {
		return err
	}

	return nil
}

func (m *LinkedDatasetSummaryResponse) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	return nil
}

func (m *LinkedDatasetSummaryResponse) validateSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.Summary) { // not required
		return nil
	}

	if err := validate.MinLength("summary", "body", *m.Summary, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("summary", "body", *m.Summary, 25000); err != nil {
		return err
	}

	return nil
}

func (m *LinkedDatasetSummaryResponse) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MinLength("title", "body", *m.Title, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", *m.Title, 60); err != nil {
		return err
	}

	return nil
}

func (m *LinkedDatasetSummaryResponse) validateUpdated(formats strfmt.Registry) error {

	if err := validate.Required("updated", "body", m.Updated); err != nil {
		return err
	}

	return nil
}

var linkedDatasetSummaryResponseTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPEN","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		linkedDatasetSummaryResponseTypeVisibilityPropEnum = append(linkedDatasetSummaryResponseTypeVisibilityPropEnum, v)
	}
}

const (

	// LinkedDatasetSummaryResponseVisibilityOPEN captures enum value "OPEN"
	LinkedDatasetSummaryResponseVisibilityOPEN string = "OPEN"

	// LinkedDatasetSummaryResponseVisibilityPRIVATE captures enum value "PRIVATE"
	LinkedDatasetSummaryResponseVisibilityPRIVATE string = "PRIVATE"
)

// prop value enum
func (m *LinkedDatasetSummaryResponse) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, linkedDatasetSummaryResponseTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LinkedDatasetSummaryResponse) validateVisibility(formats strfmt.Registry) error {

	if err := validate.Required("visibility", "body", m.Visibility); err != nil {
		return err
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", *m.Visibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this linked dataset summary response based on context it is used
func (m *LinkedDatasetSummaryResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LinkedDatasetSummaryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LinkedDatasetSummaryResponse) UnmarshalBinary(b []byte) error {
	var res LinkedDatasetSummaryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

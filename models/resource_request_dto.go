// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResourceRequestDto resource request dto
//
// swagger:model ResourceRequestDto
type ResourceRequestDto struct {

	// approver party
	ApproverParty string `json:"approverParty,omitempty"`

	// contribution
	Contribution *ContributionDto `json:"contribution,omitempty"`

	// created
	Created string `json:"created,omitempty"`

	// grantee party
	GranteeParty string `json:"granteeParty,omitempty"`

	// message
	Message string `json:"message,omitempty"`

	// requester party
	RequesterParty string `json:"requesterParty,omitempty"`

	// requestid
	// Format: uuid
	Requestid strfmt.UUID `json:"requestid,omitempty"`

	// resource
	Resource string `json:"resource,omitempty"`

	// resource request type
	ResourceRequestType string `json:"resourceRequestType,omitempty"`

	// transfer asset
	TransferAsset *TransferAssetDto `json:"transferAsset,omitempty"`

	// updated
	Updated string `json:"updated,omitempty"`
}

// Validate validates this resource request dto
func (m *ResourceRequestDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContribution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferAsset(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceRequestDto) validateContribution(formats strfmt.Registry) error {
	if swag.IsZero(m.Contribution) { // not required
		return nil
	}

	if m.Contribution != nil {
		if err := m.Contribution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contribution")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceRequestDto) validateRequestid(formats strfmt.Registry) error {
	if swag.IsZero(m.Requestid) { // not required
		return nil
	}

	if err := validate.FormatOf("requestid", "body", "uuid", m.Requestid.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ResourceRequestDto) validateTransferAsset(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferAsset) { // not required
		return nil
	}

	if m.TransferAsset != nil {
		if err := m.TransferAsset.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transferAsset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transferAsset")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this resource request dto based on the context it is used
func (m *ResourceRequestDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContribution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransferAsset(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResourceRequestDto) contextValidateContribution(ctx context.Context, formats strfmt.Registry) error {

	if m.Contribution != nil {
		if err := m.Contribution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contribution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contribution")
			}
			return err
		}
	}

	return nil
}

func (m *ResourceRequestDto) contextValidateTransferAsset(ctx context.Context, formats strfmt.Registry) error {

	if m.TransferAsset != nil {
		if err := m.TransferAsset.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transferAsset")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transferAsset")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResourceRequestDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResourceRequestDto) UnmarshalBinary(b []byte) error {
	var res ResourceRequestDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RelationshipCreateOrDeleteRequest relationship create or delete request
//
// swagger:model RelationshipCreateOrDeleteRequest
type RelationshipCreateOrDeleteRequest struct {

	// IRI of the relationship type
	// Required: true
	// Format: uri
	RelationshipType *strfmt.URI `json:"relationshipType"`

	// If source is a table or column, populate with dataset ID that contains table.
	SourceDatasetID string `json:"sourceDatasetId,omitempty"`

	// source Id
	// Required: true
	SourceID *string `json:"sourceId"`

	// If source is a column, populate with table ID that contains column.
	SourceTableID string `json:"sourceTableId,omitempty"`

	// Type of sourceId.
	// Required: true
	// Enum: [CATALOG ANALYSIS BUSINESS_TERM COLUMN DATA_TYPE DATASET PROJECT TABLE]
	SourceType *string `json:"sourceType"`

	// If target is a table or column, populate with dataset ID that contains table.
	TargetDatasetID string `json:"targetDatasetId,omitempty"`

	// target Id
	// Required: true
	TargetID *string `json:"targetId"`

	// If target is a column, populate with table ID that contains column.
	TargetTableID string `json:"targetTableId,omitempty"`

	// Type of targetId.
	// Required: true
	// Enum: [CATALOG ANALYSIS BUSINESS_TERM COLUMN DATA_TYPE DATASET PROJECT TABLE]
	TargetType *string `json:"targetType"`
}

// Validate validates this relationship create or delete request
func (m *RelationshipCreateOrDeleteRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelationshipType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelationshipCreateOrDeleteRequest) validateRelationshipType(formats strfmt.Registry) error {

	if err := validate.Required("relationshipType", "body", m.RelationshipType); err != nil {
		return err
	}

	if err := validate.FormatOf("relationshipType", "body", "uri", m.RelationshipType.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipCreateOrDeleteRequest) validateSourceID(formats strfmt.Registry) error {

	if err := validate.Required("sourceId", "body", m.SourceID); err != nil {
		return err
	}

	return nil
}

var relationshipCreateOrDeleteRequestTypeSourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CATALOG","ANALYSIS","BUSINESS_TERM","COLUMN","DATA_TYPE","DATASET","PROJECT","TABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		relationshipCreateOrDeleteRequestTypeSourceTypePropEnum = append(relationshipCreateOrDeleteRequestTypeSourceTypePropEnum, v)
	}
}

const (

	// RelationshipCreateOrDeleteRequestSourceTypeCATALOG captures enum value "CATALOG"
	RelationshipCreateOrDeleteRequestSourceTypeCATALOG string = "CATALOG"

	// RelationshipCreateOrDeleteRequestSourceTypeANALYSIS captures enum value "ANALYSIS"
	RelationshipCreateOrDeleteRequestSourceTypeANALYSIS string = "ANALYSIS"

	// RelationshipCreateOrDeleteRequestSourceTypeBUSINESSTERM captures enum value "BUSINESS_TERM"
	RelationshipCreateOrDeleteRequestSourceTypeBUSINESSTERM string = "BUSINESS_TERM"

	// RelationshipCreateOrDeleteRequestSourceTypeCOLUMN captures enum value "COLUMN"
	RelationshipCreateOrDeleteRequestSourceTypeCOLUMN string = "COLUMN"

	// RelationshipCreateOrDeleteRequestSourceTypeDATATYPE captures enum value "DATA_TYPE"
	RelationshipCreateOrDeleteRequestSourceTypeDATATYPE string = "DATA_TYPE"

	// RelationshipCreateOrDeleteRequestSourceTypeDATASET captures enum value "DATASET"
	RelationshipCreateOrDeleteRequestSourceTypeDATASET string = "DATASET"

	// RelationshipCreateOrDeleteRequestSourceTypePROJECT captures enum value "PROJECT"
	RelationshipCreateOrDeleteRequestSourceTypePROJECT string = "PROJECT"

	// RelationshipCreateOrDeleteRequestSourceTypeTABLE captures enum value "TABLE"
	RelationshipCreateOrDeleteRequestSourceTypeTABLE string = "TABLE"
)

// prop value enum
func (m *RelationshipCreateOrDeleteRequest) validateSourceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, relationshipCreateOrDeleteRequestTypeSourceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RelationshipCreateOrDeleteRequest) validateSourceType(formats strfmt.Registry) error {

	if err := validate.Required("sourceType", "body", m.SourceType); err != nil {
		return err
	}

	// value enum
	if err := m.validateSourceTypeEnum("sourceType", "body", *m.SourceType); err != nil {
		return err
	}

	return nil
}

func (m *RelationshipCreateOrDeleteRequest) validateTargetID(formats strfmt.Registry) error {

	if err := validate.Required("targetId", "body", m.TargetID); err != nil {
		return err
	}

	return nil
}

var relationshipCreateOrDeleteRequestTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CATALOG","ANALYSIS","BUSINESS_TERM","COLUMN","DATA_TYPE","DATASET","PROJECT","TABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		relationshipCreateOrDeleteRequestTypeTargetTypePropEnum = append(relationshipCreateOrDeleteRequestTypeTargetTypePropEnum, v)
	}
}

const (

	// RelationshipCreateOrDeleteRequestTargetTypeCATALOG captures enum value "CATALOG"
	RelationshipCreateOrDeleteRequestTargetTypeCATALOG string = "CATALOG"

	// RelationshipCreateOrDeleteRequestTargetTypeANALYSIS captures enum value "ANALYSIS"
	RelationshipCreateOrDeleteRequestTargetTypeANALYSIS string = "ANALYSIS"

	// RelationshipCreateOrDeleteRequestTargetTypeBUSINESSTERM captures enum value "BUSINESS_TERM"
	RelationshipCreateOrDeleteRequestTargetTypeBUSINESSTERM string = "BUSINESS_TERM"

	// RelationshipCreateOrDeleteRequestTargetTypeCOLUMN captures enum value "COLUMN"
	RelationshipCreateOrDeleteRequestTargetTypeCOLUMN string = "COLUMN"

	// RelationshipCreateOrDeleteRequestTargetTypeDATATYPE captures enum value "DATA_TYPE"
	RelationshipCreateOrDeleteRequestTargetTypeDATATYPE string = "DATA_TYPE"

	// RelationshipCreateOrDeleteRequestTargetTypeDATASET captures enum value "DATASET"
	RelationshipCreateOrDeleteRequestTargetTypeDATASET string = "DATASET"

	// RelationshipCreateOrDeleteRequestTargetTypePROJECT captures enum value "PROJECT"
	RelationshipCreateOrDeleteRequestTargetTypePROJECT string = "PROJECT"

	// RelationshipCreateOrDeleteRequestTargetTypeTABLE captures enum value "TABLE"
	RelationshipCreateOrDeleteRequestTargetTypeTABLE string = "TABLE"
)

// prop value enum
func (m *RelationshipCreateOrDeleteRequest) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, relationshipCreateOrDeleteRequestTypeTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RelationshipCreateOrDeleteRequest) validateTargetType(formats strfmt.Registry) error {

	if err := validate.Required("targetType", "body", m.TargetType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTargetTypeEnum("targetType", "body", *m.TargetType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this relationship create or delete request based on context it is used
func (m *RelationshipCreateOrDeleteRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RelationshipCreateOrDeleteRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RelationshipCreateOrDeleteRequest) UnmarshalBinary(b []byte) error {
	var res RelationshipCreateOrDeleteRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SingleTableMetadataSpecDto single table metadata spec dto
//
// swagger:model SingleTableMetadataSpecDto
type SingleTableMetadataSpecDto struct {

	// database
	Database string `json:"database,omitempty"`

	// schema
	Schema string `json:"schema,omitempty"`

	// table
	Table string `json:"table,omitempty"`

	// table type
	// Enum: [EXTRACT VIRTUAL]
	TableType string `json:"tableType,omitempty"`
}

// Validate validates this single table metadata spec dto
func (m *SingleTableMetadataSpecDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTableType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var singleTableMetadataSpecDtoTypeTableTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EXTRACT","VIRTUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		singleTableMetadataSpecDtoTypeTableTypePropEnum = append(singleTableMetadataSpecDtoTypeTableTypePropEnum, v)
	}
}

const (

	// SingleTableMetadataSpecDtoTableTypeEXTRACT captures enum value "EXTRACT"
	SingleTableMetadataSpecDtoTableTypeEXTRACT string = "EXTRACT"

	// SingleTableMetadataSpecDtoTableTypeVIRTUAL captures enum value "VIRTUAL"
	SingleTableMetadataSpecDtoTableTypeVIRTUAL string = "VIRTUAL"
)

// prop value enum
func (m *SingleTableMetadataSpecDto) validateTableTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, singleTableMetadataSpecDtoTypeTableTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SingleTableMetadataSpecDto) validateTableType(formats strfmt.Registry) error {
	if swag.IsZero(m.TableType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTableTypeEnum("tableType", "body", m.TableType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this single table metadata spec dto based on context it is used
func (m *SingleTableMetadataSpecDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SingleTableMetadataSpecDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SingleTableMetadataSpecDto) UnmarshalBinary(b []byte) error {
	var res SingleTableMetadataSpecDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

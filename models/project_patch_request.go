// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectPatchRequest project patch request
//
// swagger:model ProjectPatchRequest
type ProjectPatchRequest struct {

	// license
	// Enum: [CC BY-NC CC BY-NC-ND CC BY-NC-SA CC BY-ND CC BY-ND 3.0 CC-0 CC-BY CC-BY 3.0 CC-BY 3.0 AU CC-BY 3.0 IGO CC-BY 3.0 NZ CC-BY-IGO CC-BY-NC 3.0 CC-BY-NC 3.0 NZ CC-BY-NC-ND-NZ-3.0 CC-BY-NC-SA 3.0 CC-BY-NC-SA 3.0 NZ CC-BY-SA CC-BY-SA 3.0 CC-BY-SA 3.0 NZ CDLA-Permissive-1.0 CDLA-Sharing-1.0 Italian-ODL MIT License ODC-BY ODC-ODbL OGL OGL-Canada OGL-Nova Scotia OGL-UK OSODL Other PDDL Public Domain]
	License string `json:"license,omitempty"`

	// linked datasets
	LinkedDatasets []*LinkedDatasetCreateOrUpdateRequest `json:"linkedDatasets"`

	// objective
	Objective string `json:"objective,omitempty"`

	// properties
	Properties map[string]JSONNode `json:"properties,omitempty"`

	// summary
	Summary string `json:"summary,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// title
	// Max Length: 60
	// Min Length: 1
	Title string `json:"title,omitempty"`

	// visibility
	// Enum: [OPEN PRIVATE]
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this project patch request
func (m *ProjectPatchRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkedDatasets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var projectPatchRequestTypeLicensePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CC BY-NC","CC BY-NC-ND","CC BY-NC-SA","CC BY-ND","CC BY-ND 3.0","CC-0","CC-BY","CC-BY 3.0","CC-BY 3.0 AU","CC-BY 3.0 IGO","CC-BY 3.0 NZ","CC-BY-IGO","CC-BY-NC 3.0","CC-BY-NC 3.0 NZ","CC-BY-NC-ND-NZ-3.0","CC-BY-NC-SA 3.0","CC-BY-NC-SA 3.0 NZ","CC-BY-SA","CC-BY-SA 3.0","CC-BY-SA 3.0 NZ","CDLA-Permissive-1.0","CDLA-Sharing-1.0","Italian-ODL","MIT License","ODC-BY","ODC-ODbL","OGL","OGL-Canada","OGL-Nova Scotia","OGL-UK","OSODL","Other","PDDL","Public Domain"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectPatchRequestTypeLicensePropEnum = append(projectPatchRequestTypeLicensePropEnum, v)
	}
}

const (

	// ProjectPatchRequestLicenseCCBYDashNC captures enum value "CC BY-NC"
	ProjectPatchRequestLicenseCCBYDashNC string = "CC BY-NC"

	// ProjectPatchRequestLicenseCCBYDashNCDashND captures enum value "CC BY-NC-ND"
	ProjectPatchRequestLicenseCCBYDashNCDashND string = "CC BY-NC-ND"

	// ProjectPatchRequestLicenseCCBYDashNCDashSA captures enum value "CC BY-NC-SA"
	ProjectPatchRequestLicenseCCBYDashNCDashSA string = "CC BY-NC-SA"

	// ProjectPatchRequestLicenseCCBYDashND captures enum value "CC BY-ND"
	ProjectPatchRequestLicenseCCBYDashND string = "CC BY-ND"

	// ProjectPatchRequestLicenseCCBYDashND3Dot0 captures enum value "CC BY-ND 3.0"
	ProjectPatchRequestLicenseCCBYDashND3Dot0 string = "CC BY-ND 3.0"

	// ProjectPatchRequestLicenseCCDash0 captures enum value "CC-0"
	ProjectPatchRequestLicenseCCDash0 string = "CC-0"

	// ProjectPatchRequestLicenseCCDashBY captures enum value "CC-BY"
	ProjectPatchRequestLicenseCCDashBY string = "CC-BY"

	// ProjectPatchRequestLicenseCCDashBY3Dot0 captures enum value "CC-BY 3.0"
	ProjectPatchRequestLicenseCCDashBY3Dot0 string = "CC-BY 3.0"

	// ProjectPatchRequestLicenseCCDashBY3Dot0AU captures enum value "CC-BY 3.0 AU"
	ProjectPatchRequestLicenseCCDashBY3Dot0AU string = "CC-BY 3.0 AU"

	// ProjectPatchRequestLicenseCCDashBY3Dot0IGO captures enum value "CC-BY 3.0 IGO"
	ProjectPatchRequestLicenseCCDashBY3Dot0IGO string = "CC-BY 3.0 IGO"

	// ProjectPatchRequestLicenseCCDashBY3Dot0NZ captures enum value "CC-BY 3.0 NZ"
	ProjectPatchRequestLicenseCCDashBY3Dot0NZ string = "CC-BY 3.0 NZ"

	// ProjectPatchRequestLicenseCCDashBYDashIGO captures enum value "CC-BY-IGO"
	ProjectPatchRequestLicenseCCDashBYDashIGO string = "CC-BY-IGO"

	// ProjectPatchRequestLicenseCCDashBYDashNC3Dot0 captures enum value "CC-BY-NC 3.0"
	ProjectPatchRequestLicenseCCDashBYDashNC3Dot0 string = "CC-BY-NC 3.0"

	// ProjectPatchRequestLicenseCCDashBYDashNC3Dot0NZ captures enum value "CC-BY-NC 3.0 NZ"
	ProjectPatchRequestLicenseCCDashBYDashNC3Dot0NZ string = "CC-BY-NC 3.0 NZ"

	// ProjectPatchRequestLicenseCCDashBYDashNCDashNDDashNZDash3Dot0 captures enum value "CC-BY-NC-ND-NZ-3.0"
	ProjectPatchRequestLicenseCCDashBYDashNCDashNDDashNZDash3Dot0 string = "CC-BY-NC-ND-NZ-3.0"

	// ProjectPatchRequestLicenseCCDashBYDashNCDashSA3Dot0 captures enum value "CC-BY-NC-SA 3.0"
	ProjectPatchRequestLicenseCCDashBYDashNCDashSA3Dot0 string = "CC-BY-NC-SA 3.0"

	// ProjectPatchRequestLicenseCCDashBYDashNCDashSA3Dot0NZ captures enum value "CC-BY-NC-SA 3.0 NZ"
	ProjectPatchRequestLicenseCCDashBYDashNCDashSA3Dot0NZ string = "CC-BY-NC-SA 3.0 NZ"

	// ProjectPatchRequestLicenseCCDashBYDashSA captures enum value "CC-BY-SA"
	ProjectPatchRequestLicenseCCDashBYDashSA string = "CC-BY-SA"

	// ProjectPatchRequestLicenseCCDashBYDashSA3Dot0 captures enum value "CC-BY-SA 3.0"
	ProjectPatchRequestLicenseCCDashBYDashSA3Dot0 string = "CC-BY-SA 3.0"

	// ProjectPatchRequestLicenseCCDashBYDashSA3Dot0NZ captures enum value "CC-BY-SA 3.0 NZ"
	ProjectPatchRequestLicenseCCDashBYDashSA3Dot0NZ string = "CC-BY-SA 3.0 NZ"

	// ProjectPatchRequestLicenseCDLADashPermissiveDash1Dot0 captures enum value "CDLA-Permissive-1.0"
	ProjectPatchRequestLicenseCDLADashPermissiveDash1Dot0 string = "CDLA-Permissive-1.0"

	// ProjectPatchRequestLicenseCDLADashSharingDash1Dot0 captures enum value "CDLA-Sharing-1.0"
	ProjectPatchRequestLicenseCDLADashSharingDash1Dot0 string = "CDLA-Sharing-1.0"

	// ProjectPatchRequestLicenseItalianDashODL captures enum value "Italian-ODL"
	ProjectPatchRequestLicenseItalianDashODL string = "Italian-ODL"

	// ProjectPatchRequestLicenseMITLicense captures enum value "MIT License"
	ProjectPatchRequestLicenseMITLicense string = "MIT License"

	// ProjectPatchRequestLicenseODCDashBY captures enum value "ODC-BY"
	ProjectPatchRequestLicenseODCDashBY string = "ODC-BY"

	// ProjectPatchRequestLicenseODCDashODbL captures enum value "ODC-ODbL"
	ProjectPatchRequestLicenseODCDashODbL string = "ODC-ODbL"

	// ProjectPatchRequestLicenseOGL captures enum value "OGL"
	ProjectPatchRequestLicenseOGL string = "OGL"

	// ProjectPatchRequestLicenseOGLDashCanada captures enum value "OGL-Canada"
	ProjectPatchRequestLicenseOGLDashCanada string = "OGL-Canada"

	// ProjectPatchRequestLicenseOGLDashNovaScotia captures enum value "OGL-Nova Scotia"
	ProjectPatchRequestLicenseOGLDashNovaScotia string = "OGL-Nova Scotia"

	// ProjectPatchRequestLicenseOGLDashUK captures enum value "OGL-UK"
	ProjectPatchRequestLicenseOGLDashUK string = "OGL-UK"

	// ProjectPatchRequestLicenseOSODL captures enum value "OSODL"
	ProjectPatchRequestLicenseOSODL string = "OSODL"

	// ProjectPatchRequestLicenseOther captures enum value "Other"
	ProjectPatchRequestLicenseOther string = "Other"

	// ProjectPatchRequestLicensePDDL captures enum value "PDDL"
	ProjectPatchRequestLicensePDDL string = "PDDL"

	// ProjectPatchRequestLicensePublicDomain captures enum value "Public Domain"
	ProjectPatchRequestLicensePublicDomain string = "Public Domain"
)

// prop value enum
func (m *ProjectPatchRequest) validateLicenseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectPatchRequestTypeLicensePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectPatchRequest) validateLicense(formats strfmt.Registry) error {
	if swag.IsZero(m.License) { // not required
		return nil
	}

	// value enum
	if err := m.validateLicenseEnum("license", "body", m.License); err != nil {
		return err
	}

	return nil
}

func (m *ProjectPatchRequest) validateLinkedDatasets(formats strfmt.Registry) error {
	if swag.IsZero(m.LinkedDatasets) { // not required
		return nil
	}

	for i := 0; i < len(m.LinkedDatasets); i++ {
		if swag.IsZero(m.LinkedDatasets[i]) { // not required
			continue
		}

		if m.LinkedDatasets[i] != nil {
			if err := m.LinkedDatasets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("linkedDatasets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("linkedDatasets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectPatchRequest) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for k := range m.Properties {

		if err := validate.Required("properties"+"."+k, "body", m.Properties[k]); err != nil {
			return err
		}
		if val, ok := m.Properties[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("properties" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectPatchRequest) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MinLength("title", "body", m.Title, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", m.Title, 60); err != nil {
		return err
	}

	return nil
}

var projectPatchRequestTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPEN","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectPatchRequestTypeVisibilityPropEnum = append(projectPatchRequestTypeVisibilityPropEnum, v)
	}
}

const (

	// ProjectPatchRequestVisibilityOPEN captures enum value "OPEN"
	ProjectPatchRequestVisibilityOPEN string = "OPEN"

	// ProjectPatchRequestVisibilityPRIVATE captures enum value "PRIVATE"
	ProjectPatchRequestVisibilityPRIVATE string = "PRIVATE"
)

// prop value enum
func (m *ProjectPatchRequest) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectPatchRequestTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectPatchRequest) validateVisibility(formats strfmt.Registry) error {
	if swag.IsZero(m.Visibility) { // not required
		return nil
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", m.Visibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this project patch request based on the context it is used
func (m *ProjectPatchRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLinkedDatasets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectPatchRequest) contextValidateLinkedDatasets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LinkedDatasets); i++ {

		if m.LinkedDatasets[i] != nil {
			if err := m.LinkedDatasets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("linkedDatasets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("linkedDatasets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectPatchRequest) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Properties {

		if val, ok := m.Properties[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectPatchRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectPatchRequest) UnmarshalBinary(b []byte) error {
	var res ProjectPatchRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

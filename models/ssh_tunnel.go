// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SSHTunnel Ssh tunnel
//
// swagger:model SshTunnel
type SSHTunnel struct {

	// ssh tunnel host
	// Example: passthru.tunnel.ca
	// Required: true
	Host *string `json:"host"`

	// Tunnel Port
	// Example: 3454
	// Maximum: 65535
	// Minimum: 1
	Port int32 `json:"port,omitempty"`

	// user name
	// Example: johnsmith
	// Required: true
	// Max Length: 1024
	// Min Length: 0
	User *string `json:"user"`

	// whether authentication is required
	// Example: true
	// Required: true
	UserKeyPair bool `json:"userKeyPair"`
}

// Validate validates this Ssh tunnel
func (m *SSHTunnel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserKeyPair(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SSHTunnel) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *SSHTunnel) validatePort(formats strfmt.Registry) error {
	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("port", "body", int64(m.Port), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(m.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *SSHTunnel) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	if err := validate.MinLength("user", "body", *m.User, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("user", "body", *m.User, 1024); err != nil {
		return err
	}

	return nil
}

func (m *SSHTunnel) validateUserKeyPair(formats strfmt.Registry) error {

	if err := validate.Required("userKeyPair", "body", bool(m.UserKeyPair)); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Ssh tunnel based on context it is used
func (m *SSHTunnel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SSHTunnel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SSHTunnel) UnmarshalBinary(b []byte) error {
	var res SSHTunnel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectCreateRequest project create request
//
// swagger:model ProjectCreateRequest
type ProjectCreateRequest struct {

	// files
	Files []*FileCreateRequest `json:"files"`

	// license
	// Enum: [CC BY-NC CC BY-NC-ND CC BY-NC-SA CC BY-ND CC BY-ND 3.0 CC-0 CC-BY CC-BY 3.0 CC-BY 3.0 AU CC-BY 3.0 IGO CC-BY 3.0 NZ CC-BY-IGO CC-BY-NC 3.0 CC-BY-NC 3.0 NZ CC-BY-NC-ND-NZ-3.0 CC-BY-NC-SA 3.0 CC-BY-NC-SA 3.0 NZ CC-BY-SA CC-BY-SA 3.0 CC-BY-SA 3.0 NZ CDLA-Permissive-1.0 CDLA-Sharing-1.0 Italian-ODL MIT License ODC-BY ODC-ODbL OGL OGL-Canada OGL-Nova Scotia OGL-UK OSODL Other PDDL Public Domain]
	License string `json:"license,omitempty"`

	// linked datasets
	LinkedDatasets []*LinkedDatasetCreateOrUpdateRequest `json:"linkedDatasets"`

	// objective
	// Max Length: 120
	// Min Length: 0
	Objective *string `json:"objective,omitempty"`

	// properties
	Properties map[string]JSONNode `json:"properties,omitempty"`

	// summary
	// Max Length: 25000
	// Min Length: 0
	Summary *string `json:"summary,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// title
	// Required: true
	// Max Length: 60
	// Min Length: 1
	Title *string `json:"title"`

	// visibility
	// Required: true
	// Enum: [OPEN PRIVATE]
	Visibility *string `json:"visibility"`
}

// Validate validates this project create request
func (m *ProjectCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLinkedDatasets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjective(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectCreateRequest) validateFiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Files) { // not required
		return nil
	}

	for i := 0; i < len(m.Files); i++ {
		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {
			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var projectCreateRequestTypeLicensePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CC BY-NC","CC BY-NC-ND","CC BY-NC-SA","CC BY-ND","CC BY-ND 3.0","CC-0","CC-BY","CC-BY 3.0","CC-BY 3.0 AU","CC-BY 3.0 IGO","CC-BY 3.0 NZ","CC-BY-IGO","CC-BY-NC 3.0","CC-BY-NC 3.0 NZ","CC-BY-NC-ND-NZ-3.0","CC-BY-NC-SA 3.0","CC-BY-NC-SA 3.0 NZ","CC-BY-SA","CC-BY-SA 3.0","CC-BY-SA 3.0 NZ","CDLA-Permissive-1.0","CDLA-Sharing-1.0","Italian-ODL","MIT License","ODC-BY","ODC-ODbL","OGL","OGL-Canada","OGL-Nova Scotia","OGL-UK","OSODL","Other","PDDL","Public Domain"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectCreateRequestTypeLicensePropEnum = append(projectCreateRequestTypeLicensePropEnum, v)
	}
}

const (

	// ProjectCreateRequestLicenseCCBYDashNC captures enum value "CC BY-NC"
	ProjectCreateRequestLicenseCCBYDashNC string = "CC BY-NC"

	// ProjectCreateRequestLicenseCCBYDashNCDashND captures enum value "CC BY-NC-ND"
	ProjectCreateRequestLicenseCCBYDashNCDashND string = "CC BY-NC-ND"

	// ProjectCreateRequestLicenseCCBYDashNCDashSA captures enum value "CC BY-NC-SA"
	ProjectCreateRequestLicenseCCBYDashNCDashSA string = "CC BY-NC-SA"

	// ProjectCreateRequestLicenseCCBYDashND captures enum value "CC BY-ND"
	ProjectCreateRequestLicenseCCBYDashND string = "CC BY-ND"

	// ProjectCreateRequestLicenseCCBYDashND3Dot0 captures enum value "CC BY-ND 3.0"
	ProjectCreateRequestLicenseCCBYDashND3Dot0 string = "CC BY-ND 3.0"

	// ProjectCreateRequestLicenseCCDash0 captures enum value "CC-0"
	ProjectCreateRequestLicenseCCDash0 string = "CC-0"

	// ProjectCreateRequestLicenseCCDashBY captures enum value "CC-BY"
	ProjectCreateRequestLicenseCCDashBY string = "CC-BY"

	// ProjectCreateRequestLicenseCCDashBY3Dot0 captures enum value "CC-BY 3.0"
	ProjectCreateRequestLicenseCCDashBY3Dot0 string = "CC-BY 3.0"

	// ProjectCreateRequestLicenseCCDashBY3Dot0AU captures enum value "CC-BY 3.0 AU"
	ProjectCreateRequestLicenseCCDashBY3Dot0AU string = "CC-BY 3.0 AU"

	// ProjectCreateRequestLicenseCCDashBY3Dot0IGO captures enum value "CC-BY 3.0 IGO"
	ProjectCreateRequestLicenseCCDashBY3Dot0IGO string = "CC-BY 3.0 IGO"

	// ProjectCreateRequestLicenseCCDashBY3Dot0NZ captures enum value "CC-BY 3.0 NZ"
	ProjectCreateRequestLicenseCCDashBY3Dot0NZ string = "CC-BY 3.0 NZ"

	// ProjectCreateRequestLicenseCCDashBYDashIGO captures enum value "CC-BY-IGO"
	ProjectCreateRequestLicenseCCDashBYDashIGO string = "CC-BY-IGO"

	// ProjectCreateRequestLicenseCCDashBYDashNC3Dot0 captures enum value "CC-BY-NC 3.0"
	ProjectCreateRequestLicenseCCDashBYDashNC3Dot0 string = "CC-BY-NC 3.0"

	// ProjectCreateRequestLicenseCCDashBYDashNC3Dot0NZ captures enum value "CC-BY-NC 3.0 NZ"
	ProjectCreateRequestLicenseCCDashBYDashNC3Dot0NZ string = "CC-BY-NC 3.0 NZ"

	// ProjectCreateRequestLicenseCCDashBYDashNCDashNDDashNZDash3Dot0 captures enum value "CC-BY-NC-ND-NZ-3.0"
	ProjectCreateRequestLicenseCCDashBYDashNCDashNDDashNZDash3Dot0 string = "CC-BY-NC-ND-NZ-3.0"

	// ProjectCreateRequestLicenseCCDashBYDashNCDashSA3Dot0 captures enum value "CC-BY-NC-SA 3.0"
	ProjectCreateRequestLicenseCCDashBYDashNCDashSA3Dot0 string = "CC-BY-NC-SA 3.0"

	// ProjectCreateRequestLicenseCCDashBYDashNCDashSA3Dot0NZ captures enum value "CC-BY-NC-SA 3.0 NZ"
	ProjectCreateRequestLicenseCCDashBYDashNCDashSA3Dot0NZ string = "CC-BY-NC-SA 3.0 NZ"

	// ProjectCreateRequestLicenseCCDashBYDashSA captures enum value "CC-BY-SA"
	ProjectCreateRequestLicenseCCDashBYDashSA string = "CC-BY-SA"

	// ProjectCreateRequestLicenseCCDashBYDashSA3Dot0 captures enum value "CC-BY-SA 3.0"
	ProjectCreateRequestLicenseCCDashBYDashSA3Dot0 string = "CC-BY-SA 3.0"

	// ProjectCreateRequestLicenseCCDashBYDashSA3Dot0NZ captures enum value "CC-BY-SA 3.0 NZ"
	ProjectCreateRequestLicenseCCDashBYDashSA3Dot0NZ string = "CC-BY-SA 3.0 NZ"

	// ProjectCreateRequestLicenseCDLADashPermissiveDash1Dot0 captures enum value "CDLA-Permissive-1.0"
	ProjectCreateRequestLicenseCDLADashPermissiveDash1Dot0 string = "CDLA-Permissive-1.0"

	// ProjectCreateRequestLicenseCDLADashSharingDash1Dot0 captures enum value "CDLA-Sharing-1.0"
	ProjectCreateRequestLicenseCDLADashSharingDash1Dot0 string = "CDLA-Sharing-1.0"

	// ProjectCreateRequestLicenseItalianDashODL captures enum value "Italian-ODL"
	ProjectCreateRequestLicenseItalianDashODL string = "Italian-ODL"

	// ProjectCreateRequestLicenseMITLicense captures enum value "MIT License"
	ProjectCreateRequestLicenseMITLicense string = "MIT License"

	// ProjectCreateRequestLicenseODCDashBY captures enum value "ODC-BY"
	ProjectCreateRequestLicenseODCDashBY string = "ODC-BY"

	// ProjectCreateRequestLicenseODCDashODbL captures enum value "ODC-ODbL"
	ProjectCreateRequestLicenseODCDashODbL string = "ODC-ODbL"

	// ProjectCreateRequestLicenseOGL captures enum value "OGL"
	ProjectCreateRequestLicenseOGL string = "OGL"

	// ProjectCreateRequestLicenseOGLDashCanada captures enum value "OGL-Canada"
	ProjectCreateRequestLicenseOGLDashCanada string = "OGL-Canada"

	// ProjectCreateRequestLicenseOGLDashNovaScotia captures enum value "OGL-Nova Scotia"
	ProjectCreateRequestLicenseOGLDashNovaScotia string = "OGL-Nova Scotia"

	// ProjectCreateRequestLicenseOGLDashUK captures enum value "OGL-UK"
	ProjectCreateRequestLicenseOGLDashUK string = "OGL-UK"

	// ProjectCreateRequestLicenseOSODL captures enum value "OSODL"
	ProjectCreateRequestLicenseOSODL string = "OSODL"

	// ProjectCreateRequestLicenseOther captures enum value "Other"
	ProjectCreateRequestLicenseOther string = "Other"

	// ProjectCreateRequestLicensePDDL captures enum value "PDDL"
	ProjectCreateRequestLicensePDDL string = "PDDL"

	// ProjectCreateRequestLicensePublicDomain captures enum value "Public Domain"
	ProjectCreateRequestLicensePublicDomain string = "Public Domain"
)

// prop value enum
func (m *ProjectCreateRequest) validateLicenseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectCreateRequestTypeLicensePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectCreateRequest) validateLicense(formats strfmt.Registry) error {
	if swag.IsZero(m.License) { // not required
		return nil
	}

	// value enum
	if err := m.validateLicenseEnum("license", "body", m.License); err != nil {
		return err
	}

	return nil
}

func (m *ProjectCreateRequest) validateLinkedDatasets(formats strfmt.Registry) error {
	if swag.IsZero(m.LinkedDatasets) { // not required
		return nil
	}

	for i := 0; i < len(m.LinkedDatasets); i++ {
		if swag.IsZero(m.LinkedDatasets[i]) { // not required
			continue
		}

		if m.LinkedDatasets[i] != nil {
			if err := m.LinkedDatasets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("linkedDatasets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("linkedDatasets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectCreateRequest) validateObjective(formats strfmt.Registry) error {
	if swag.IsZero(m.Objective) { // not required
		return nil
	}

	if err := validate.MinLength("objective", "body", *m.Objective, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("objective", "body", *m.Objective, 120); err != nil {
		return err
	}

	return nil
}

func (m *ProjectCreateRequest) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for k := range m.Properties {

		if err := validate.Required("properties"+"."+k, "body", m.Properties[k]); err != nil {
			return err
		}
		if val, ok := m.Properties[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("properties" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectCreateRequest) validateSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.Summary) { // not required
		return nil
	}

	if err := validate.MinLength("summary", "body", *m.Summary, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("summary", "body", *m.Summary, 25000); err != nil {
		return err
	}

	return nil
}

func (m *ProjectCreateRequest) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MinLength("title", "body", *m.Title, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", *m.Title, 60); err != nil {
		return err
	}

	return nil
}

var projectCreateRequestTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPEN","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		projectCreateRequestTypeVisibilityPropEnum = append(projectCreateRequestTypeVisibilityPropEnum, v)
	}
}

const (

	// ProjectCreateRequestVisibilityOPEN captures enum value "OPEN"
	ProjectCreateRequestVisibilityOPEN string = "OPEN"

	// ProjectCreateRequestVisibilityPRIVATE captures enum value "PRIVATE"
	ProjectCreateRequestVisibilityPRIVATE string = "PRIVATE"
)

// prop value enum
func (m *ProjectCreateRequest) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, projectCreateRequestTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProjectCreateRequest) validateVisibility(formats strfmt.Registry) error {

	if err := validate.Required("visibility", "body", m.Visibility); err != nil {
		return err
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", *m.Visibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this project create request based on the context it is used
func (m *ProjectCreateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLinkedDatasets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectCreateRequest) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Files); i++ {

		if m.Files[i] != nil {
			if err := m.Files[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectCreateRequest) contextValidateLinkedDatasets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LinkedDatasets); i++ {

		if m.LinkedDatasets[i] != nil {
			if err := m.LinkedDatasets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("linkedDatasets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("linkedDatasets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProjectCreateRequest) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Properties {

		if val, ok := m.Properties[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectCreateRequest) UnmarshalBinary(b []byte) error {
	var res ProjectCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

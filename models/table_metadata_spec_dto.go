// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TableMetadataSpecDto table metadata spec dto
//
// swagger:model TableMetadataSpecDto
type TableMetadataSpecDto struct {

	// database
	Database string `json:"database,omitempty"`

	// schema
	Schema string `json:"schema,omitempty"`

	// table prefixes
	TablePrefixes []string `json:"tablePrefixes"`

	// table types
	TableTypes []string `json:"tableTypes"`

	// tables
	Tables []string `json:"tables"`
}

// Validate validates this table metadata spec dto
func (m *TableMetadataSpecDto) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTableTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tableMetadataSpecDtoTableTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TABLE","EXTERNAL_TABLE","VIEW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tableMetadataSpecDtoTableTypesItemsEnum = append(tableMetadataSpecDtoTableTypesItemsEnum, v)
	}
}

func (m *TableMetadataSpecDto) validateTableTypesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tableMetadataSpecDtoTableTypesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TableMetadataSpecDto) validateTableTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.TableTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.TableTypes); i++ {

		// value enum
		if err := m.validateTableTypesItemsEnum("tableTypes"+"."+strconv.Itoa(i), "body", m.TableTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this table metadata spec dto based on context it is used
func (m *TableMetadataSpecDto) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TableMetadataSpecDto) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TableMetadataSpecDto) UnmarshalBinary(b []byte) error {
	var res TableMetadataSpecDto
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

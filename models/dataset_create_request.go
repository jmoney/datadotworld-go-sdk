// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatasetCreateRequest dataset create request
//
// swagger:model DatasetCreateRequest
type DatasetCreateRequest struct {

	// asset status iri
	AssetStatusIri string `json:"assetStatusIri,omitempty"`

	// Interval in which files should be synced
	// Enum: [NEVER HOURLY DAILY WEEKLY]
	AutoSyncInterval string `json:"autoSyncInterval,omitempty"`

	// description
	// Max Length: 120
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// files
	Files []*FileCreateRequest `json:"files"`

	// license
	// Enum: [CC BY-NC CC BY-NC-ND CC BY-NC-SA CC BY-ND CC BY-ND 3.0 CC-0 CC-BY CC-BY 3.0 CC-BY 3.0 AU CC-BY 3.0 IGO CC-BY 3.0 NZ CC-BY-IGO CC-BY-NC 3.0 CC-BY-NC 3.0 NZ CC-BY-NC-ND-NZ-3.0 CC-BY-NC-SA 3.0 CC-BY-NC-SA 3.0 NZ CC-BY-SA CC-BY-SA 3.0 CC-BY-SA 3.0 NZ CDLA-Permissive-1.0 CDLA-Sharing-1.0 Italian-ODL MIT License ODC-BY ODC-ODbL OGL OGL-Canada OGL-Nova Scotia OGL-UK OSODL Other PDDL Public Domain]
	License string `json:"license,omitempty"`

	// properties
	Properties map[string]JSONNode `json:"properties,omitempty"`

	// summary
	// Max Length: 25000
	// Min Length: 0
	Summary *string `json:"summary,omitempty"`

	// tags
	Tags []string `json:"tags"`

	// title
	// Required: true
	// Max Length: 60
	// Min Length: 1
	Title *string `json:"title"`

	// visibility
	// Required: true
	// Enum: [OPEN PRIVATE]
	Visibility *string `json:"visibility"`
}

// Validate validates this dataset create request
func (m *DatasetCreateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoSyncInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var datasetCreateRequestTypeAutoSyncIntervalPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEVER","HOURLY","DAILY","WEEKLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datasetCreateRequestTypeAutoSyncIntervalPropEnum = append(datasetCreateRequestTypeAutoSyncIntervalPropEnum, v)
	}
}

const (

	// DatasetCreateRequestAutoSyncIntervalNEVER captures enum value "NEVER"
	DatasetCreateRequestAutoSyncIntervalNEVER string = "NEVER"

	// DatasetCreateRequestAutoSyncIntervalHOURLY captures enum value "HOURLY"
	DatasetCreateRequestAutoSyncIntervalHOURLY string = "HOURLY"

	// DatasetCreateRequestAutoSyncIntervalDAILY captures enum value "DAILY"
	DatasetCreateRequestAutoSyncIntervalDAILY string = "DAILY"

	// DatasetCreateRequestAutoSyncIntervalWEEKLY captures enum value "WEEKLY"
	DatasetCreateRequestAutoSyncIntervalWEEKLY string = "WEEKLY"
)

// prop value enum
func (m *DatasetCreateRequest) validateAutoSyncIntervalEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, datasetCreateRequestTypeAutoSyncIntervalPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DatasetCreateRequest) validateAutoSyncInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoSyncInterval) { // not required
		return nil
	}

	// value enum
	if err := m.validateAutoSyncIntervalEnum("autoSyncInterval", "body", m.AutoSyncInterval); err != nil {
		return err
	}

	return nil
}

func (m *DatasetCreateRequest) validateDescription(formats strfmt.Registry) error {
	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", *m.Description, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", *m.Description, 120); err != nil {
		return err
	}

	return nil
}

func (m *DatasetCreateRequest) validateFiles(formats strfmt.Registry) error {
	if swag.IsZero(m.Files) { // not required
		return nil
	}

	for i := 0; i < len(m.Files); i++ {
		if swag.IsZero(m.Files[i]) { // not required
			continue
		}

		if m.Files[i] != nil {
			if err := m.Files[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var datasetCreateRequestTypeLicensePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CC BY-NC","CC BY-NC-ND","CC BY-NC-SA","CC BY-ND","CC BY-ND 3.0","CC-0","CC-BY","CC-BY 3.0","CC-BY 3.0 AU","CC-BY 3.0 IGO","CC-BY 3.0 NZ","CC-BY-IGO","CC-BY-NC 3.0","CC-BY-NC 3.0 NZ","CC-BY-NC-ND-NZ-3.0","CC-BY-NC-SA 3.0","CC-BY-NC-SA 3.0 NZ","CC-BY-SA","CC-BY-SA 3.0","CC-BY-SA 3.0 NZ","CDLA-Permissive-1.0","CDLA-Sharing-1.0","Italian-ODL","MIT License","ODC-BY","ODC-ODbL","OGL","OGL-Canada","OGL-Nova Scotia","OGL-UK","OSODL","Other","PDDL","Public Domain"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datasetCreateRequestTypeLicensePropEnum = append(datasetCreateRequestTypeLicensePropEnum, v)
	}
}

const (

	// DatasetCreateRequestLicenseCCBYDashNC captures enum value "CC BY-NC"
	DatasetCreateRequestLicenseCCBYDashNC string = "CC BY-NC"

	// DatasetCreateRequestLicenseCCBYDashNCDashND captures enum value "CC BY-NC-ND"
	DatasetCreateRequestLicenseCCBYDashNCDashND string = "CC BY-NC-ND"

	// DatasetCreateRequestLicenseCCBYDashNCDashSA captures enum value "CC BY-NC-SA"
	DatasetCreateRequestLicenseCCBYDashNCDashSA string = "CC BY-NC-SA"

	// DatasetCreateRequestLicenseCCBYDashND captures enum value "CC BY-ND"
	DatasetCreateRequestLicenseCCBYDashND string = "CC BY-ND"

	// DatasetCreateRequestLicenseCCBYDashND3Dot0 captures enum value "CC BY-ND 3.0"
	DatasetCreateRequestLicenseCCBYDashND3Dot0 string = "CC BY-ND 3.0"

	// DatasetCreateRequestLicenseCCDash0 captures enum value "CC-0"
	DatasetCreateRequestLicenseCCDash0 string = "CC-0"

	// DatasetCreateRequestLicenseCCDashBY captures enum value "CC-BY"
	DatasetCreateRequestLicenseCCDashBY string = "CC-BY"

	// DatasetCreateRequestLicenseCCDashBY3Dot0 captures enum value "CC-BY 3.0"
	DatasetCreateRequestLicenseCCDashBY3Dot0 string = "CC-BY 3.0"

	// DatasetCreateRequestLicenseCCDashBY3Dot0AU captures enum value "CC-BY 3.0 AU"
	DatasetCreateRequestLicenseCCDashBY3Dot0AU string = "CC-BY 3.0 AU"

	// DatasetCreateRequestLicenseCCDashBY3Dot0IGO captures enum value "CC-BY 3.0 IGO"
	DatasetCreateRequestLicenseCCDashBY3Dot0IGO string = "CC-BY 3.0 IGO"

	// DatasetCreateRequestLicenseCCDashBY3Dot0NZ captures enum value "CC-BY 3.0 NZ"
	DatasetCreateRequestLicenseCCDashBY3Dot0NZ string = "CC-BY 3.0 NZ"

	// DatasetCreateRequestLicenseCCDashBYDashIGO captures enum value "CC-BY-IGO"
	DatasetCreateRequestLicenseCCDashBYDashIGO string = "CC-BY-IGO"

	// DatasetCreateRequestLicenseCCDashBYDashNC3Dot0 captures enum value "CC-BY-NC 3.0"
	DatasetCreateRequestLicenseCCDashBYDashNC3Dot0 string = "CC-BY-NC 3.0"

	// DatasetCreateRequestLicenseCCDashBYDashNC3Dot0NZ captures enum value "CC-BY-NC 3.0 NZ"
	DatasetCreateRequestLicenseCCDashBYDashNC3Dot0NZ string = "CC-BY-NC 3.0 NZ"

	// DatasetCreateRequestLicenseCCDashBYDashNCDashNDDashNZDash3Dot0 captures enum value "CC-BY-NC-ND-NZ-3.0"
	DatasetCreateRequestLicenseCCDashBYDashNCDashNDDashNZDash3Dot0 string = "CC-BY-NC-ND-NZ-3.0"

	// DatasetCreateRequestLicenseCCDashBYDashNCDashSA3Dot0 captures enum value "CC-BY-NC-SA 3.0"
	DatasetCreateRequestLicenseCCDashBYDashNCDashSA3Dot0 string = "CC-BY-NC-SA 3.0"

	// DatasetCreateRequestLicenseCCDashBYDashNCDashSA3Dot0NZ captures enum value "CC-BY-NC-SA 3.0 NZ"
	DatasetCreateRequestLicenseCCDashBYDashNCDashSA3Dot0NZ string = "CC-BY-NC-SA 3.0 NZ"

	// DatasetCreateRequestLicenseCCDashBYDashSA captures enum value "CC-BY-SA"
	DatasetCreateRequestLicenseCCDashBYDashSA string = "CC-BY-SA"

	// DatasetCreateRequestLicenseCCDashBYDashSA3Dot0 captures enum value "CC-BY-SA 3.0"
	DatasetCreateRequestLicenseCCDashBYDashSA3Dot0 string = "CC-BY-SA 3.0"

	// DatasetCreateRequestLicenseCCDashBYDashSA3Dot0NZ captures enum value "CC-BY-SA 3.0 NZ"
	DatasetCreateRequestLicenseCCDashBYDashSA3Dot0NZ string = "CC-BY-SA 3.0 NZ"

	// DatasetCreateRequestLicenseCDLADashPermissiveDash1Dot0 captures enum value "CDLA-Permissive-1.0"
	DatasetCreateRequestLicenseCDLADashPermissiveDash1Dot0 string = "CDLA-Permissive-1.0"

	// DatasetCreateRequestLicenseCDLADashSharingDash1Dot0 captures enum value "CDLA-Sharing-1.0"
	DatasetCreateRequestLicenseCDLADashSharingDash1Dot0 string = "CDLA-Sharing-1.0"

	// DatasetCreateRequestLicenseItalianDashODL captures enum value "Italian-ODL"
	DatasetCreateRequestLicenseItalianDashODL string = "Italian-ODL"

	// DatasetCreateRequestLicenseMITLicense captures enum value "MIT License"
	DatasetCreateRequestLicenseMITLicense string = "MIT License"

	// DatasetCreateRequestLicenseODCDashBY captures enum value "ODC-BY"
	DatasetCreateRequestLicenseODCDashBY string = "ODC-BY"

	// DatasetCreateRequestLicenseODCDashODbL captures enum value "ODC-ODbL"
	DatasetCreateRequestLicenseODCDashODbL string = "ODC-ODbL"

	// DatasetCreateRequestLicenseOGL captures enum value "OGL"
	DatasetCreateRequestLicenseOGL string = "OGL"

	// DatasetCreateRequestLicenseOGLDashCanada captures enum value "OGL-Canada"
	DatasetCreateRequestLicenseOGLDashCanada string = "OGL-Canada"

	// DatasetCreateRequestLicenseOGLDashNovaScotia captures enum value "OGL-Nova Scotia"
	DatasetCreateRequestLicenseOGLDashNovaScotia string = "OGL-Nova Scotia"

	// DatasetCreateRequestLicenseOGLDashUK captures enum value "OGL-UK"
	DatasetCreateRequestLicenseOGLDashUK string = "OGL-UK"

	// DatasetCreateRequestLicenseOSODL captures enum value "OSODL"
	DatasetCreateRequestLicenseOSODL string = "OSODL"

	// DatasetCreateRequestLicenseOther captures enum value "Other"
	DatasetCreateRequestLicenseOther string = "Other"

	// DatasetCreateRequestLicensePDDL captures enum value "PDDL"
	DatasetCreateRequestLicensePDDL string = "PDDL"

	// DatasetCreateRequestLicensePublicDomain captures enum value "Public Domain"
	DatasetCreateRequestLicensePublicDomain string = "Public Domain"
)

// prop value enum
func (m *DatasetCreateRequest) validateLicenseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, datasetCreateRequestTypeLicensePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DatasetCreateRequest) validateLicense(formats strfmt.Registry) error {
	if swag.IsZero(m.License) { // not required
		return nil
	}

	// value enum
	if err := m.validateLicenseEnum("license", "body", m.License); err != nil {
		return err
	}

	return nil
}

func (m *DatasetCreateRequest) validateProperties(formats strfmt.Registry) error {
	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	for k := range m.Properties {

		if err := validate.Required("properties"+"."+k, "body", m.Properties[k]); err != nil {
			return err
		}
		if val, ok := m.Properties[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("properties" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *DatasetCreateRequest) validateSummary(formats strfmt.Registry) error {
	if swag.IsZero(m.Summary) { // not required
		return nil
	}

	if err := validate.MinLength("summary", "body", *m.Summary, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("summary", "body", *m.Summary, 25000); err != nil {
		return err
	}

	return nil
}

func (m *DatasetCreateRequest) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MinLength("title", "body", *m.Title, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", *m.Title, 60); err != nil {
		return err
	}

	return nil
}

var datasetCreateRequestTypeVisibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OPEN","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		datasetCreateRequestTypeVisibilityPropEnum = append(datasetCreateRequestTypeVisibilityPropEnum, v)
	}
}

const (

	// DatasetCreateRequestVisibilityOPEN captures enum value "OPEN"
	DatasetCreateRequestVisibilityOPEN string = "OPEN"

	// DatasetCreateRequestVisibilityPRIVATE captures enum value "PRIVATE"
	DatasetCreateRequestVisibilityPRIVATE string = "PRIVATE"
)

// prop value enum
func (m *DatasetCreateRequest) validateVisibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, datasetCreateRequestTypeVisibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DatasetCreateRequest) validateVisibility(formats strfmt.Registry) error {

	if err := validate.Required("visibility", "body", m.Visibility); err != nil {
		return err
	}

	// value enum
	if err := m.validateVisibilityEnum("visibility", "body", *m.Visibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this dataset create request based on the context it is used
func (m *DatasetCreateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProperties(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatasetCreateRequest) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Files); i++ {

		if m.Files[i] != nil {
			if err := m.Files[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("files" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("files" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DatasetCreateRequest) contextValidateProperties(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Properties {

		if val, ok := m.Properties[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatasetCreateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatasetCreateRequest) UnmarshalBinary(b []byte) error {
	var res DatasetCreateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
